{"version":3,"file":"index.cjs.js","sources":["../src/stages/publish/helpers.ts","../src/stages/generate/helpers.ts","../src/stages/generate/mkDocsPatchers.ts","../src/stages/generate/techdocs.ts","../src/stages/generate/generators.ts","../src/helpers.ts","../src/stages/prepare/dir.ts","../src/stages/prepare/url.ts","../src/stages/prepare/preparers.ts","../src/stages/publish/awsS3.ts","../src/stages/publish/azureBlobStorage.ts","../src/stages/publish/migrations/GoogleMigration.ts","../src/stages/publish/googleStorage.ts","../src/stages/publish/local.ts","../src/stages/publish/openStackSwift.ts","../src/stages/publish/publish.ts"],"sourcesContent":["/*\n * Copyright 2020 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { Entity, DEFAULT_NAMESPACE } from '@backstage/catalog-model';\nimport mime from 'mime-types';\nimport path from 'path';\nimport createLimiter from 'p-limit';\nimport recursiveReadDir from 'recursive-readdir';\n\n/**\n * Helper to get the expected content-type for a given file extension. Also\n * takes XSS mitigation into account.\n */\nconst getContentTypeForExtension = (ext: string): string => {\n  const defaultContentType = 'text/plain; charset=utf-8';\n\n  // Prevent sanitization bypass by preventing browsers from directly rendering\n  // the contents of untrusted files.\n  if (ext.match(/htm|xml|svg/i)) {\n    return defaultContentType;\n  }\n\n  return mime.contentType(ext) || defaultContentType;\n};\n\nexport type responseHeadersType = {\n  'Content-Type': string;\n};\n\n/**\n * Some files need special headers to be used correctly by the frontend. This function\n * generates headers in the response to those file requests.\n * @param fileExtension - .html, .css, .js, .png etc.\n */\nexport const getHeadersForFileExtension = (\n  fileExtension: string,\n): responseHeadersType => {\n  return {\n    'Content-Type': getContentTypeForExtension(fileExtension),\n  };\n};\n\n/**\n * Recursively traverse all the sub-directories of a path and return\n * a list of absolute paths of all the files. e.g. tree command in Unix\n *\n * @example\n *\n * /User/username/my_dir\n *     dirA\n *     |   subDirA\n *     |   |   file1\n *     EmptyDir\n *     dirB\n *     |   file2\n *     file3\n *\n * getFileListRecursively('/Users/username/myDir')\n * // returns\n * [\n *   '/User/username/my_dir/dirA/subDirA/file1',\n *   '/User/username/my_dir/dirB/file2',\n *   '/User/username/my_dir/file3'\n * ]\n * @param rootDirPath - Absolute path to the root directory.\n */\nexport const getFileTreeRecursively = async (\n  rootDirPath: string,\n): Promise<string[]> => {\n  // Iterate on all the files in the directory and its sub-directories\n  const fileList = await recursiveReadDir(rootDirPath).catch(error => {\n    throw new Error(`Failed to read template directory: ${error.message}`);\n  });\n  return fileList;\n};\n\n/**\n * Takes a posix path and returns a lower-cased version of entity's triplet\n * with the remaining path in posix.\n *\n * Path must not include a starting slash.\n *\n * @example\n * lowerCaseEntityTriplet('default/Component/backstage')\n * // return default/component/backstage\n */\nexport const lowerCaseEntityTriplet = (posixPath: string): string => {\n  const [namespace, kind, name, ...rest] = posixPath.split(path.posix.sep);\n  const lowerNamespace = namespace.toLowerCase();\n  const lowerKind = kind.toLowerCase();\n  const lowerName = name.toLowerCase();\n  return [lowerNamespace, lowerKind, lowerName, ...rest].join(path.posix.sep);\n};\n\n/**\n * Takes either a win32 or posix path and returns a lower-cased version of entity's triplet\n * with the remaining path in posix.\n *\n * Starting slashes will be trimmed.\n *\n * Throws an error if the path does not appear to be an entity triplet.\n *\n * @example\n * lowerCaseEntityTripletInStoragePath('/default/Component/backstage/file.txt')\n * // return default/component/backstage/file.txt\n */\nexport const lowerCaseEntityTripletInStoragePath = (\n  originalPath: string,\n): string => {\n  let posixPath = originalPath;\n  if (originalPath.includes(path.win32.sep)) {\n    posixPath = originalPath.split(path.win32.sep).join(path.posix.sep);\n  }\n\n  // remove leading slash\n  const parts = posixPath.split(path.posix.sep);\n  if (parts[0] === '') {\n    parts.shift();\n  }\n\n  // check if all parts of the entity exist (name, namespace, kind) plus filename\n  if (parts.length <= 3) {\n    throw new Error(\n      `Encountered file unmanaged by TechDocs ${originalPath}. Skipping.`,\n    );\n  }\n\n  return lowerCaseEntityTriplet(parts.join(path.posix.sep));\n};\n\n/**\n * Take a posix path and return a path without leading and trailing\n * separators\n *\n * @example\n * normalizeExternalStorageRootPath('/backstage-data/techdocs/')\n * // return backstage-data/techdocs\n */\nexport const normalizeExternalStorageRootPath = (posixPath: string): string => {\n  // remove leading slash\n  let normalizedPath = posixPath;\n  if (posixPath.startsWith(path.posix.sep)) {\n    normalizedPath = posixPath.slice(1);\n  }\n\n  // remove trailing slash\n  if (normalizedPath.endsWith(path.posix.sep)) {\n    normalizedPath = normalizedPath.slice(0, normalizedPath.length - 1);\n  }\n\n  return normalizedPath;\n};\n\n// Only returns the files that existed previously and are not present anymore.\nexport const getStaleFiles = (\n  newFiles: string[],\n  oldFiles: string[],\n): string[] => {\n  const staleFiles = new Set(oldFiles);\n  newFiles.forEach(newFile => {\n    staleFiles.delete(newFile);\n  });\n  return Array.from(staleFiles);\n};\n\n// Compose actual filename on remote bucket including entity information\nexport const getCloudPathForLocalPath = (\n  entity: Entity,\n  localPath = '',\n  useLegacyPathCasing = false,\n  externalStorageRootPath = '',\n): string => {\n  // Convert destination file path to a POSIX path for uploading.\n  // GCS expects / as path separator and relativeFilePath will contain \\\\ on Windows.\n  // https://cloud.google.com/storage/docs/gsutil/addlhelp/HowSubdirectoriesWork\n  const relativeFilePathPosix = localPath.split(path.sep).join(path.posix.sep);\n\n  // The / delimiter is intentional since it represents the cloud storage and not the local file system.\n  const entityRootDir = `${entity.metadata?.namespace ?? DEFAULT_NAMESPACE}/${\n    entity.kind\n  }/${entity.metadata.name}`;\n\n  const relativeFilePathTriplet = `${entityRootDir}/${relativeFilePathPosix}`;\n\n  const destination = useLegacyPathCasing\n    ? relativeFilePathTriplet\n    : lowerCaseEntityTriplet(relativeFilePathTriplet);\n\n  // Again, the / delimiter is intentional, as it represents remote storage.\n  const destinationWithRoot = [\n    // The extra filter prevents unintended double slashes and prefixes.\n    ...externalStorageRootPath.split(path.posix.sep).filter(s => s !== ''),\n    destination,\n  ].join('/');\n\n  return destinationWithRoot; // Remote storage file relative path\n};\n\n// Perform rate limited generic operations by passing a function and a list of arguments\nexport const bulkStorageOperation = async <T>(\n  operation: (arg: T) => Promise<unknown>,\n  args: T[],\n  { concurrencyLimit } = { concurrencyLimit: 25 },\n) => {\n  const limiter = createLimiter(concurrencyLimit);\n  await Promise.all(args.map(arg => limiter(operation, arg)));\n};\n","/*\n * Copyright 2020 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { isChildPath } from '@backstage/backend-common';\nimport { Entity } from '@backstage/catalog-model';\nimport { assertError, ForwardedError } from '@backstage/errors';\nimport { ScmIntegrationRegistry } from '@backstage/integration';\nimport { SpawnOptionsWithoutStdio, spawn } from 'child_process';\nimport fs from 'fs-extra';\nimport gitUrlParse from 'git-url-parse';\nimport yaml, { DEFAULT_SCHEMA, Type } from 'js-yaml';\nimport path, { resolve as resolvePath } from 'path';\nimport { PassThrough, Writable } from 'stream';\nimport { Logger } from 'winston';\nimport { ParsedLocationAnnotation } from '../../helpers';\nimport { SupportedGeneratorKey } from './types';\nimport { getFileTreeRecursively } from '../publish/helpers';\n\n// TODO: Implement proper support for more generators.\nexport function getGeneratorKey(entity: Entity): SupportedGeneratorKey {\n  if (!entity) {\n    throw new Error('No entity provided');\n  }\n\n  return 'techdocs';\n}\n\nexport type RunCommandOptions = {\n  /** command to run */\n  command: string;\n  /** arguments to pass the command */\n  args: string[];\n  /** options to pass to spawn */\n  options: SpawnOptionsWithoutStdio;\n  /** stream to capture stdout and stderr output */\n  logStream?: Writable;\n};\n\n/**\n * Run a command in a sub-process, normally a shell command.\n */\nexport const runCommand = async ({\n  command,\n  args,\n  options,\n  logStream = new PassThrough(),\n}: RunCommandOptions) => {\n  await new Promise<void>((resolve, reject) => {\n    const process = spawn(command, args, options);\n\n    process.stdout.on('data', stream => {\n      logStream.write(stream);\n    });\n\n    process.stderr.on('data', stream => {\n      logStream.write(stream);\n    });\n\n    process.on('error', error => {\n      return reject(error);\n    });\n\n    process.on('close', code => {\n      if (code !== 0) {\n        return reject(`Command ${command} failed, exit code: ${code}`);\n      }\n      return resolve();\n    });\n  });\n};\n\n/**\n * Return the source url for MkDocs based on the backstage.io/techdocs-ref annotation.\n * Depending on the type of target, it can either return a repo_url, an edit_uri, both, or none.\n *\n * @param parsedLocationAnnotation - Object with location url and type\n * @param scmIntegrations - the scmIntegration to do url transformations\n * @param docsFolder - the configured docs folder in the mkdocs.yml (defaults to 'docs')\n * @returns the settings for the mkdocs.yml\n */\nexport const getRepoUrlFromLocationAnnotation = (\n  parsedLocationAnnotation: ParsedLocationAnnotation,\n  scmIntegrations: ScmIntegrationRegistry,\n  docsFolder: string = 'docs',\n): { repo_url?: string; edit_uri?: string } => {\n  const { type: locationType, target } = parsedLocationAnnotation;\n\n  if (locationType === 'url') {\n    const integration = scmIntegrations.byUrl(target);\n\n    // We only support it for github and gitlab for now as the edit_uri\n    // is not properly supported for others yet.\n    if (integration && ['github', 'gitlab'].includes(integration.type)) {\n      // handle the case where a user manually writes url:https://github.com/backstage/backstage i.e. without /blob/...\n      const { filepathtype } = gitUrlParse(target);\n      if (filepathtype === '') {\n        return { repo_url: target };\n      }\n\n      const sourceFolder = integration.resolveUrl({\n        url: `./${docsFolder}`,\n        base: target,\n      });\n      return { edit_uri: integration.resolveEditUrl(sourceFolder) };\n    }\n  }\n\n  return {};\n};\n\nclass UnknownTag {\n  constructor(public readonly data: any, public readonly type?: string) {}\n}\n\nexport const MKDOCS_SCHEMA = DEFAULT_SCHEMA.extend([\n  new Type('', {\n    kind: 'scalar',\n    multi: true,\n    representName: o => (o as UnknownTag).type,\n    represent: o => (o as UnknownTag).data ?? '',\n    instanceOf: UnknownTag,\n    construct: (data: string, type?: string) => new UnknownTag(data, type),\n  }),\n  new Type('', {\n    kind: 'sequence',\n    multi: true,\n    representName: o => (o as UnknownTag).type,\n    represent: o => (o as UnknownTag).data ?? '',\n    instanceOf: UnknownTag,\n    construct: (data: string, type?: string) => new UnknownTag(data, type),\n  }),\n]);\n\n/**\n * Finds and loads the contents of either an mkdocs.yml or mkdocs.yaml file,\n * depending on which is present (MkDocs supports both as of v1.2.2).\n *\n * @param inputDir - base dir to be searched for either an mkdocs.yml or\n *   mkdocs.yaml file.\n */\nexport const getMkdocsYml = async (\n  inputDir: string,\n): Promise<{ path: string; content: string }> => {\n  let mkdocsYmlPath: string;\n  let mkdocsYmlFileString: string;\n  try {\n    mkdocsYmlPath = path.join(inputDir, 'mkdocs.yaml');\n    mkdocsYmlFileString = await fs.readFile(mkdocsYmlPath, 'utf8');\n  } catch {\n    try {\n      mkdocsYmlPath = path.join(inputDir, 'mkdocs.yml');\n      mkdocsYmlFileString = await fs.readFile(mkdocsYmlPath, 'utf8');\n    } catch (error) {\n      throw new ForwardedError(\n        'Could not read MkDocs YAML config file mkdocs.yml or mkdocs.yaml for validation',\n        error,\n      );\n    }\n  }\n\n  return {\n    path: mkdocsYmlPath,\n    content: mkdocsYmlFileString,\n  };\n};\n\n/**\n * Validating mkdocs config file for incorrect/insecure values\n * Throws on invalid configs\n *\n * @param inputDir - base dir to be used as a docs_dir path validity check\n * @param mkdocsYmlFileString - The string contents of the loaded\n *   mkdocs.yml or equivalent of a docs site\n * @returns the parsed docs_dir or undefined\n */\nexport const validateMkdocsYaml = async (\n  inputDir: string,\n  mkdocsYmlFileString: string,\n): Promise<string | undefined> => {\n  const mkdocsYml = yaml.load(mkdocsYmlFileString, {\n    schema: MKDOCS_SCHEMA,\n  });\n\n  if (mkdocsYml === null || typeof mkdocsYml !== 'object') {\n    return undefined;\n  }\n\n  const parsedMkdocsYml: Record<string, any> = mkdocsYml;\n  if (\n    parsedMkdocsYml.docs_dir &&\n    !isChildPath(inputDir, resolvePath(inputDir, parsedMkdocsYml.docs_dir))\n  ) {\n    throw new Error(\n      `docs_dir configuration value in mkdocs can't be an absolute directory or start with ../ for security reasons.\n       Use relative paths instead which are resolved relative to your mkdocs.yml file location.`,\n    );\n  }\n  return parsedMkdocsYml.docs_dir;\n};\n\n/**\n * Update docs/index.md file before TechDocs generator uses it to generate docs site,\n * falling back to docs/README.md or README.md in case a default docs/index.md\n * is not provided.\n */\nexport const patchIndexPreBuild = async ({\n  inputDir,\n  logger,\n  docsDir = 'docs',\n}: {\n  inputDir: string;\n  logger: Logger;\n  docsDir?: string;\n}) => {\n  const docsPath = path.join(inputDir, docsDir);\n  const indexMdPath = path.join(docsPath, 'index.md');\n\n  if (await fs.pathExists(indexMdPath)) {\n    return;\n  }\n  logger.warn(`${path.join(docsDir, 'index.md')} not found.`);\n  const fallbacks = [\n    path.join(docsPath, 'README.md'),\n    path.join(docsPath, 'readme.md'),\n    path.join(inputDir, 'README.md'),\n    path.join(inputDir, 'readme.md'),\n  ];\n\n  await fs.ensureDir(docsPath);\n  for (const filePath of fallbacks) {\n    try {\n      await fs.copyFile(filePath, indexMdPath);\n      return;\n    } catch (error) {\n      logger.warn(`${path.relative(inputDir, filePath)} not found.`);\n    }\n  }\n\n  logger.warn(\n    `Could not find any techdocs' index file. Please make sure at least one of ${[\n      indexMdPath,\n      ...fallbacks,\n    ].join(' ')} exists.`,\n  );\n};\n\n/**\n * Create or update the techdocs_metadata.json. Values initialized/updated are:\n * - The build_timestamp (now)\n * - The list of files generated\n *\n * @param techdocsMetadataPath - File path to techdocs_metadata.json\n */\nexport const createOrUpdateMetadata = async (\n  techdocsMetadataPath: string,\n  logger: Logger,\n): Promise<void> => {\n  const techdocsMetadataDir = techdocsMetadataPath\n    .split(path.sep)\n    .slice(0, -1)\n    .join(path.sep);\n  // check if file exists, create if it does not.\n  try {\n    await fs.access(techdocsMetadataPath, fs.constants.F_OK);\n  } catch (err) {\n    // Bootstrap file with empty JSON\n    await fs.writeJson(techdocsMetadataPath, JSON.parse('{}'));\n  }\n  // check if valid Json\n  let json;\n  try {\n    json = await fs.readJson(techdocsMetadataPath);\n  } catch (err) {\n    assertError(err);\n    const message = `Invalid JSON at ${techdocsMetadataPath} with error ${err.message}`;\n    logger.error(message);\n    throw new Error(message);\n  }\n\n  json.build_timestamp = Date.now();\n\n  // Get and write generated files to the metadata JSON. Each file string is in\n  // a form appropriate for invalidating the associated object from cache.\n  try {\n    json.files = (await getFileTreeRecursively(techdocsMetadataDir)).map(file =>\n      file.replace(`${techdocsMetadataDir}${path.sep}`, ''),\n    );\n  } catch (err) {\n    assertError(err);\n    json.files = [];\n    logger.warn(`Unable to add files list to metadata: ${err.message}`);\n  }\n\n  await fs.writeJson(techdocsMetadataPath, json);\n  return;\n};\n\n/**\n * Update the techdocs_metadata.json to add etag of the prepared tree (e.g. commit SHA or actual Etag of the resource).\n * This is helpful to check if a TechDocs site in storage has gone outdated, without maintaining an in-memory build info\n * per Backstage instance.\n *\n * @param techdocsMetadataPath - File path to techdocs_metadata.json\n * @param etag - The ETag to use\n */\nexport const storeEtagMetadata = async (\n  techdocsMetadataPath: string,\n  etag: string,\n): Promise<void> => {\n  const json = await fs.readJson(techdocsMetadataPath);\n  json.etag = etag;\n  await fs.writeJson(techdocsMetadataPath, json);\n};\n","/*\n * Copyright 2022 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { Logger } from 'winston';\nimport fs from 'fs-extra';\nimport yaml from 'js-yaml';\nimport { ParsedLocationAnnotation } from '../../helpers';\nimport { getRepoUrlFromLocationAnnotation, MKDOCS_SCHEMA } from './helpers';\nimport { assertError } from '@backstage/errors';\nimport { ScmIntegrationRegistry } from '@backstage/integration';\n\ntype MkDocsObject = {\n  plugins?: string[];\n  docs_dir: string;\n  repo_url?: string;\n  edit_uri?: string;\n};\n\nconst patchMkdocsFile = async (\n  mkdocsYmlPath: string,\n  logger: Logger,\n  updateAction: (mkdocsYml: MkDocsObject) => boolean,\n) => {\n  // We only want to override the mkdocs.yml if it has actually changed. This is relevant if\n  // used with a 'dir' location on the file system as this would permanently update the file.\n  let didEdit = false;\n\n  let mkdocsYmlFileString;\n  try {\n    mkdocsYmlFileString = await fs.readFile(mkdocsYmlPath, 'utf8');\n  } catch (error) {\n    assertError(error);\n    logger.warn(\n      `Could not read MkDocs YAML config file ${mkdocsYmlPath} before running the generator: ${error.message}`,\n    );\n    return;\n  }\n\n  let mkdocsYml: any;\n  try {\n    mkdocsYml = yaml.load(mkdocsYmlFileString, { schema: MKDOCS_SCHEMA });\n\n    // mkdocsYml should be an object type after successful parsing.\n    // But based on its type definition, it can also be a string or undefined, which we don't want.\n    if (typeof mkdocsYml === 'string' || typeof mkdocsYml === 'undefined') {\n      throw new Error('Bad YAML format.');\n    }\n  } catch (error) {\n    assertError(error);\n    logger.warn(\n      `Error in parsing YAML at ${mkdocsYmlPath} before running the generator. ${error.message}`,\n    );\n    return;\n  }\n\n  didEdit = updateAction(mkdocsYml);\n\n  try {\n    if (didEdit) {\n      await fs.writeFile(\n        mkdocsYmlPath,\n        yaml.dump(mkdocsYml, { schema: MKDOCS_SCHEMA }),\n        'utf8',\n      );\n    }\n  } catch (error) {\n    assertError(error);\n    logger.warn(\n      `Could not write to ${mkdocsYmlPath} after updating it before running the generator. ${error.message}`,\n    );\n    return;\n  }\n};\n\n/**\n * Update the mkdocs.yml file before TechDocs generator uses it to generate docs site.\n *\n * List of tasks:\n * - Add repo_url or edit_uri if it does not exists\n * If mkdocs.yml has a repo_url, the generated docs site gets an Edit button on the pages by default.\n * If repo_url is missing in mkdocs.yml, we will use techdocs annotation of the entity to possibly get\n * the repository URL.\n *\n * This function will not throw an error since this is not critical to the whole TechDocs pipeline.\n * Instead it will log warnings if there are any errors in reading, parsing or writing YAML.\n *\n * @param mkdocsYmlPath - Absolute path to mkdocs.yml or equivalent of a docs site\n * @param logger - A logger instance\n * @param parsedLocationAnnotation - Object with location url and type\n * @param scmIntegrations - the scmIntegration to do url transformations\n */\nexport const patchMkdocsYmlPreBuild = async (\n  mkdocsYmlPath: string,\n  logger: Logger,\n  parsedLocationAnnotation: ParsedLocationAnnotation,\n  scmIntegrations: ScmIntegrationRegistry,\n) => {\n  await patchMkdocsFile(mkdocsYmlPath, logger, mkdocsYml => {\n    if (!('repo_url' in mkdocsYml) && !('edit_uri' in mkdocsYml)) {\n      // Add edit_uri and/or repo_url to mkdocs.yml if it is missing.\n      // This will enable the Page edit button generated by MkDocs.\n      // If the either has been set, keep the original value\n      const result = getRepoUrlFromLocationAnnotation(\n        parsedLocationAnnotation,\n        scmIntegrations,\n        mkdocsYml.docs_dir,\n      );\n\n      if (result.repo_url || result.edit_uri) {\n        mkdocsYml.repo_url = result.repo_url;\n        mkdocsYml.edit_uri = result.edit_uri;\n\n        logger.info(\n          `Set ${JSON.stringify(\n            result,\n          )}. You can disable this feature by manually setting 'repo_url' or 'edit_uri' according to the MkDocs documentation at https://www.mkdocs.org/user-guide/configuration/#repo_url`,\n        );\n        return true;\n      }\n    }\n    return false;\n  });\n};\n\n/**\n * Update the mkdocs.yml file before TechDocs generator uses it to generate docs site.\n *\n * List of tasks:\n * - Add techdocs-core plugin to mkdocs file if it doesn't exist\n *\n * This function will not throw an error since this is not critical to the whole TechDocs pipeline.\n * Instead it will log warnings if there are any errors in reading, parsing or writing YAML.\n *\n * @param mkdocsYmlPath - Absolute path to mkdocs.yml or equivalent of a docs site\n * @param logger - A logger instance\n */\nexport const pathMkdocsYmlWithTechdocsPlugin = async (\n  mkdocsYmlPath: string,\n  logger: Logger,\n) => {\n  await patchMkdocsFile(mkdocsYmlPath, logger, mkdocsYml => {\n    // Modify mkdocs.yaml to contain the needed techdocs-core plugin if it is not there\n    if (!('plugins' in mkdocsYml)) {\n      mkdocsYml.plugins = ['techdocs-core'];\n      return true;\n    }\n\n    if (mkdocsYml.plugins && !mkdocsYml.plugins.includes('techdocs-core')) {\n      mkdocsYml.plugins.push('techdocs-core');\n      return true;\n    }\n    return false;\n  });\n};\n","/*\n * Copyright 2020 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { ContainerRunner } from '@backstage/backend-common';\nimport { Config } from '@backstage/config';\nimport path from 'path';\nimport { Logger } from 'winston';\nimport {\n  ScmIntegrationRegistry,\n  ScmIntegrations,\n} from '@backstage/integration';\nimport {\n  createOrUpdateMetadata,\n  getMkdocsYml,\n  patchIndexPreBuild,\n  runCommand,\n  storeEtagMetadata,\n  validateMkdocsYaml,\n} from './helpers';\n\nimport {\n  patchMkdocsYmlPreBuild,\n  pathMkdocsYmlWithTechdocsPlugin,\n} from './mkDocsPatchers';\nimport {\n  GeneratorBase,\n  GeneratorConfig,\n  GeneratorOptions,\n  GeneratorRunInType,\n  GeneratorRunOptions,\n} from './types';\nimport { ForwardedError } from '@backstage/errors';\n\n/**\n * Generates documentation files\n * @public\n */\nexport class TechdocsGenerator implements GeneratorBase {\n  /**\n   * The default docker image (and version) used to generate content. Public\n   * and static so that techdocs-node consumers can use the same version.\n   */\n  public static readonly defaultDockerImage = 'spotify/techdocs:v1.0.3';\n  private readonly logger: Logger;\n  private readonly containerRunner: ContainerRunner;\n  private readonly options: GeneratorConfig;\n  private readonly scmIntegrations: ScmIntegrationRegistry;\n\n  /**\n   * Returns a instance of TechDocs generator\n   * @param config - A Backstage configuration\n   * @param options - Options to configure the generator\n   */\n  static fromConfig(config: Config, options: GeneratorOptions) {\n    const { containerRunner, logger } = options;\n    const scmIntegrations = ScmIntegrations.fromConfig(config);\n    return new TechdocsGenerator({\n      logger,\n      containerRunner,\n      config,\n      scmIntegrations,\n    });\n  }\n\n  constructor(options: {\n    logger: Logger;\n    containerRunner: ContainerRunner;\n    config: Config;\n    scmIntegrations: ScmIntegrationRegistry;\n  }) {\n    this.logger = options.logger;\n    this.options = readGeneratorConfig(options.config, options.logger);\n    this.containerRunner = options.containerRunner;\n    this.scmIntegrations = options.scmIntegrations;\n  }\n\n  /** {@inheritDoc GeneratorBase.run} */\n  public async run(options: GeneratorRunOptions): Promise<void> {\n    const {\n      inputDir,\n      outputDir,\n      parsedLocationAnnotation,\n      etag,\n      logger: childLogger,\n      logStream,\n    } = options;\n\n    // Do some updates to mkdocs.yml before generating docs e.g. adding repo_url\n    const { path: mkdocsYmlPath, content } = await getMkdocsYml(inputDir);\n\n    // validate the docs_dir first\n    const docsDir = await validateMkdocsYaml(inputDir, content);\n\n    if (parsedLocationAnnotation) {\n      await patchMkdocsYmlPreBuild(\n        mkdocsYmlPath,\n        childLogger,\n        parsedLocationAnnotation,\n        this.scmIntegrations,\n      );\n\n      if (this.options.legacyCopyReadmeMdToIndexMd) {\n        await patchIndexPreBuild({ inputDir, logger: childLogger, docsDir });\n      }\n    }\n\n    if (!this.options.omitTechdocsCoreMkdocsPlugin) {\n      await pathMkdocsYmlWithTechdocsPlugin(mkdocsYmlPath, childLogger);\n    }\n\n    // Directories to bind on container\n    const mountDirs = {\n      [inputDir]: '/input',\n      [outputDir]: '/output',\n    };\n\n    try {\n      switch (this.options.runIn) {\n        case 'local':\n          await runCommand({\n            command: 'mkdocs',\n            args: ['build', '-d', outputDir, '-v'],\n            options: {\n              cwd: inputDir,\n            },\n            logStream,\n          });\n          childLogger.info(\n            `Successfully generated docs from ${inputDir} into ${outputDir} using local mkdocs`,\n          );\n          break;\n        case 'docker':\n          await this.containerRunner.runContainer({\n            imageName:\n              this.options.dockerImage ?? TechdocsGenerator.defaultDockerImage,\n            args: ['build', '-d', '/output'],\n            logStream,\n            mountDirs,\n            workingDir: '/input',\n            // Set the home directory inside the container as something that applications can\n            // write to, otherwise they will just fail trying to write to /\n            envVars: { HOME: '/tmp' },\n            pullImage: this.options.pullImage,\n          });\n          childLogger.info(\n            `Successfully generated docs from ${inputDir} into ${outputDir} using techdocs-container`,\n          );\n          break;\n        default:\n          throw new Error(\n            `Invalid config value \"${this.options.runIn}\" provided in 'techdocs.generators.techdocs'.`,\n          );\n      }\n    } catch (error) {\n      this.logger.debug(\n        `Failed to generate docs from ${inputDir} into ${outputDir}`,\n      );\n      throw new ForwardedError(\n        `Failed to generate docs from ${inputDir} into ${outputDir}`,\n        error,\n      );\n    }\n\n    /**\n     * Post Generate steps\n     */\n\n    // Add build timestamp and files to techdocs_metadata.json\n    // Creates techdocs_metadata.json if file does not exist.\n    await createOrUpdateMetadata(\n      path.join(outputDir, 'techdocs_metadata.json'),\n      childLogger,\n    );\n\n    // Add etag of the prepared tree to techdocs_metadata.json\n    // Assumes that the file already exists.\n    if (etag) {\n      await storeEtagMetadata(\n        path.join(outputDir, 'techdocs_metadata.json'),\n        etag,\n      );\n    }\n  }\n}\n\nexport function readGeneratorConfig(\n  config: Config,\n  logger: Logger,\n): GeneratorConfig {\n  const legacyGeneratorType = config.getOptionalString(\n    'techdocs.generators.techdocs',\n  ) as GeneratorRunInType;\n\n  if (legacyGeneratorType) {\n    logger.warn(\n      `The 'techdocs.generators.techdocs' configuration key is deprecated and will be removed in the future. Please use 'techdocs.generator' instead. ` +\n        `See here https://backstage.io/docs/features/techdocs/configuration`,\n    );\n  }\n\n  return {\n    runIn:\n      legacyGeneratorType ??\n      config.getOptionalString('techdocs.generator.runIn') ??\n      'docker',\n    dockerImage: config.getOptionalString('techdocs.generator.dockerImage'),\n    pullImage: config.getOptionalBoolean('techdocs.generator.pullImage'),\n    omitTechdocsCoreMkdocsPlugin: config.getOptionalBoolean(\n      'techdocs.generator.mkdocs.omitTechdocsCorePlugin',\n    ),\n    legacyCopyReadmeMdToIndexMd: config.getOptionalBoolean(\n      'techdocs.generator.mkdocs.legacyCopyReadmeMdToIndexMd',\n    ),\n  };\n}\n","/*\n * Copyright 2020 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { ContainerRunner } from '@backstage/backend-common';\nimport { Entity } from '@backstage/catalog-model';\nimport { Config } from '@backstage/config';\nimport { Logger } from 'winston';\nimport { getGeneratorKey } from './helpers';\nimport { TechdocsGenerator } from './techdocs';\nimport {\n  GeneratorBase,\n  GeneratorBuilder,\n  SupportedGeneratorKey,\n} from './types';\n\n/**\n * Collection of docs generators\n * @public\n */\nexport class Generators implements GeneratorBuilder {\n  private generatorMap = new Map<SupportedGeneratorKey, GeneratorBase>();\n\n  /**\n   * Returns a generators instance containing a generator for TechDocs\n   * @param config - A Backstage configuration\n   * @param options - Options to configure the TechDocs generator\n   */\n  static async fromConfig(\n    config: Config,\n    options: { logger: Logger; containerRunner: ContainerRunner },\n  ): Promise<GeneratorBuilder> {\n    const generators = new Generators();\n\n    const techdocsGenerator = TechdocsGenerator.fromConfig(config, options);\n    generators.register('techdocs', techdocsGenerator);\n\n    return generators;\n  }\n\n  /**\n   * Register a generator in the generators collection\n   * @param generatorKey - Unique identifier for the generator\n   * @param generator - The generator instance to register\n   */\n  register(generatorKey: SupportedGeneratorKey, generator: GeneratorBase) {\n    this.generatorMap.set(generatorKey, generator);\n  }\n\n  /**\n   * Returns the generator for a given TechDocs entity\n   * @param entity - A TechDocs entity instance\n   */\n  get(entity: Entity): GeneratorBase {\n    const generatorKey = getGeneratorKey(entity);\n    const generator = this.generatorMap.get(generatorKey);\n\n    if (!generator) {\n      throw new Error(`No generator registered for entity: \"${generatorKey}\"`);\n    }\n\n    return generator;\n  }\n}\n","/*\n * Copyright 2020 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { resolveSafeChildPath, UrlReader } from '@backstage/backend-common';\nimport {\n  Entity,\n  getEntitySourceLocation,\n  parseLocationRef,\n} from '@backstage/catalog-model';\nimport { InputError } from '@backstage/errors';\nimport { ScmIntegrationRegistry } from '@backstage/integration';\nimport path from 'path';\nimport { Logger } from 'winston';\nimport { PreparerResponse, RemoteProtocol } from './stages/prepare/types';\n\n/**\n * Parsed location annotation\n * @public\n */\nexport type ParsedLocationAnnotation = {\n  type: RemoteProtocol;\n  target: string;\n};\n\n/**\n * Returns a parset locations annotation\n * @public\n * @param annotationName - The name of the annotation in the entity metadata\n * @param entity - A TechDocs entity instance\n */\nexport const parseReferenceAnnotation = (\n  annotationName: string,\n  entity: Entity,\n): ParsedLocationAnnotation => {\n  const annotation = entity.metadata.annotations?.[annotationName];\n  if (!annotation) {\n    throw new InputError(\n      `No location annotation provided in entity: ${entity.metadata.name}`,\n    );\n  }\n\n  const { type, target } = parseLocationRef(annotation);\n  return {\n    type: type as RemoteProtocol,\n    target,\n  };\n};\n\n/**\n * TechDocs references of type `dir` are relative the source location of the entity.\n * This function transforms relative references to absolute ones, based on the\n * location the entity was ingested from. If the entity was registered by a `url`\n * location, it returns a `url` location with a resolved target that points to the\n * targeted subfolder. If the entity was registered by a `file` location, it returns\n * an absolute `dir` location.\n * @public\n * @param entity - the entity with annotations\n * @param dirAnnotation - the parsed techdocs-ref annotation of type 'dir'\n * @param scmIntegrations - access to the scmIntegration to do url transformations\n * @throws if the entity doesn't specify a `dir` location or is ingested from an unsupported location.\n * @returns the transformed location with an absolute target.\n */\nexport const transformDirLocation = (\n  entity: Entity,\n  dirAnnotation: ParsedLocationAnnotation,\n  scmIntegrations: ScmIntegrationRegistry,\n): { type: 'dir' | 'url'; target: string } => {\n  const location = getEntitySourceLocation(entity);\n\n  switch (location.type) {\n    case 'url': {\n      const target = scmIntegrations.resolveUrl({\n        url: dirAnnotation.target,\n        base: location.target,\n      });\n\n      return {\n        type: 'url',\n        target,\n      };\n    }\n\n    case 'file': {\n      // only permit targets in the same folder as the target of the `file` location!\n      const target = resolveSafeChildPath(\n        path.dirname(location.target),\n        dirAnnotation.target,\n      );\n\n      return {\n        type: 'dir',\n        target,\n      };\n    }\n\n    default:\n      throw new InputError(`Unable to resolve location type ${location.type}`);\n  }\n};\n\n/**\n * Returns a entity reference based on the TechDocs annotation type\n * @public\n * @param entity - A TechDocs instance\n * @param scmIntegration - An implementation for  SCM integration API\n */\nexport const getLocationForEntity = (\n  entity: Entity,\n  scmIntegration: ScmIntegrationRegistry,\n): ParsedLocationAnnotation => {\n  const annotation = parseReferenceAnnotation(\n    'backstage.io/techdocs-ref',\n    entity,\n  );\n\n  switch (annotation.type) {\n    case 'url':\n      return annotation;\n    case 'dir':\n      return transformDirLocation(entity, annotation, scmIntegration);\n    default:\n      throw new Error(`Invalid reference annotation ${annotation.type}`);\n  }\n};\n\n/**\n * Returns a preparer response {@link PreparerResponse}\n * @public\n * @param reader - Read a tree of files from a repository\n * @param entity - A TechDocs entity instance\n * @param opts - Options for configuring the reader, e.g. logger, etag, etc.\n */\nexport const getDocFilesFromRepository = async (\n  reader: UrlReader,\n  entity: Entity,\n  opts?: { etag?: string; logger?: Logger },\n): Promise<PreparerResponse> => {\n  const { target } = parseReferenceAnnotation(\n    'backstage.io/techdocs-ref',\n    entity,\n  );\n\n  opts?.logger?.debug(`Reading files from ${target}`);\n  // readTree will throw NotModifiedError if etag has not changed.\n  const readTreeResponse = await reader.readTree(target, { etag: opts?.etag });\n  const preparedDir = await readTreeResponse.dir();\n\n  opts?.logger?.debug(`Tree downloaded and stored at ${preparedDir}`);\n\n  return {\n    preparedDir,\n    etag: readTreeResponse.etag,\n  };\n};\n","/*\n * Copyright 2020 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { UrlReader } from '@backstage/backend-common';\nimport { Entity } from '@backstage/catalog-model';\nimport { Config } from '@backstage/config';\nimport { InputError } from '@backstage/errors';\nimport {\n  ScmIntegrationRegistry,\n  ScmIntegrations,\n} from '@backstage/integration';\nimport { Logger } from 'winston';\nimport { parseReferenceAnnotation, transformDirLocation } from '../../helpers';\nimport {\n  PreparerBase,\n  PreparerConfig,\n  PreparerOptions,\n  PreparerResponse,\n} from './types';\n\n/**\n * Preparer used to retrieve documentation files from a local directory\n * @public\n */\nexport class DirectoryPreparer implements PreparerBase {\n  private readonly scmIntegrations: ScmIntegrationRegistry;\n  private readonly reader: UrlReader;\n\n  /**\n   * Returns a directory preparer instance\n   * @param config - A backstage config\n   * @param options - A directory preparer options containing a logger and reader\n   */\n  static fromConfig(\n    config: Config,\n    { logger, reader }: PreparerConfig,\n  ): DirectoryPreparer {\n    return new DirectoryPreparer(config, logger, reader);\n  }\n\n  private constructor(\n    config: Config,\n    _logger: Logger | null,\n    reader: UrlReader,\n  ) {\n    this.reader = reader;\n    this.scmIntegrations = ScmIntegrations.fromConfig(config);\n  }\n\n  /** {@inheritDoc PreparerBase.prepare} */\n  async prepare(\n    entity: Entity,\n    options?: PreparerOptions,\n  ): Promise<PreparerResponse> {\n    const annotation = parseReferenceAnnotation(\n      'backstage.io/techdocs-ref',\n      entity,\n    );\n    const { type, target } = transformDirLocation(\n      entity,\n      annotation,\n      this.scmIntegrations,\n    );\n\n    switch (type) {\n      case 'url': {\n        options?.logger?.debug(`Reading files from ${target}`);\n        // the target is an absolute url since it has already been transformed\n        const response = await this.reader.readTree(target, {\n          etag: options?.etag,\n        });\n        const preparedDir = await response.dir();\n\n        options?.logger?.debug(`Tree downloaded and stored at ${preparedDir}`);\n\n        return {\n          preparedDir,\n          etag: response.etag,\n        };\n      }\n\n      case 'dir': {\n        return {\n          // the transformation already validated that the target is in a safe location\n          preparedDir: target,\n          // Instead of supporting caching on local sources, use techdocs-cli for local development and debugging.\n          etag: '',\n        };\n      }\n\n      default:\n        throw new InputError(`Unable to resolve location type ${type}`);\n    }\n  }\n}\n","/*\n * Copyright 2020 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assertError } from '@backstage/errors';\nimport { UrlReader } from '@backstage/backend-common';\nimport { Entity } from '@backstage/catalog-model';\nimport { Logger } from 'winston';\nimport { getDocFilesFromRepository } from '../../helpers';\nimport {\n  PreparerBase,\n  PreparerConfig,\n  PreparerOptions,\n  PreparerResponse,\n} from './types';\n\n/**\n * Preparer used to retrieve documentation files from a remote repository\n * @public\n */\nexport class UrlPreparer implements PreparerBase {\n  private readonly logger: Logger;\n  private readonly reader: UrlReader;\n\n  /**\n   * Returns a directory preparer instance\n   * @param config - A URL preparer config containing the a logger and reader\n   */\n  static fromConfig({ reader, logger }: PreparerConfig): UrlPreparer {\n    return new UrlPreparer(reader, logger);\n  }\n\n  private constructor(reader: UrlReader, logger: Logger) {\n    this.logger = logger;\n    this.reader = reader;\n  }\n\n  /** {@inheritDoc PreparerBase.prepare} */\n  async prepare(\n    entity: Entity,\n    options?: PreparerOptions,\n  ): Promise<PreparerResponse> {\n    try {\n      return await getDocFilesFromRepository(this.reader, entity, {\n        etag: options?.etag,\n        logger: this.logger,\n      });\n    } catch (error) {\n      assertError(error);\n      // NotModifiedError means that etag based cache is still valid.\n      if (error.name === 'NotModifiedError') {\n        this.logger.debug(`Cache is valid for etag ${options?.etag}`);\n      } else {\n        this.logger.debug(\n          `Unable to fetch files for building docs ${error.message}`,\n        );\n      }\n\n      throw error;\n    }\n  }\n}\n","/*\n * Copyright 2020 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { Entity } from '@backstage/catalog-model';\nimport { Config } from '@backstage/config';\nimport { parseReferenceAnnotation } from '../../helpers';\nimport { DirectoryPreparer } from './dir';\nimport { UrlPreparer } from './url';\nimport {\n  PreparerBase,\n  PreparerBuilder,\n  PreparerConfig,\n  RemoteProtocol,\n} from './types';\n\n/**\n * Collection of docs preparers (dir and url)\n * @public\n */\nexport class Preparers implements PreparerBuilder {\n  private preparerMap = new Map<RemoteProtocol, PreparerBase>();\n\n  /**\n   * Returns a generators instance containing a generator for TechDocs\n   * @public\n   * @param backstageConfig - A Backstage configuration\n   * @param preparerConfig - Options to configure preparers\n   */\n  static async fromConfig(\n    backstageConfig: Config,\n    { logger, reader }: PreparerConfig,\n  ): Promise<PreparerBuilder> {\n    const preparers = new Preparers();\n\n    const urlPreparer = UrlPreparer.fromConfig({ reader, logger });\n    preparers.register('url', urlPreparer);\n\n    /**\n     * Dir preparer is a syntactic sugar for users to define techdocs-ref annotation.\n     * When using dir preparer, the docs will be fetched using URL Reader.\n     */\n    const directoryPreparer = DirectoryPreparer.fromConfig(backstageConfig, {\n      logger,\n      reader,\n    });\n    preparers.register('dir', directoryPreparer);\n\n    return preparers;\n  }\n\n  /**\n   * Register a preparer in the preparers collection\n   * @param protocol - url or dir to associate with preparer\n   * @param preparer - The preparer instance to set\n   */\n  register(protocol: RemoteProtocol, preparer: PreparerBase) {\n    this.preparerMap.set(protocol, preparer);\n  }\n\n  /**\n   * Returns the preparer for a given TechDocs entity\n   * @param entity - A TechDocs entity instance\n   * @returns\n   */\n  get(entity: Entity): PreparerBase {\n    const { type } = parseReferenceAnnotation(\n      'backstage.io/techdocs-ref',\n      entity,\n    );\n    const preparer = this.preparerMap.get(type);\n\n    if (!preparer) {\n      throw new Error(`No preparer registered for type: \"${type}\"`);\n    }\n\n    return preparer;\n  }\n}\n","/*\n * Copyright 2020 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { Entity, CompoundEntityRef } from '@backstage/catalog-model';\nimport { Config } from '@backstage/config';\nimport { assertError, ForwardedError } from '@backstage/errors';\nimport aws, { Credentials } from 'aws-sdk';\nimport { ListObjectsV2Output } from 'aws-sdk/clients/s3';\nimport { CredentialsOptions } from 'aws-sdk/lib/credentials';\nimport express from 'express';\nimport fs from 'fs-extra';\nimport JSON5 from 'json5';\nimport createLimiter from 'p-limit';\nimport path from 'path';\nimport { Readable } from 'stream';\nimport { Logger } from 'winston';\nimport {\n  bulkStorageOperation,\n  getCloudPathForLocalPath,\n  getFileTreeRecursively,\n  getHeadersForFileExtension,\n  getStaleFiles,\n  lowerCaseEntityTriplet,\n  lowerCaseEntityTripletInStoragePath,\n  normalizeExternalStorageRootPath,\n} from './helpers';\nimport {\n  PublisherBase,\n  PublishRequest,\n  PublishResponse,\n  ReadinessResponse,\n  TechDocsMetadata,\n} from './types';\n\nconst streamToBuffer = (stream: Readable): Promise<Buffer> => {\n  return new Promise((resolve, reject) => {\n    try {\n      const chunks: any[] = [];\n      stream.on('data', chunk => chunks.push(chunk));\n      stream.on('error', reject);\n      stream.on('end', () => resolve(Buffer.concat(chunks)));\n    } catch (e) {\n      throw new ForwardedError('Unable to parse the response data', e);\n    }\n  });\n};\n\nexport class AwsS3Publish implements PublisherBase {\n  private readonly storageClient: aws.S3;\n  private readonly bucketName: string;\n  private readonly legacyPathCasing: boolean;\n  private readonly logger: Logger;\n  private readonly bucketRootPath: string;\n  private readonly sse?: 'aws:kms' | 'AES256';\n\n  constructor(options: {\n    storageClient: aws.S3;\n    bucketName: string;\n    legacyPathCasing: boolean;\n    logger: Logger;\n    bucketRootPath: string;\n    sse?: 'aws:kms' | 'AES256';\n  }) {\n    this.storageClient = options.storageClient;\n    this.bucketName = options.bucketName;\n    this.legacyPathCasing = options.legacyPathCasing;\n    this.logger = options.logger;\n    this.bucketRootPath = options.bucketRootPath;\n    this.sse = options.sse;\n  }\n\n  static fromConfig(config: Config, logger: Logger): PublisherBase {\n    let bucketName = '';\n    try {\n      bucketName = config.getString('techdocs.publisher.awsS3.bucketName');\n    } catch (error) {\n      throw new Error(\n        \"Since techdocs.publisher.type is set to 'awsS3' in your app config, \" +\n          'techdocs.publisher.awsS3.bucketName is required.',\n      );\n    }\n\n    const bucketRootPath = normalizeExternalStorageRootPath(\n      config.getOptionalString('techdocs.publisher.awsS3.bucketRootPath') || '',\n    );\n\n    const sse = config.getOptionalString('techdocs.publisher.awsS3.sse') as\n      | 'aws:kms'\n      | 'AES256'\n      | undefined;\n\n    // Credentials is an optional config. If missing, the default ways of authenticating AWS SDK V2 will be used.\n    // 1. AWS environment variables\n    // https://docs.aws.amazon.com/sdk-for-javascript/v2/developer-guide/loading-node-credentials-environment.html\n    // 2. AWS shared credentials file at ~/.aws/credentials\n    // https://docs.aws.amazon.com/sdk-for-javascript/v2/developer-guide/loading-node-credentials-shared.html\n    // 3. IAM Roles for EC2\n    // https://docs.aws.amazon.com/sdk-for-javascript/v2/developer-guide/loading-node-credentials-iam.html\n    const credentialsConfig = config.getOptionalConfig(\n      'techdocs.publisher.awsS3.credentials',\n    );\n    const credentials = AwsS3Publish.buildCredentials(credentialsConfig);\n\n    // AWS Region is an optional config. If missing, default AWS env variable AWS_REGION\n    // or AWS shared credentials file at ~/.aws/credentials will be used.\n    const region = config.getOptionalString('techdocs.publisher.awsS3.region');\n\n    // AWS endpoint is an optional config. If missing, the default endpoint is built from\n    // the configured region.\n    const endpoint = config.getOptionalString(\n      'techdocs.publisher.awsS3.endpoint',\n    );\n\n    // AWS forcePathStyle is an optional config. If missing, it defaults to false. Needs to be enabled for cases\n    // where endpoint url points to locally hosted S3 compatible storage like Localstack\n    const s3ForcePathStyle = config.getOptionalBoolean(\n      'techdocs.publisher.awsS3.s3ForcePathStyle',\n    );\n\n    const storageClient = new aws.S3({\n      credentials,\n      ...(region && { region }),\n      ...(endpoint && { endpoint }),\n      ...(s3ForcePathStyle && { s3ForcePathStyle }),\n    });\n\n    const legacyPathCasing =\n      config.getOptionalBoolean(\n        'techdocs.legacyUseCaseSensitiveTripletPaths',\n      ) || false;\n\n    return new AwsS3Publish({\n      storageClient,\n      bucketName,\n      bucketRootPath,\n      legacyPathCasing,\n      logger,\n      sse,\n    });\n  }\n\n  private static buildCredentials(\n    config?: Config,\n  ): Credentials | CredentialsOptions | undefined {\n    if (!config) {\n      return undefined;\n    }\n\n    const accessKeyId = config.getOptionalString('accessKeyId');\n    const secretAccessKey = config.getOptionalString('secretAccessKey');\n    let explicitCredentials: Credentials | undefined;\n    if (accessKeyId && secretAccessKey) {\n      explicitCredentials = new Credentials({\n        accessKeyId,\n        secretAccessKey,\n      });\n    }\n\n    const roleArn = config.getOptionalString('roleArn');\n    if (roleArn) {\n      return new aws.ChainableTemporaryCredentials({\n        masterCredentials: explicitCredentials,\n        params: {\n          RoleSessionName: 'backstage-aws-techdocs-s3-publisher',\n          RoleArn: roleArn,\n        },\n      });\n    }\n\n    return explicitCredentials;\n  }\n\n  /**\n   * Check if the defined bucket exists. Being able to connect means the configuration is good\n   * and the storage client will work.\n   */\n  async getReadiness(): Promise<ReadinessResponse> {\n    try {\n      await this.storageClient\n        .headBucket({ Bucket: this.bucketName })\n        .promise();\n\n      this.logger.info(\n        `Successfully connected to the AWS S3 bucket ${this.bucketName}.`,\n      );\n\n      return { isAvailable: true };\n    } catch (error) {\n      this.logger.error(\n        `Could not retrieve metadata about the AWS S3 bucket ${this.bucketName}. ` +\n          'Make sure the bucket exists. Also make sure that authentication is setup either by ' +\n          'explicitly defining credentials and region in techdocs.publisher.awsS3 in app config or ' +\n          'by using environment variables. Refer to https://backstage.io/docs/features/techdocs/using-cloud-storage',\n      );\n      this.logger.error(`from AWS client library`, error);\n      return {\n        isAvailable: false,\n      };\n    }\n  }\n\n  /**\n   * Upload all the files from the generated `directory` to the S3 bucket.\n   * Directory structure used in the bucket is - entityNamespace/entityKind/entityName/index.html\n   */\n  async publish({\n    entity,\n    directory,\n  }: PublishRequest): Promise<PublishResponse> {\n    const objects: string[] = [];\n    const useLegacyPathCasing = this.legacyPathCasing;\n    const bucketRootPath = this.bucketRootPath;\n    const sse = this.sse;\n\n    // First, try to retrieve a list of all individual files currently existing\n    let existingFiles: string[] = [];\n    try {\n      const remoteFolder = getCloudPathForLocalPath(\n        entity,\n        undefined,\n        useLegacyPathCasing,\n        bucketRootPath,\n      );\n      existingFiles = await this.getAllObjectsFromBucket({\n        prefix: remoteFolder,\n      });\n    } catch (e) {\n      assertError(e);\n      this.logger.error(\n        `Unable to list files for Entity ${entity.metadata.name}: ${e.message}`,\n      );\n    }\n\n    // Then, merge new files into the same folder\n    let absoluteFilesToUpload;\n    try {\n      // Remove the absolute path prefix of the source directory\n      // Path of all files to upload, relative to the root of the source directory\n      // e.g. ['index.html', 'sub-page/index.html', 'assets/images/favicon.png']\n      absoluteFilesToUpload = await getFileTreeRecursively(directory);\n\n      await bulkStorageOperation(\n        async absoluteFilePath => {\n          const relativeFilePath = path.relative(directory, absoluteFilePath);\n          const fileStream = fs.createReadStream(absoluteFilePath);\n\n          const params = {\n            Bucket: this.bucketName,\n            Key: getCloudPathForLocalPath(\n              entity,\n              relativeFilePath,\n              useLegacyPathCasing,\n              bucketRootPath,\n            ),\n            Body: fileStream,\n            ...(sse && { ServerSideEncryption: sse }),\n          } as aws.S3.PutObjectRequest;\n\n          objects.push(params.Key);\n          return this.storageClient.upload(params).promise();\n        },\n        absoluteFilesToUpload,\n        { concurrencyLimit: 10 },\n      );\n\n      this.logger.info(\n        `Successfully uploaded all the generated files for Entity ${entity.metadata.name}. Total number of files: ${absoluteFilesToUpload.length}`,\n      );\n    } catch (e) {\n      const errorMessage = `Unable to upload file(s) to AWS S3. ${e}`;\n      this.logger.error(errorMessage);\n      throw new Error(errorMessage);\n    }\n\n    // Last, try to remove the files that were *only* present previously\n    try {\n      const relativeFilesToUpload = absoluteFilesToUpload.map(\n        absoluteFilePath =>\n          getCloudPathForLocalPath(\n            entity,\n            path.relative(directory, absoluteFilePath),\n            useLegacyPathCasing,\n            bucketRootPath,\n          ),\n      );\n      const staleFiles = getStaleFiles(relativeFilesToUpload, existingFiles);\n\n      await bulkStorageOperation(\n        async relativeFilePath => {\n          return await this.storageClient\n            .deleteObject({\n              Bucket: this.bucketName,\n              Key: relativeFilePath,\n            })\n            .promise();\n        },\n        staleFiles,\n        { concurrencyLimit: 10 },\n      );\n\n      this.logger.info(\n        `Successfully deleted stale files for Entity ${entity.metadata.name}. Total number of files: ${staleFiles.length}`,\n      );\n    } catch (error) {\n      const errorMessage = `Unable to delete file(s) from AWS S3. ${error}`;\n      this.logger.error(errorMessage);\n    }\n    return { objects };\n  }\n\n  async fetchTechDocsMetadata(\n    entityName: CompoundEntityRef,\n  ): Promise<TechDocsMetadata> {\n    try {\n      return await new Promise<TechDocsMetadata>(async (resolve, reject) => {\n        const entityTriplet = `${entityName.namespace}/${entityName.kind}/${entityName.name}`;\n        const entityDir = this.legacyPathCasing\n          ? entityTriplet\n          : lowerCaseEntityTriplet(entityTriplet);\n\n        const entityRootDir = path.posix.join(this.bucketRootPath, entityDir);\n\n        const stream = this.storageClient\n          .getObject({\n            Bucket: this.bucketName,\n            Key: `${entityRootDir}/techdocs_metadata.json`,\n          })\n          .createReadStream();\n\n        try {\n          const techdocsMetadataJson = await streamToBuffer(stream);\n          if (!techdocsMetadataJson) {\n            throw new Error(\n              `Unable to parse the techdocs metadata file ${entityRootDir}/techdocs_metadata.json.`,\n            );\n          }\n\n          const techdocsMetadata = JSON5.parse(\n            techdocsMetadataJson.toString('utf-8'),\n          );\n\n          resolve(techdocsMetadata);\n        } catch (err) {\n          assertError(err);\n          this.logger.error(err.message);\n          reject(new Error(err.message));\n        }\n      });\n    } catch (e) {\n      throw new ForwardedError('TechDocs metadata fetch failed', e);\n    }\n  }\n\n  /**\n   * Express route middleware to serve static files on a route in techdocs-backend.\n   */\n  docsRouter(): express.Handler {\n    return async (req, res) => {\n      // Decode and trim the leading forward slash\n      const decodedUri = decodeURI(req.path.replace(/^\\//, ''));\n\n      // Root path is removed from the Uri so that legacy casing can be applied\n      // to the entity triplet without manipulating the root path\n      const decodedUriNoRoot = path.relative(this.bucketRootPath, decodedUri);\n\n      // filePath example - /default/component/documented-component/index.html\n      const filePathNoRoot = this.legacyPathCasing\n        ? decodedUriNoRoot\n        : lowerCaseEntityTripletInStoragePath(decodedUriNoRoot);\n\n      // Re-prepend the root path to the relative file path\n      const filePath = path.posix.join(this.bucketRootPath, filePathNoRoot);\n\n      // Files with different extensions (CSS, HTML) need to be served with different headers\n      const fileExtension = path.extname(filePath);\n      const responseHeaders = getHeadersForFileExtension(fileExtension);\n\n      const stream = this.storageClient\n        .getObject({ Bucket: this.bucketName, Key: filePath })\n        .createReadStream();\n      try {\n        // Inject response headers\n        for (const [headerKey, headerValue] of Object.entries(\n          responseHeaders,\n        )) {\n          res.setHeader(headerKey, headerValue);\n        }\n\n        res.send(await streamToBuffer(stream));\n      } catch (err) {\n        assertError(err);\n        this.logger.warn(\n          `TechDocs S3 router failed to serve static files from bucket ${this.bucketName} at key ${filePath}: ${err.message}`,\n        );\n        res.status(404).send('File Not Found');\n      }\n    };\n  }\n\n  /**\n   * A helper function which checks if index.html of an Entity's docs site is available. This\n   * can be used to verify if there are any pre-generated docs available to serve.\n   */\n  async hasDocsBeenGenerated(entity: Entity): Promise<boolean> {\n    try {\n      const entityTriplet = `${entity.metadata.namespace}/${entity.kind}/${entity.metadata.name}`;\n      const entityDir = this.legacyPathCasing\n        ? entityTriplet\n        : lowerCaseEntityTriplet(entityTriplet);\n\n      const entityRootDir = path.posix.join(this.bucketRootPath, entityDir);\n\n      await this.storageClient\n        .headObject({\n          Bucket: this.bucketName,\n          Key: `${entityRootDir}/index.html`,\n        })\n        .promise();\n      return Promise.resolve(true);\n    } catch (e) {\n      return Promise.resolve(false);\n    }\n  }\n\n  async migrateDocsCase({\n    removeOriginal = false,\n    concurrency = 25,\n  }): Promise<void> {\n    // Iterate through every file in the root of the publisher.\n    const allObjects = await this.getAllObjectsFromBucket();\n    const limiter = createLimiter(concurrency);\n    await Promise.all(\n      allObjects.map(f =>\n        limiter(async file => {\n          let newPath;\n          try {\n            newPath = lowerCaseEntityTripletInStoragePath(file);\n          } catch (e) {\n            assertError(e);\n            this.logger.warn(e.message);\n            return;\n          }\n\n          // If all parts are already lowercase, ignore.\n          if (file === newPath) {\n            return;\n          }\n\n          try {\n            this.logger.verbose(`Migrating ${file}`);\n            await this.storageClient\n              .copyObject({\n                Bucket: this.bucketName,\n                CopySource: [this.bucketName, file].join('/'),\n                Key: newPath,\n              })\n              .promise();\n\n            if (removeOriginal) {\n              await this.storageClient\n                .deleteObject({\n                  Bucket: this.bucketName,\n                  Key: file,\n                })\n                .promise();\n            }\n          } catch (e) {\n            assertError(e);\n            this.logger.warn(`Unable to migrate ${file}: ${e.message}`);\n          }\n        }, f),\n      ),\n    );\n  }\n\n  /**\n   * Returns a list of all object keys from the configured bucket.\n   */\n  protected async getAllObjectsFromBucket(\n    { prefix } = { prefix: '' },\n  ): Promise<string[]> {\n    const objects: string[] = [];\n    let nextContinuation: string | undefined;\n    let allObjects: ListObjectsV2Output;\n    // Iterate through every file in the root of the publisher.\n    do {\n      allObjects = await this.storageClient\n        .listObjectsV2({\n          Bucket: this.bucketName,\n          ContinuationToken: nextContinuation,\n          ...(prefix ? { Prefix: prefix } : {}),\n        })\n        .promise();\n      objects.push(\n        ...(allObjects.Contents || []).map(f => f.Key || '').filter(f => !!f),\n      );\n      nextContinuation = allObjects.NextContinuationToken;\n    } while (nextContinuation);\n\n    return objects;\n  }\n}\n","/*\n * Copyright 2020 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { DefaultAzureCredential } from '@azure/identity';\nimport {\n  BlobServiceClient,\n  ContainerClient,\n  StorageSharedKeyCredential,\n} from '@azure/storage-blob';\nimport { Entity, CompoundEntityRef } from '@backstage/catalog-model';\nimport { Config } from '@backstage/config';\nimport { assertError, ForwardedError } from '@backstage/errors';\nimport express from 'express';\nimport JSON5 from 'json5';\nimport limiterFactory from 'p-limit';\nimport { default as path, default as platformPath } from 'path';\nimport { Logger } from 'winston';\nimport {\n  bulkStorageOperation,\n  getCloudPathForLocalPath,\n  getFileTreeRecursively,\n  getHeadersForFileExtension,\n  lowerCaseEntityTriplet,\n  getStaleFiles,\n  lowerCaseEntityTripletInStoragePath,\n} from './helpers';\nimport {\n  PublisherBase,\n  PublishRequest,\n  PublishResponse,\n  ReadinessResponse,\n  TechDocsMetadata,\n} from './types';\n\n// The number of batches that may be ongoing at the same time.\nconst BATCH_CONCURRENCY = 3;\n\nexport class AzureBlobStoragePublish implements PublisherBase {\n  private readonly storageClient: BlobServiceClient;\n  private readonly containerName: string;\n  private readonly legacyPathCasing: boolean;\n  private readonly logger: Logger;\n\n  constructor(options: {\n    storageClient: BlobServiceClient;\n    containerName: string;\n    legacyPathCasing: boolean;\n    logger: Logger;\n  }) {\n    this.storageClient = options.storageClient;\n    this.containerName = options.containerName;\n    this.legacyPathCasing = options.legacyPathCasing;\n    this.logger = options.logger;\n  }\n\n  static fromConfig(config: Config, logger: Logger): PublisherBase {\n    let containerName = '';\n    try {\n      containerName = config.getString(\n        'techdocs.publisher.azureBlobStorage.containerName',\n      );\n    } catch (error) {\n      throw new Error(\n        \"Since techdocs.publisher.type is set to 'azureBlobStorage' in your app config, \" +\n          'techdocs.publisher.azureBlobStorage.containerName is required.',\n      );\n    }\n\n    let accountName = '';\n    try {\n      accountName = config.getString(\n        'techdocs.publisher.azureBlobStorage.credentials.accountName',\n      );\n    } catch (error) {\n      throw new Error(\n        \"Since techdocs.publisher.type is set to 'azureBlobStorage' in your app config, \" +\n          'techdocs.publisher.azureBlobStorage.credentials.accountName is required.',\n      );\n    }\n\n    // Credentials is an optional config. If missing, default Azure Blob Storage environment variables will be used.\n    // https://docs.microsoft.com/en-us/azure/storage/common/storage-auth-aad-app\n    const accountKey = config.getOptionalString(\n      'techdocs.publisher.azureBlobStorage.credentials.accountKey',\n    );\n\n    let credential;\n    if (accountKey) {\n      credential = new StorageSharedKeyCredential(accountName, accountKey);\n    } else {\n      credential = new DefaultAzureCredential();\n    }\n\n    const storageClient = new BlobServiceClient(\n      `https://${accountName}.blob.core.windows.net`,\n      credential,\n    );\n\n    const legacyPathCasing =\n      config.getOptionalBoolean(\n        'techdocs.legacyUseCaseSensitiveTripletPaths',\n      ) || false;\n\n    return new AzureBlobStoragePublish({\n      storageClient: storageClient,\n      containerName: containerName,\n      legacyPathCasing: legacyPathCasing,\n      logger: logger,\n    });\n  }\n\n  async getReadiness(): Promise<ReadinessResponse> {\n    try {\n      const response = await this.storageClient\n        .getContainerClient(this.containerName)\n        .getProperties();\n\n      if (response._response.status === 200) {\n        return {\n          isAvailable: true,\n        };\n      }\n\n      if (response._response.status >= 400) {\n        this.logger.error(\n          `Failed to retrieve metadata from ${response._response.request.url} with status code ${response._response.status}.`,\n        );\n      }\n    } catch (e) {\n      assertError(e);\n      this.logger.error(`from Azure Blob Storage client library: ${e.message}`);\n    }\n\n    this.logger.error(\n      `Could not retrieve metadata about the Azure Blob Storage container ${this.containerName}. ` +\n        'Make sure that the Azure project and container exist and the access key is setup correctly ' +\n        'techdocs.publisher.azureBlobStorage.credentials defined in app config has correct permissions. ' +\n        'Refer to https://backstage.io/docs/features/techdocs/using-cloud-storage',\n    );\n\n    return { isAvailable: false };\n  }\n\n  /**\n   * Upload all the files from the generated `directory` to the Azure Blob Storage container.\n   * Directory structure used in the container is - entityNamespace/entityKind/entityName/index.html\n   */\n  async publish({\n    entity,\n    directory,\n  }: PublishRequest): Promise<PublishResponse> {\n    const objects: string[] = [];\n    const useLegacyPathCasing = this.legacyPathCasing;\n\n    // First, try to retrieve a list of all individual files currently existing\n    const remoteFolder = getCloudPathForLocalPath(\n      entity,\n      undefined,\n      useLegacyPathCasing,\n    );\n    let existingFiles: string[] = [];\n    try {\n      existingFiles = await this.getAllBlobsFromContainer({\n        prefix: remoteFolder,\n        maxPageSize: BATCH_CONCURRENCY,\n      });\n    } catch (e) {\n      assertError(e);\n      this.logger.error(\n        `Unable to list files for Entity ${entity.metadata.name}: ${e.message}`,\n      );\n    }\n\n    // Then, merge new files into the same folder\n    let absoluteFilesToUpload;\n    let container: ContainerClient;\n    try {\n      // Remove the absolute path prefix of the source directory\n      // Path of all files to upload, relative to the root of the source directory\n      // e.g. ['index.html', 'sub-page/index.html', 'assets/images/favicon.png']\n      absoluteFilesToUpload = await getFileTreeRecursively(directory);\n\n      container = this.storageClient.getContainerClient(this.containerName);\n      const failedOperations: Error[] = [];\n      await bulkStorageOperation(\n        async absoluteFilePath => {\n          const relativeFilePath = path.normalize(\n            path.relative(directory, absoluteFilePath),\n          );\n          const remotePath = getCloudPathForLocalPath(\n            entity,\n            relativeFilePath,\n            useLegacyPathCasing,\n          );\n          objects.push(remotePath);\n          const response = await container\n            .getBlockBlobClient(remotePath)\n            .uploadFile(absoluteFilePath);\n\n          if (response._response.status >= 400) {\n            failedOperations.push(\n              new Error(\n                `Upload failed for ${absoluteFilePath} with status code ${response._response.status}`,\n              ),\n            );\n          }\n\n          return response;\n        },\n        absoluteFilesToUpload,\n        { concurrencyLimit: BATCH_CONCURRENCY },\n      );\n\n      if (failedOperations.length > 0) {\n        throw new Error(\n          failedOperations\n            .map(r => r.message)\n            .filter(Boolean)\n            .join(' '),\n        );\n      }\n\n      this.logger.info(\n        `Successfully uploaded all the generated files for Entity ${entity.metadata.name}. Total number of files: ${absoluteFilesToUpload.length}`,\n      );\n    } catch (e) {\n      const errorMessage = `Unable to upload file(s) to Azure. ${e}`;\n      this.logger.error(errorMessage);\n      throw new Error(errorMessage);\n    }\n\n    // Last, try to remove the files that were *only* present previously\n    try {\n      const relativeFilesToUpload = absoluteFilesToUpload.map(\n        absoluteFilePath =>\n          getCloudPathForLocalPath(\n            entity,\n            path.relative(directory, absoluteFilePath),\n            useLegacyPathCasing,\n          ),\n      );\n\n      const staleFiles = getStaleFiles(relativeFilesToUpload, existingFiles);\n\n      await bulkStorageOperation(\n        async relativeFilePath => {\n          return await container.deleteBlob(relativeFilePath);\n        },\n        staleFiles,\n        { concurrencyLimit: BATCH_CONCURRENCY },\n      );\n\n      this.logger.info(\n        `Successfully deleted stale files for Entity ${entity.metadata.name}. Total number of files: ${staleFiles.length}`,\n      );\n    } catch (error) {\n      const errorMessage = `Unable to delete file(s) from Azure. ${error}`;\n      this.logger.error(errorMessage);\n    }\n\n    return { objects };\n  }\n\n  private download(containerName: string, blobPath: string): Promise<Buffer> {\n    return new Promise((resolve, reject) => {\n      const fileStreamChunks: Array<any> = [];\n      this.storageClient\n        .getContainerClient(containerName)\n        .getBlockBlobClient(blobPath)\n        .download()\n        .then(res => {\n          const body = res.readableStreamBody;\n          if (!body) {\n            reject(new Error(`Unable to parse the response data`));\n            return;\n          }\n          body\n            .on('error', reject)\n            .on('data', chunk => {\n              fileStreamChunks.push(chunk);\n            })\n            .on('end', () => {\n              resolve(Buffer.concat(fileStreamChunks));\n            });\n        })\n        .catch(reject);\n    });\n  }\n\n  async fetchTechDocsMetadata(\n    entityName: CompoundEntityRef,\n  ): Promise<TechDocsMetadata> {\n    const entityTriplet = `${entityName.namespace}/${entityName.kind}/${entityName.name}`;\n    const entityRootDir = this.legacyPathCasing\n      ? entityTriplet\n      : lowerCaseEntityTriplet(entityTriplet);\n\n    try {\n      const techdocsMetadataJson = await this.download(\n        this.containerName,\n        `${entityRootDir}/techdocs_metadata.json`,\n      );\n      if (!techdocsMetadataJson) {\n        throw new Error(\n          `Unable to parse the techdocs metadata file ${entityRootDir}/techdocs_metadata.json.`,\n        );\n      }\n      const techdocsMetadata = JSON5.parse(\n        techdocsMetadataJson.toString('utf-8'),\n      );\n      return techdocsMetadata;\n    } catch (e) {\n      throw new ForwardedError('TechDocs metadata fetch failed', e);\n    }\n  }\n\n  /**\n   * Express route middleware to serve static files on a route in techdocs-backend.\n   */\n  docsRouter(): express.Handler {\n    return (req, res) => {\n      // Decode and trim the leading forward slash\n      const decodedUri = decodeURI(req.path.replace(/^\\//, ''));\n\n      // filePath example - /default/Component/documented-component/index.html\n      const filePath = this.legacyPathCasing\n        ? decodedUri\n        : lowerCaseEntityTripletInStoragePath(decodedUri);\n\n      // Files with different extensions (CSS, HTML) need to be served with different headers\n      const fileExtension = platformPath.extname(filePath);\n      const responseHeaders = getHeadersForFileExtension(fileExtension);\n\n      this.download(this.containerName, filePath)\n        .then(fileContent => {\n          // Inject response headers\n          for (const [headerKey, headerValue] of Object.entries(\n            responseHeaders,\n          )) {\n            res.setHeader(headerKey, headerValue);\n          }\n          res.send(fileContent);\n        })\n        .catch(e => {\n          this.logger.warn(\n            `TechDocs Azure router failed to serve content from container ${this.containerName} at path ${filePath}: ${e.message}`,\n          );\n          res.status(404).send('File Not Found');\n        });\n    };\n  }\n\n  /**\n   * A helper function which checks if index.html of an Entity's docs site is available. This\n   * can be used to verify if there are any pre-generated docs available to serve.\n   */\n  hasDocsBeenGenerated(entity: Entity): Promise<boolean> {\n    const entityTriplet = `${entity.metadata.namespace}/${entity.kind}/${entity.metadata.name}`;\n    const entityRootDir = this.legacyPathCasing\n      ? entityTriplet\n      : lowerCaseEntityTriplet(entityTriplet);\n\n    return this.storageClient\n      .getContainerClient(this.containerName)\n      .getBlockBlobClient(`${entityRootDir}/index.html`)\n      .exists();\n  }\n\n  protected async renameBlob(\n    originalName: string,\n    newName: string,\n    removeOriginal = false,\n  ): Promise<void> {\n    const container = this.storageClient.getContainerClient(this.containerName);\n    const blob = container.getBlobClient(newName);\n    const { url } = container.getBlobClient(originalName);\n    const response = await blob.beginCopyFromURL(url);\n    await response.pollUntilDone();\n    if (removeOriginal) {\n      await container.deleteBlob(originalName);\n    }\n  }\n\n  protected async renameBlobToLowerCase(\n    originalPath: string,\n    removeOriginal: boolean,\n  ) {\n    let newPath;\n    try {\n      newPath = lowerCaseEntityTripletInStoragePath(originalPath);\n    } catch (e) {\n      assertError(e);\n      this.logger.warn(e.message);\n      return;\n    }\n\n    if (originalPath === newPath) return;\n    try {\n      this.logger.verbose(`Migrating ${originalPath}`);\n      await this.renameBlob(originalPath, newPath, removeOriginal);\n    } catch (e) {\n      assertError(e);\n      this.logger.warn(`Unable to migrate ${originalPath}: ${e.message}`);\n    }\n  }\n\n  async migrateDocsCase({\n    removeOriginal = false,\n    concurrency = 25,\n  }): Promise<void> {\n    const promises = [];\n    const limiter = limiterFactory(concurrency);\n    const container = this.storageClient.getContainerClient(this.containerName);\n\n    for await (const blob of container.listBlobsFlat()) {\n      promises.push(\n        limiter(\n          this.renameBlobToLowerCase.bind(this),\n          blob.name,\n          removeOriginal,\n        ),\n      );\n    }\n\n    await Promise.all(promises);\n  }\n\n  protected async getAllBlobsFromContainer({\n    prefix,\n    maxPageSize,\n  }: {\n    prefix: string;\n    maxPageSize: number;\n  }): Promise<string[]> {\n    const blobs: string[] = [];\n    const container = this.storageClient.getContainerClient(this.containerName);\n\n    let iterator = container.listBlobsFlat({ prefix }).byPage({ maxPageSize });\n    let response = (await iterator.next()).value;\n\n    do {\n      for (const blob of response?.segment?.blobItems ?? []) {\n        blobs.push(blob.name);\n      }\n      iterator = container\n        .listBlobsFlat({ prefix })\n        .byPage({ continuationToken: response.continuationToken, maxPageSize });\n      response = (await iterator.next()).value;\n    } while (response && response.continuationToken);\n\n    return blobs;\n  }\n}\n","/*\n * Copyright 2021 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assertError } from '@backstage/errors';\nimport { File } from '@google-cloud/storage';\nimport { Writable } from 'stream';\nimport { Logger } from 'winston';\nimport { lowerCaseEntityTripletInStoragePath } from '../helpers';\n\n/**\n * Writable stream to handle object copy/move operations. This implementation\n * ensures we don't read in files from GCS faster than GCS can copy/move them.\n */\nexport class MigrateWriteStream extends Writable {\n  protected logger: Logger;\n  protected removeOriginal: boolean;\n  protected maxConcurrency: number;\n  protected inFlight = 0;\n\n  constructor(logger: Logger, removeOriginal: boolean, concurrency: number) {\n    super({ objectMode: true });\n    this.logger = logger;\n    this.removeOriginal = removeOriginal;\n    this.maxConcurrency = concurrency;\n  }\n\n  _write(file: File, _encoding: BufferEncoding, next: Function) {\n    let shouldCallNext = true;\n    let newFile;\n    try {\n      newFile = lowerCaseEntityTripletInStoragePath(file.name);\n    } catch (e) {\n      assertError(e);\n      this.logger.warn(e.message);\n      next();\n      return;\n    }\n\n    // If all parts are already lowercase, ignore.\n    if (newFile === file.name) {\n      next();\n      return;\n    }\n\n    // Allow up to n-many files to be migrated at a time.\n    this.inFlight++;\n    if (this.inFlight < this.maxConcurrency) {\n      next();\n      shouldCallNext = false;\n    }\n\n    // Otherwise, copy or move the file.\n    const migrate = this.removeOriginal\n      ? file.move.bind(file)\n      : file.copy.bind(file);\n    this.logger.verbose(`Migrating ${file.name}`);\n    migrate(newFile)\n      .catch(e =>\n        this.logger.warn(`Unable to migrate ${file.name}: ${e.message}`),\n      )\n      .finally(() => {\n        this.inFlight--;\n        if (shouldCallNext) {\n          next();\n        }\n      });\n  }\n}\n","/*\n * Copyright 2020 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { Entity, CompoundEntityRef } from '@backstage/catalog-model';\nimport { Config } from '@backstage/config';\nimport { assertError } from '@backstage/errors';\nimport { File, FileExistsResponse, Storage } from '@google-cloud/storage';\nimport express from 'express';\nimport JSON5 from 'json5';\nimport path from 'path';\nimport { Readable } from 'stream';\nimport { Logger } from 'winston';\nimport {\n  getFileTreeRecursively,\n  getHeadersForFileExtension,\n  lowerCaseEntityTriplet,\n  lowerCaseEntityTripletInStoragePath,\n  bulkStorageOperation,\n  getCloudPathForLocalPath,\n  getStaleFiles,\n  normalizeExternalStorageRootPath,\n} from './helpers';\nimport { MigrateWriteStream } from './migrations';\nimport {\n  PublisherBase,\n  PublishRequest,\n  PublishResponse,\n  ReadinessResponse,\n  TechDocsMetadata,\n} from './types';\n\nexport class GoogleGCSPublish implements PublisherBase {\n  private readonly storageClient: Storage;\n  private readonly bucketName: string;\n  private readonly legacyPathCasing: boolean;\n  private readonly logger: Logger;\n  private readonly bucketRootPath: string;\n\n  constructor(options: {\n    storageClient: Storage;\n    bucketName: string;\n    legacyPathCasing: boolean;\n    logger: Logger;\n    bucketRootPath: string;\n  }) {\n    this.storageClient = options.storageClient;\n    this.bucketName = options.bucketName;\n    this.legacyPathCasing = options.legacyPathCasing;\n    this.logger = options.logger;\n    this.bucketRootPath = options.bucketRootPath;\n  }\n\n  static fromConfig(config: Config, logger: Logger): PublisherBase {\n    let bucketName = '';\n    try {\n      bucketName = config.getString('techdocs.publisher.googleGcs.bucketName');\n    } catch (error) {\n      throw new Error(\n        \"Since techdocs.publisher.type is set to 'googleGcs' in your app config, \" +\n          'techdocs.publisher.googleGcs.bucketName is required.',\n      );\n    }\n\n    const bucketRootPath = normalizeExternalStorageRootPath(\n      config.getOptionalString('techdocs.publisher.googleGcs.bucketRootPath') ||\n        '',\n    );\n\n    // Credentials is an optional config. If missing, default GCS environment variables will be used.\n    // Read more here https://cloud.google.com/docs/authentication/production\n    const credentials = config.getOptionalString(\n      'techdocs.publisher.googleGcs.credentials',\n    );\n    let credentialsJson: any = {};\n    if (credentials) {\n      try {\n        credentialsJson = JSON.parse(credentials);\n      } catch (err) {\n        throw new Error(\n          'Error in parsing techdocs.publisher.googleGcs.credentials config to JSON.',\n        );\n      }\n    }\n\n    const storageClient = new Storage({\n      ...(credentials && {\n        projectId: credentialsJson.project_id,\n        credentials: credentialsJson,\n      }),\n    });\n\n    const legacyPathCasing =\n      config.getOptionalBoolean(\n        'techdocs.legacyUseCaseSensitiveTripletPaths',\n      ) || false;\n\n    return new GoogleGCSPublish({\n      storageClient,\n      bucketName,\n      legacyPathCasing,\n      logger,\n      bucketRootPath,\n    });\n  }\n\n  /**\n   * Check if the defined bucket exists. Being able to connect means the configuration is good\n   * and the storage client will work.\n   */\n  async getReadiness(): Promise<ReadinessResponse> {\n    try {\n      await this.storageClient.bucket(this.bucketName).getMetadata();\n      this.logger.info(\n        `Successfully connected to the GCS bucket ${this.bucketName}.`,\n      );\n\n      return {\n        isAvailable: true,\n      };\n    } catch (err) {\n      assertError(err);\n      this.logger.error(\n        `Could not retrieve metadata about the GCS bucket ${this.bucketName}. ` +\n          'Make sure the bucket exists. Also make sure that authentication is setup either by explicitly defining ' +\n          'techdocs.publisher.googleGcs.credentials in app config or by using environment variables. ' +\n          'Refer to https://backstage.io/docs/features/techdocs/using-cloud-storage',\n      );\n      this.logger.error(`from GCS client library: ${err.message}`);\n\n      return { isAvailable: false };\n    }\n  }\n\n  /**\n   * Upload all the files from the generated `directory` to the GCS bucket.\n   * Directory structure used in the bucket is - entityNamespace/entityKind/entityName/index.html\n   */\n  async publish({\n    entity,\n    directory,\n  }: PublishRequest): Promise<PublishResponse> {\n    const objects: string[] = [];\n    const useLegacyPathCasing = this.legacyPathCasing;\n    const bucket = this.storageClient.bucket(this.bucketName);\n    const bucketRootPath = this.bucketRootPath;\n\n    // First, try to retrieve a list of all individual files currently existing\n    let existingFiles: string[] = [];\n    try {\n      const remoteFolder = getCloudPathForLocalPath(\n        entity,\n        undefined,\n        useLegacyPathCasing,\n        bucketRootPath,\n      );\n      existingFiles = await this.getFilesForFolder(remoteFolder);\n    } catch (e) {\n      assertError(e);\n      this.logger.error(\n        `Unable to list files for Entity ${entity.metadata.name}: ${e.message}`,\n      );\n    }\n\n    // Then, merge new files into the same folder\n    let absoluteFilesToUpload;\n    try {\n      // Remove the absolute path prefix of the source directory\n      // Path of all files to upload, relative to the root of the source directory\n      // e.g. ['index.html', 'sub-page/index.html', 'assets/images/favicon.png']\n      absoluteFilesToUpload = await getFileTreeRecursively(directory);\n\n      await bulkStorageOperation(\n        async absoluteFilePath => {\n          const relativeFilePath = path.relative(directory, absoluteFilePath);\n          const destination = getCloudPathForLocalPath(\n            entity,\n            relativeFilePath,\n            useLegacyPathCasing,\n            bucketRootPath,\n          );\n          objects.push(destination);\n          return await bucket.upload(absoluteFilePath, { destination });\n        },\n        absoluteFilesToUpload,\n        { concurrencyLimit: 10 },\n      );\n\n      this.logger.info(\n        `Successfully uploaded all the generated files for Entity ${entity.metadata.name}. Total number of files: ${absoluteFilesToUpload.length}`,\n      );\n    } catch (e) {\n      const errorMessage = `Unable to upload file(s) to Google Cloud Storage. ${e}`;\n      this.logger.error(errorMessage);\n      throw new Error(errorMessage);\n    }\n\n    // Last, try to remove the files that were *only* present previously\n    try {\n      const relativeFilesToUpload = absoluteFilesToUpload.map(\n        absoluteFilePath =>\n          getCloudPathForLocalPath(\n            entity,\n            path.relative(directory, absoluteFilePath),\n            useLegacyPathCasing,\n            bucketRootPath,\n          ),\n      );\n      const staleFiles = getStaleFiles(relativeFilesToUpload, existingFiles);\n\n      await bulkStorageOperation(\n        async relativeFilePath => {\n          return await bucket.file(relativeFilePath).delete();\n        },\n        staleFiles,\n        { concurrencyLimit: 10 },\n      );\n\n      this.logger.info(\n        `Successfully deleted stale files for Entity ${entity.metadata.name}. Total number of files: ${staleFiles.length}`,\n      );\n    } catch (error) {\n      const errorMessage = `Unable to delete file(s) from Google Cloud Storage. ${error}`;\n      this.logger.error(errorMessage);\n    }\n\n    return { objects };\n  }\n\n  fetchTechDocsMetadata(\n    entityName: CompoundEntityRef,\n  ): Promise<TechDocsMetadata> {\n    return new Promise((resolve, reject) => {\n      const entityTriplet = `${entityName.namespace}/${entityName.kind}/${entityName.name}`;\n      const entityDir = this.legacyPathCasing\n        ? entityTriplet\n        : lowerCaseEntityTriplet(entityTriplet);\n\n      const entityRootDir = path.posix.join(this.bucketRootPath, entityDir);\n\n      const fileStreamChunks: Array<any> = [];\n      this.storageClient\n        .bucket(this.bucketName)\n        .file(`${entityRootDir}/techdocs_metadata.json`)\n        .createReadStream()\n        .on('error', err => {\n          this.logger.error(err.message);\n          reject(err);\n        })\n        .on('data', chunk => {\n          fileStreamChunks.push(chunk);\n        })\n        .on('end', () => {\n          const techdocsMetadataJson =\n            Buffer.concat(fileStreamChunks).toString('utf-8');\n          resolve(JSON5.parse(techdocsMetadataJson));\n        });\n    });\n  }\n\n  /**\n   * Express route middleware to serve static files on a route in techdocs-backend.\n   */\n  docsRouter(): express.Handler {\n    return (req, res) => {\n      // Decode and trim the leading forward slash\n      const decodedUri = decodeURI(req.path.replace(/^\\//, ''));\n\n      // Root path is removed from the Uri so that legacy casing can be applied\n      // to the entity triplet without manipulating the root path\n      const decodedUriNoRoot = path.relative(this.bucketRootPath, decodedUri);\n\n      const filePathNoRoot = this.legacyPathCasing\n        ? decodedUriNoRoot\n        : lowerCaseEntityTripletInStoragePath(decodedUriNoRoot);\n\n      // Re-prepend the root path to the relative file path\n      const filePath = path.posix.join(this.bucketRootPath, filePathNoRoot);\n\n      // Files with different extensions (CSS, HTML) need to be served with different headers\n      const fileExtension = path.extname(filePath);\n      const responseHeaders = getHeadersForFileExtension(fileExtension);\n\n      // Pipe file chunks directly from storage to client.\n      this.storageClient\n        .bucket(this.bucketName)\n        .file(filePath)\n        .createReadStream()\n        .on('pipe', () => {\n          res.writeHead(200, responseHeaders);\n        })\n        .on('error', err => {\n          this.logger.warn(\n            `TechDocs Google GCS router failed to serve content from bucket ${this.bucketName} at path ${filePath}: ${err.message}`,\n          );\n          // Send a 404 with a meaningful message if possible.\n          if (!res.headersSent) {\n            res.status(404).send('File Not Found');\n          } else {\n            res.destroy();\n          }\n        })\n        .pipe(res);\n    };\n  }\n\n  /**\n   * A helper function which checks if index.html of an Entity's docs site is available. This\n   * can be used to verify if there are any pre-generated docs available to serve.\n   */\n  async hasDocsBeenGenerated(entity: Entity): Promise<boolean> {\n    return new Promise(resolve => {\n      const entityTriplet = `${entity.metadata.namespace}/${entity.kind}/${entity.metadata.name}`;\n      const entityDir = this.legacyPathCasing\n        ? entityTriplet\n        : lowerCaseEntityTriplet(entityTriplet);\n\n      const entityRootDir = path.posix.join(this.bucketRootPath, entityDir);\n\n      this.storageClient\n        .bucket(this.bucketName)\n        .file(`${entityRootDir}/index.html`)\n        .exists()\n        .then((response: FileExistsResponse) => {\n          resolve(response[0]);\n        })\n        .catch(() => {\n          resolve(false);\n        });\n    });\n  }\n\n  migrateDocsCase({ removeOriginal = false, concurrency = 25 }): Promise<void> {\n    return new Promise((resolve, reject) => {\n      // Iterate through every file in the root of the publisher.\n      const allFileMetadata: Readable = this.storageClient\n        .bucket(this.bucketName)\n        .getFilesStream();\n      const migrateFiles = new MigrateWriteStream(\n        this.logger,\n        removeOriginal,\n        concurrency,\n      );\n      migrateFiles.on('finish', resolve).on('error', reject);\n      allFileMetadata.pipe(migrateFiles).on('error', error => {\n        migrateFiles.destroy();\n        reject(error);\n      });\n    });\n  }\n\n  private getFilesForFolder(folder: string): Promise<string[]> {\n    const fileMetadataStream: Readable = this.storageClient\n      .bucket(this.bucketName)\n      .getFilesStream({ prefix: folder });\n\n    return new Promise((resolve, reject) => {\n      const files: string[] = [];\n\n      fileMetadataStream.on('error', error => {\n        // push file to file array\n        reject(error);\n      });\n\n      fileMetadataStream.on('data', (file: File) => {\n        // push file to file array\n        files.push(file.name);\n      });\n\n      fileMetadataStream.on('end', () => {\n        // resolve promise\n        resolve(files);\n      });\n    });\n  }\n}\n","/*\n * Copyright 2020 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport {\n  PluginEndpointDiscovery,\n  resolvePackagePath,\n} from '@backstage/backend-common';\nimport { Entity, CompoundEntityRef } from '@backstage/catalog-model';\nimport { Config } from '@backstage/config';\nimport express from 'express';\nimport fs from 'fs-extra';\nimport os from 'os';\nimport createLimiter from 'p-limit';\nimport path from 'path';\nimport { Logger } from 'winston';\nimport {\n  PublisherBase,\n  PublishRequest,\n  PublishResponse,\n  ReadinessResponse,\n  TechDocsMetadata,\n} from './types';\nimport {\n  getFileTreeRecursively,\n  getHeadersForFileExtension,\n  lowerCaseEntityTripletInStoragePath,\n} from './helpers';\nimport { assertError } from '@backstage/errors';\n\n// TODO: Use a more persistent storage than node_modules or /tmp directory.\n// Make it configurable with techdocs.publisher.local.publishDirectory\nlet staticDocsDir = '';\ntry {\n  staticDocsDir = resolvePackagePath(\n    '@backstage/plugin-techdocs-backend',\n    'static/docs',\n  );\n} catch (err) {\n  // This will most probably never be used.\n  // The try/catch is introduced so that techdocs-cli can import @backstage/plugin-techdocs-node\n  // on CI/CD without installing techdocs backend plugin.\n  staticDocsDir = os.tmpdir();\n}\n\n/**\n * Local publisher which uses the local filesystem to store the generated static files. It uses a directory\n * called \"static\" at the root of techdocs-backend plugin.\n */\nexport class LocalPublish implements PublisherBase {\n  private readonly legacyPathCasing: boolean;\n  private readonly logger: Logger;\n  private readonly discovery: PluginEndpointDiscovery;\n\n  // TODO: Move the logic of setting staticDocsDir based on config over to\n  // fromConfig, and set the value as a class parameter.\n  constructor(options: {\n    logger: Logger;\n    discovery: PluginEndpointDiscovery;\n    legacyPathCasing: boolean;\n  }) {\n    this.logger = options.logger;\n    this.discovery = options.discovery;\n    this.legacyPathCasing = options.legacyPathCasing;\n  }\n\n  static fromConfig(\n    config: Config,\n    logger: Logger,\n    discovery: PluginEndpointDiscovery,\n  ): PublisherBase {\n    const legacyPathCasing =\n      config.getOptionalBoolean(\n        'techdocs.legacyUseCaseSensitiveTripletPaths',\n      ) || false;\n\n    return new LocalPublish({\n      logger,\n      discovery,\n      legacyPathCasing,\n    });\n  }\n\n  async getReadiness(): Promise<ReadinessResponse> {\n    return {\n      isAvailable: true,\n    };\n  }\n\n  async publish({\n    entity,\n    directory,\n  }: PublishRequest): Promise<PublishResponse> {\n    const entityNamespace = entity.metadata.namespace ?? 'default';\n\n    const publishDir = this.staticEntityPathJoin(\n      entityNamespace,\n      entity.kind,\n      entity.metadata.name,\n    );\n\n    if (!fs.existsSync(publishDir)) {\n      this.logger.info(`Could not find ${publishDir}, creating the directory.`);\n      fs.mkdirSync(publishDir, { recursive: true });\n    }\n\n    try {\n      await fs.copy(directory, publishDir);\n      this.logger.info(`Published site stored at ${publishDir}`);\n    } catch (error) {\n      this.logger.debug(\n        `Failed to copy docs from ${directory} to ${publishDir}`,\n      );\n      throw error;\n    }\n\n    // Generate publish response.\n    const techdocsApiUrl = await this.discovery.getBaseUrl('techdocs');\n    const publishedFilePaths = (await getFileTreeRecursively(publishDir)).map(\n      abs => {\n        return abs.split(`${staticDocsDir}/`)[1];\n      },\n    );\n\n    return {\n      remoteUrl: `${techdocsApiUrl}/static/docs/${encodeURIComponent(\n        entity.metadata.name,\n      )}`,\n      objects: publishedFilePaths,\n    };\n  }\n\n  async fetchTechDocsMetadata(\n    entityName: CompoundEntityRef,\n  ): Promise<TechDocsMetadata> {\n    const metadataPath = this.staticEntityPathJoin(\n      entityName.namespace,\n      entityName.kind,\n      entityName.name,\n      'techdocs_metadata.json',\n    );\n\n    try {\n      return await fs.readJson(metadataPath);\n    } catch (err) {\n      assertError(err);\n      this.logger.error(\n        `Unable to read techdocs_metadata.json at ${metadataPath}. Error: ${err}`,\n      );\n      throw new Error(err.message);\n    }\n  }\n\n  docsRouter(): express.Handler {\n    const router = express.Router();\n\n    // Redirect middleware ensuring that requests to case-sensitive entity\n    // triplet paths are always sent to lower-case versions.\n    router.use((req, res, next) => {\n      // If legacy path casing is on, let the request immediately continue.\n      if (this.legacyPathCasing) {\n        return next();\n      }\n\n      // Generate a lower-case entity triplet path.\n      const [_, namespace, kind, name, ...rest] = req.path.split('/');\n\n      // Ignore non-triplet objects.\n      if (!namespace || !kind || !name) {\n        return next();\n      }\n\n      const newPath = [\n        _,\n        namespace.toLowerCase(),\n        kind.toLowerCase(),\n        name.toLowerCase(),\n        ...rest,\n      ].join('/');\n\n      // If there was no change, then let express.static() handle the request.\n      if (newPath === req.path) {\n        return next();\n      }\n\n      // Otherwise, redirect to the new path.\n      return res.redirect(req.baseUrl + newPath, 301);\n    });\n\n    router.use(\n      express.static(staticDocsDir, {\n        // Handle content-type header the same as all other publishers.\n        setHeaders: (res, filePath) => {\n          const fileExtension = path.extname(filePath);\n          const headers = getHeadersForFileExtension(fileExtension);\n          for (const [header, value] of Object.entries(headers)) {\n            res.setHeader(header, value);\n          }\n        },\n      }),\n    );\n\n    return router;\n  }\n\n  async hasDocsBeenGenerated(entity: Entity): Promise<boolean> {\n    const namespace = entity.metadata.namespace ?? 'default';\n\n    const indexHtmlPath = this.staticEntityPathJoin(\n      namespace,\n      entity.kind,\n      entity.metadata.name,\n      'index.html',\n    );\n\n    // Check if the file exists\n    try {\n      await fs.access(indexHtmlPath, fs.constants.F_OK);\n      return true;\n    } catch (err) {\n      return false;\n    }\n  }\n\n  /**\n   * This code will never run in practice. It is merely here to illustrate how\n   * to implement this method for other storage providers.\n   */\n  async migrateDocsCase({\n    removeOriginal = false,\n    concurrency = 25,\n  }): Promise<void> {\n    // Iterate through every file in the root of the publisher.\n    const files = await getFileTreeRecursively(staticDocsDir);\n    const limit = createLimiter(concurrency);\n\n    await Promise.all(\n      files.map(f =>\n        limit(async file => {\n          const relativeFile = file.replace(`${staticDocsDir}${path.sep}`, '');\n          const newFile = lowerCaseEntityTripletInStoragePath(relativeFile);\n\n          // If all parts are already lowercase, ignore.\n          if (relativeFile === newFile) {\n            return;\n          }\n\n          // Otherwise, copy or move the file.\n          await new Promise<void>(resolve => {\n            const migrate = removeOriginal ? fs.move : fs.copyFile;\n            this.logger.verbose(`Migrating ${relativeFile}`);\n            migrate(file, newFile, err => {\n              if (err) {\n                this.logger.warn(\n                  `Unable to migrate ${relativeFile}: ${err.message}`,\n                );\n              }\n              resolve();\n            });\n          });\n        }, f),\n      ),\n    );\n  }\n\n  /**\n   * Utility wrapper around path.join(), used to control legacy case logic.\n   */\n  protected staticEntityPathJoin(...allParts: string[]): string {\n    if (this.legacyPathCasing) {\n      const [namespace, kind, name, ...parts] = allParts;\n      return path.join(staticDocsDir, namespace, kind, name, ...parts);\n    }\n    const [namespace, kind, name, ...parts] = allParts;\n    return path.join(\n      staticDocsDir,\n      namespace.toLowerCase(),\n      kind.toLowerCase(),\n      name.toLowerCase(),\n      ...parts,\n    );\n  }\n}\n","/*\n * Copyright 2020 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { Entity, CompoundEntityRef } from '@backstage/catalog-model';\nimport { Config } from '@backstage/config';\nimport express from 'express';\nimport fs from 'fs-extra';\nimport JSON5 from 'json5';\nimport createLimiter from 'p-limit';\nimport path from 'path';\nimport { SwiftClient } from '@trendyol-js/openstack-swift-sdk';\nimport { NotFound } from '@trendyol-js/openstack-swift-sdk/lib/types';\nimport { Stream, Readable } from 'stream';\nimport { Logger } from 'winston';\nimport {\n  getFileTreeRecursively,\n  getHeadersForFileExtension,\n  lowerCaseEntityTripletInStoragePath,\n} from './helpers';\nimport {\n  PublisherBase,\n  PublishRequest,\n  PublishResponse,\n  ReadinessResponse,\n  TechDocsMetadata,\n} from './types';\nimport { assertError, ForwardedError } from '@backstage/errors';\n\nconst streamToBuffer = (stream: Stream | Readable): Promise<Buffer> => {\n  return new Promise((resolve, reject) => {\n    try {\n      const chunks: any[] = [];\n      stream.on('data', chunk => chunks.push(chunk));\n      stream.on('error', reject);\n      stream.on('end', () => resolve(Buffer.concat(chunks)));\n    } catch (e) {\n      throw new ForwardedError('Unable to parse the response data', e);\n    }\n  });\n};\n\nconst bufferToStream = (buffer: Buffer): Readable => {\n  const stream = new Readable();\n  stream.push(buffer);\n  stream.push(null);\n  return stream;\n};\n\nexport class OpenStackSwiftPublish implements PublisherBase {\n  private readonly storageClient: SwiftClient;\n  private readonly containerName: string;\n  private readonly logger: Logger;\n\n  constructor(options: {\n    storageClient: SwiftClient;\n    containerName: string;\n    logger: Logger;\n  }) {\n    this.storageClient = options.storageClient;\n    this.containerName = options.containerName;\n    this.logger = options.logger;\n  }\n\n  static fromConfig(config: Config, logger: Logger): PublisherBase {\n    let containerName = '';\n    try {\n      containerName = config.getString(\n        'techdocs.publisher.openStackSwift.containerName',\n      );\n    } catch (error) {\n      throw new Error(\n        \"Since techdocs.publisher.type is set to 'openStackSwift' in your app config, \" +\n          'techdocs.publisher.openStackSwift.containerName is required.',\n      );\n    }\n\n    const openStackSwiftConfig = config.getConfig(\n      'techdocs.publisher.openStackSwift',\n    );\n\n    const storageClient = new SwiftClient({\n      authEndpoint: openStackSwiftConfig.getString('authUrl'),\n      swiftEndpoint: openStackSwiftConfig.getString('swiftUrl'),\n      credentialId: openStackSwiftConfig.getString('credentials.id'),\n      secret: openStackSwiftConfig.getString('credentials.secret'),\n    });\n\n    return new OpenStackSwiftPublish({ storageClient, containerName, logger });\n  }\n\n  /*\n   * Check if the defined container exists. Being able to connect means the configuration is good\n   * and the storage client will work.\n   */\n  async getReadiness(): Promise<ReadinessResponse> {\n    try {\n      const container = await this.storageClient.getContainerMetadata(\n        this.containerName,\n      );\n\n      if (!(container instanceof NotFound)) {\n        this.logger.info(\n          `Successfully connected to the OpenStack Swift container ${this.containerName}.`,\n        );\n        return {\n          isAvailable: true,\n        };\n      }\n      this.logger.error(\n        `Could not retrieve metadata about the OpenStack Swift container ${this.containerName}. ` +\n          'Make sure the container exists. Also make sure that authentication is setup either by ' +\n          'explicitly defining credentials and region in techdocs.publisher.openStackSwift in app config or ' +\n          'by using environment variables. Refer to https://backstage.io/docs/features/techdocs/using-cloud-storage',\n      );\n      return {\n        isAvailable: false,\n      };\n    } catch (err) {\n      assertError(err);\n      this.logger.error(`from OpenStack client library: ${err.message}`);\n      return {\n        isAvailable: false,\n      };\n    }\n  }\n\n  /**\n   * Upload all the files from the generated `directory` to the OpenStack Swift container.\n   * Directory structure used in the bucket is - entityNamespace/entityKind/entityName/index.html\n   */\n  async publish({\n    entity,\n    directory,\n  }: PublishRequest): Promise<PublishResponse> {\n    try {\n      const objects: string[] = [];\n\n      // Note: OpenStack Swift manages creation of parent directories if they do not exist.\n      // So collecting path of only the files is good enough.\n      const allFilesToUpload = await getFileTreeRecursively(directory);\n      const limiter = createLimiter(10);\n      const uploadPromises: Array<Promise<unknown>> = [];\n      for (const filePath of allFilesToUpload) {\n        // Remove the absolute path prefix of the source directory\n        // Path of all files to upload, relative to the root of the source directory\n        // e.g. ['index.html', 'sub-page/index.html', 'assets/images/favicon.png']\n        const relativeFilePath = path.relative(directory, filePath);\n        // Convert destination file path to a POSIX path for uploading.\n        // Swift expects / as path separator and relativeFilePath will contain \\\\ on Windows.\n        // https://docs.openstack.org/python-openstackclient/pike/cli/man/openstack.html\n        const relativeFilePathPosix = relativeFilePath\n          .split(path.sep)\n          .join(path.posix.sep);\n\n        // The / delimiter is intentional since it represents the cloud storage and not the local file system.\n        const entityRootDir = `${entity.metadata.namespace}/${entity.kind}/${entity.metadata.name}`;\n        const destination = `${entityRootDir}/${relativeFilePathPosix}`; // Swift container file relative path\n        objects.push(destination);\n\n        // Rate limit the concurrent execution of file uploads to batches of 10 (per publish)\n        const uploadFile = limiter(async () => {\n          const fileBuffer = await fs.readFile(filePath);\n          const stream = bufferToStream(fileBuffer);\n          return this.storageClient.upload(\n            this.containerName,\n            destination,\n            stream,\n          );\n        });\n        uploadPromises.push(uploadFile);\n      }\n      await Promise.all(uploadPromises);\n      this.logger.info(\n        `Successfully uploaded all the generated files for Entity ${entity.metadata.name}. Total number of files: ${allFilesToUpload.length}`,\n      );\n      return { objects };\n    } catch (e) {\n      const errorMessage = `Unable to upload file(s) to OpenStack Swift. ${e}`;\n      this.logger.error(errorMessage);\n      throw new Error(errorMessage);\n    }\n  }\n\n  async fetchTechDocsMetadata(\n    entityName: CompoundEntityRef,\n  ): Promise<TechDocsMetadata> {\n    return await new Promise<TechDocsMetadata>(async (resolve, reject) => {\n      const entityRootDir = `${entityName.namespace}/${entityName.kind}/${entityName.name}`;\n\n      const downloadResponse = await this.storageClient.download(\n        this.containerName,\n        `${entityRootDir}/techdocs_metadata.json`,\n      );\n\n      if (!(downloadResponse instanceof NotFound)) {\n        const stream = downloadResponse.data;\n        try {\n          const techdocsMetadataJson = await streamToBuffer(stream);\n          if (!techdocsMetadataJson) {\n            throw new Error(\n              `Unable to parse the techdocs metadata file ${entityRootDir}/techdocs_metadata.json.`,\n            );\n          }\n\n          const techdocsMetadata = JSON5.parse(\n            techdocsMetadataJson.toString('utf-8'),\n          );\n\n          resolve(techdocsMetadata);\n        } catch (err) {\n          assertError(err);\n          this.logger.error(err.message);\n          reject(new Error(err.message));\n        }\n      } else {\n        reject({\n          message: `TechDocs metadata fetch failed, The file /rootDir/${entityRootDir}/techdocs_metadata.json does not exist !`,\n        });\n      }\n    });\n  }\n\n  /**\n   * Express route middleware to serve static files on a route in techdocs-backend.\n   */\n  docsRouter(): express.Handler {\n    return async (req, res) => {\n      // Decode and trim the leading forward slash\n      // filePath example - /default/Component/documented-component/index.html\n      const filePath = decodeURI(req.path.replace(/^\\//, ''));\n\n      // Files with different extensions (CSS, HTML) need to be served with different headers\n      const fileExtension = path.extname(filePath);\n      const responseHeaders = getHeadersForFileExtension(fileExtension);\n\n      const downloadResponse = await this.storageClient.download(\n        this.containerName,\n        filePath,\n      );\n\n      if (!(downloadResponse instanceof NotFound)) {\n        const stream = downloadResponse.data;\n\n        try {\n          // Inject response headers\n          for (const [headerKey, headerValue] of Object.entries(\n            responseHeaders,\n          )) {\n            res.setHeader(headerKey, headerValue);\n          }\n\n          res.send(await streamToBuffer(stream));\n        } catch (err) {\n          assertError(err);\n          this.logger.warn(\n            `TechDocs OpenStack swift router failed to serve content from container ${this.containerName} at path ${filePath}: ${err.message}`,\n          );\n          res.status(404).send('File Not Found');\n        }\n      } else {\n        this.logger.warn(\n          `TechDocs OpenStack swift router failed to serve content from container ${this.containerName} at path ${filePath}: Not found`,\n        );\n        res.status(404).send('File Not Found');\n      }\n    };\n  }\n\n  /**\n   * A helper function which checks if index.html of an Entity's docs site is available. This\n   * can be used to verify if there are any pre-generated docs available to serve.\n   */\n  async hasDocsBeenGenerated(entity: Entity): Promise<boolean> {\n    const entityRootDir = `${entity.metadata.namespace}/${entity.kind}/${entity.metadata.name}`;\n    try {\n      const fileResponse = await this.storageClient.getMetadata(\n        this.containerName,\n        `${entityRootDir}/index.html`,\n      );\n\n      if (!(fileResponse instanceof NotFound)) {\n        return true;\n      }\n      return false;\n    } catch (err) {\n      assertError(err);\n      this.logger.warn(err.message);\n      return false;\n    }\n  }\n\n  async migrateDocsCase({\n    removeOriginal = false,\n    concurrency = 25,\n  }): Promise<void> {\n    // Iterate through every file in the root of the publisher.\n    const allObjects = await this.getAllObjectsFromContainer();\n    const limiter = createLimiter(concurrency);\n    await Promise.all(\n      allObjects.map(f =>\n        limiter(async file => {\n          let newPath;\n          try {\n            newPath = lowerCaseEntityTripletInStoragePath(file);\n          } catch (e) {\n            assertError(e);\n            this.logger.warn(e.message);\n            return;\n          }\n\n          // If all parts are already lowercase, ignore.\n          if (file === newPath) {\n            return;\n          }\n\n          try {\n            this.logger.verbose(`Migrating ${file} to ${newPath}`);\n            await this.storageClient.copy(\n              this.containerName,\n              file,\n              this.containerName,\n              newPath,\n            );\n            if (removeOriginal) {\n              await this.storageClient.delete(this.containerName, file);\n            }\n          } catch (e) {\n            assertError(e);\n            this.logger.warn(`Unable to migrate ${file}: ${e.message}`);\n          }\n        }, f),\n      ),\n    );\n  }\n\n  /**\n   * Returns a list of all object keys from the configured container.\n   */\n  protected async getAllObjectsFromContainer(\n    { prefix } = { prefix: '' },\n  ): Promise<string[]> {\n    let objects: string[] = [];\n    const OSS_MAX_LIMIT = Math.pow(2, 31) - 1;\n\n    const allObjects = await this.storageClient.list(\n      this.containerName,\n      prefix,\n      OSS_MAX_LIMIT,\n    );\n    objects = allObjects.map((object: any) => object.name);\n\n    return objects;\n  }\n}\n","/*\n * Copyright 2020 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Config } from '@backstage/config';\nimport { AwsS3Publish } from './awsS3';\nimport { AzureBlobStoragePublish } from './azureBlobStorage';\nimport { GoogleGCSPublish } from './googleStorage';\nimport { LocalPublish } from './local';\nimport { OpenStackSwiftPublish } from './openStackSwift';\nimport { PublisherFactory, PublisherBase, PublisherType } from './types';\n\n/**\n * Factory class to create a TechDocs publisher based on defined publisher type in app config.\n * Uses `techdocs.publisher.type`.\n * @public\n */\nexport class Publisher {\n  /**\n   * Returns a instance of TechDocs publisher\n   * @param config - A Backstage configuration\n   * @param options - Options for configuring the publisher factory\n   */\n  static async fromConfig(\n    config: Config,\n    { logger, discovery }: PublisherFactory,\n  ): Promise<PublisherBase> {\n    const publisherType = (config.getOptionalString(\n      'techdocs.publisher.type',\n    ) ?? 'local') as PublisherType;\n\n    switch (publisherType) {\n      case 'googleGcs':\n        logger.info('Creating Google Storage Bucket publisher for TechDocs');\n        return GoogleGCSPublish.fromConfig(config, logger);\n      case 'awsS3':\n        logger.info('Creating AWS S3 Bucket publisher for TechDocs');\n        return AwsS3Publish.fromConfig(config, logger);\n      case 'azureBlobStorage':\n        logger.info(\n          'Creating Azure Blob Storage Container publisher for TechDocs',\n        );\n        return AzureBlobStoragePublish.fromConfig(config, logger);\n      case 'openStackSwift':\n        logger.info(\n          'Creating OpenStack Swift Container publisher for TechDocs',\n        );\n        return OpenStackSwiftPublish.fromConfig(config, logger);\n      case 'local':\n        logger.info('Creating Local publisher for TechDocs');\n        return LocalPublish.fromConfig(config, logger, discovery);\n      default:\n        logger.info('Creating Local publisher for TechDocs');\n        return LocalPublish.fromConfig(config, logger, discovery);\n    }\n  }\n}\n"],"names":["mime","recursiveReadDir","path","DEFAULT_NAMESPACE","createLimiter","PassThrough","spawn","gitUrlParse","DEFAULT_SCHEMA","Type","fs","ForwardedError","yaml","isChildPath","resolvePath","assertError","ScmIntegrations","InputError","parseLocationRef","getEntitySourceLocation","resolveSafeChildPath","streamToBuffer","aws","Credentials","JSON5","StorageSharedKeyCredential","DefaultAzureCredential","BlobServiceClient","platformPath","limiterFactory","Writable","Storage","resolvePackagePath","os","express","stream","Readable","SwiftClient","NotFound"],"mappings":"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"}