{"version":3,"file":"index.cjs.js","sources":["../src/service/KafkaApi.ts","../src/config/ClusterReader.ts","../src/service/router.ts"],"sourcesContent":["/*\n * Copyright 2020 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Kafka, SeekEntry } from 'kafkajs';\nimport { Logger } from 'winston';\nimport { SaslConfig, SslConfig } from '../types/types';\n\nexport type PartitionOffset = {\n  id: number;\n  offset: string;\n};\n\nexport type TopicOffset = {\n  topic: string;\n  partitions: PartitionOffset[];\n};\n\nexport type Options = {\n  clientId: string;\n  brokers: string[];\n  ssl?: SslConfig;\n  sasl?: SaslConfig;\n  logger: Logger;\n};\n\nexport interface KafkaApi {\n  fetchTopicOffsets(topic: string): Promise<Array<PartitionOffset>>;\n  fetchGroupOffsets(groupId: string): Promise<Array<TopicOffset>>;\n}\n\nexport class KafkaJsApiImpl implements KafkaApi {\n  private readonly kafka: Kafka;\n  private readonly logger: Logger;\n\n  constructor(options: Options) {\n    options.logger.debug(\n      `creating kafka client with clientId=${options.clientId} and brokers=${options.brokers}`,\n    );\n\n    this.kafka = new Kafka(options);\n    this.logger = options.logger;\n  }\n\n  async fetchTopicOffsets(topic: string): Promise<Array<PartitionOffset>> {\n    this.logger.debug(`fetching topic offsets for ${topic}`);\n\n    const admin = this.kafka.admin();\n    await admin.connect();\n\n    try {\n      return KafkaJsApiImpl.toPartitionOffsets(\n        await admin.fetchTopicOffsets(topic),\n      );\n    } finally {\n      await admin.disconnect();\n    }\n  }\n\n  async fetchGroupOffsets(groupId: string): Promise<Array<TopicOffset>> {\n    this.logger.debug(`fetching consumer group offsets for ${groupId}`);\n\n    const admin = this.kafka.admin();\n    await admin.connect();\n\n    try {\n      const groupOffsets = await admin.fetchOffsets({ groupId });\n\n      return groupOffsets.map(topicOffset => ({\n        topic: topicOffset.topic,\n        partitions: KafkaJsApiImpl.toPartitionOffsets(topicOffset.partitions),\n      }));\n    } finally {\n      await admin.disconnect();\n    }\n  }\n\n  private static toPartitionOffsets(\n    result: Array<SeekEntry>,\n  ): Array<PartitionOffset> {\n    return result.map(seekEntry => ({\n      id: seekEntry.partition,\n      offset: seekEntry.offset,\n    }));\n  }\n}\n","/*\n * Copyright 2020 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Config } from '@backstage/config';\nimport { ClusterDetails, SslConfig, SaslConfig } from '../types/types';\n\nexport function getClusterDetails(config: Config[]): ClusterDetails[] {\n  return config.map(clusterConfig => {\n    const clusterDetails = {\n      name: clusterConfig.getString('name'),\n      brokers: clusterConfig.getStringArray('brokers'),\n    };\n    const ssl = clusterConfig.getOptional('ssl') as SslConfig;\n    const sasl = clusterConfig.getOptional('sasl') as SaslConfig;\n\n    return {\n      ...clusterDetails,\n      ...(ssl ? { ssl } : {}),\n      ...(sasl ? { sasl } : {}),\n    };\n  });\n}\n","/*\n * Copyright 2020 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport express from 'express';\nimport Router from 'express-promise-router';\nimport { Logger } from 'winston';\nimport { Config } from '@backstage/config';\nimport { NotFoundError } from '@backstage/errors';\nimport { KafkaApi, KafkaJsApiImpl } from './KafkaApi';\nimport _ from 'lodash';\nimport { getClusterDetails } from '../config/ClusterReader';\n\nexport interface RouterOptions {\n  logger: Logger;\n  config: Config;\n}\n\nexport interface ClusterApi {\n  name: string;\n  api: KafkaApi;\n}\n\nexport const makeRouter = (\n  logger: Logger,\n  kafkaApis: ClusterApi[],\n): express.Router => {\n  const router = Router();\n  router.use(express.json());\n\n  const kafkaApiByClusterName = _.keyBy(kafkaApis, item => item.name);\n\n  router.get('/consumers/:clusterId/:consumerId/offsets', async (req, res) => {\n    const clusterId = req.params.clusterId;\n    const consumerId = req.params.consumerId;\n\n    const kafkaApi = kafkaApiByClusterName[clusterId];\n    if (!kafkaApi) {\n      const candidates = Object.keys(kafkaApiByClusterName)\n        .map(n => `\"${n}\"`)\n        .join(', ');\n      throw new NotFoundError(\n        `Found no configured cluster \"${clusterId}\", candidates are ${candidates}`,\n      );\n    }\n\n    logger.info(\n      `Fetch consumer group ${consumerId} offsets from cluster ${clusterId}`,\n    );\n\n    const groupOffsets = await kafkaApi.api.fetchGroupOffsets(consumerId);\n\n    const groupWithTopicOffsets = await Promise.all(\n      groupOffsets.map(async ({ topic, partitions }) => {\n        const topicOffsets = _.keyBy(\n          await kafkaApi.api.fetchTopicOffsets(topic),\n          partition => partition.id,\n        );\n\n        return partitions.map(partition => ({\n          topic: topic,\n          partitionId: partition.id,\n          groupOffset: partition.offset,\n          topicOffset: topicOffsets[partition.id].offset,\n        }));\n      }),\n    );\n\n    res.json({ consumerId, offsets: groupWithTopicOffsets.flat() });\n  });\n\n  return router;\n};\n\nexport async function createRouter(\n  options: RouterOptions,\n): Promise<express.Router> {\n  const logger = options.logger;\n\n  logger.info('Initializing Kafka backend');\n\n  const clientId = options.config.getString('kafka.clientId');\n\n  const clusters = getClusterDetails(\n    options.config.getConfigArray('kafka.clusters'),\n  );\n\n  const kafkaApis = clusters.map(cluster => ({\n    name: cluster.name,\n    api: new KafkaJsApiImpl({ clientId, logger, ...cluster }),\n  }));\n\n  return makeRouter(logger, kafkaApis);\n}\n"],"names":["Kafka","Router","express","_","NotFoundError"],"mappings":"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"}