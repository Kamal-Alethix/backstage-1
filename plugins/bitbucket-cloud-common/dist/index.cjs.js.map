{"version":3,"file":"index.cjs.js","sources":["../src/pagination.ts","../src/BitbucketCloudClient.ts","../src/models/index.ts"],"sourcesContent":["/*\n * Copyright 2022 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Models } from './models';\n\n/** @public */\nexport type PaginationOptions = {\n  page?: number;\n  pagelen?: number;\n};\n\n/** @public */\nexport class WithPagination<\n  TPage extends Models.Paginated<TResultItem>,\n  TResultItem,\n> {\n  constructor(\n    private readonly createUrl: (options: PaginationOptions) => URL,\n    private readonly fetch: (url: URL) => Promise<TPage>,\n  ) {}\n\n  getPage(options?: PaginationOptions): Promise<TPage> {\n    const opts = { page: 1, pagelen: 100, ...options };\n    const url = this.createUrl(opts);\n    return this.fetch(url);\n  }\n\n  async *iteratePages(\n    options?: PaginationOptions,\n  ): AsyncGenerator<TPage, void> {\n    const opts = { page: 1, pagelen: 100, ...options };\n    let url: URL | undefined = this.createUrl(opts);\n    let res;\n    do {\n      res = await this.fetch(url);\n      url = res.next ? new URL(res.next) : undefined;\n      yield res;\n    } while (url);\n  }\n\n  async *iterateResults(options?: PaginationOptions) {\n    const opts = { page: 1, pagelen: 100, ...options };\n    let url: URL | undefined = this.createUrl(opts);\n    let res;\n    do {\n      res = await this.fetch(url);\n      url = res.next ? new URL(res.next) : undefined;\n      for (const item of res.values ?? []) {\n        yield item;\n      }\n    } while (url);\n  }\n}\n","/*\n * Copyright 2022 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { BitbucketCloudIntegrationConfig } from '@backstage/integration';\nimport fetch, { Request } from 'cross-fetch';\nimport { Models } from './models';\nimport { WithPagination } from './pagination';\nimport {\n  FilterAndSortOptions,\n  PartialResponseOptions,\n  RequestOptions,\n} from './types';\n\n/** @public */\nexport class BitbucketCloudClient {\n  static fromConfig(\n    config: BitbucketCloudIntegrationConfig,\n  ): BitbucketCloudClient {\n    return new BitbucketCloudClient(config);\n  }\n\n  private constructor(\n    private readonly config: BitbucketCloudIntegrationConfig,\n  ) {}\n\n  searchCode(\n    workspace: string,\n    query: string,\n    options?: FilterAndSortOptions & PartialResponseOptions,\n  ): WithPagination<Models.SearchResultPage, Models.SearchCodeSearchResult> {\n    const workspaceEnc = encodeURIComponent(workspace);\n    return new WithPagination(\n      paginationOptions =>\n        this.createUrl(`/workspaces/${workspaceEnc}/search/code`, {\n          ...paginationOptions,\n          ...options,\n          search_query: query,\n        }),\n      url => this.getTypeMapped(url),\n    );\n  }\n\n  listRepositoriesByWorkspace(\n    workspace: string,\n    options?: FilterAndSortOptions & PartialResponseOptions,\n  ): WithPagination<Models.PaginatedRepositories, Models.Repository> {\n    const workspaceEnc = encodeURIComponent(workspace);\n\n    return new WithPagination(\n      paginationOptions =>\n        this.createUrl(`/repositories/${workspaceEnc}`, {\n          ...paginationOptions,\n          ...options,\n        }),\n      url => this.getTypeMapped(url),\n    );\n  }\n\n  private createUrl(endpoint: string, options?: RequestOptions): URL {\n    const request = new URL(this.config.apiBaseUrl + endpoint);\n    for (const key in options) {\n      if (options[key]) {\n        request.searchParams.append(key, options[key]!.toString());\n      }\n    }\n\n    return request;\n  }\n\n  private async getTypeMapped<T = any>(url: URL): Promise<T> {\n    return this.get(url).then(\n      (response: Response) => response.json() as Promise<T>,\n    );\n  }\n\n  private async get(url: URL): Promise<Response> {\n    return this.request(new Request(url.toString(), { method: 'GET' }));\n  }\n\n  private async request(req: Request): Promise<Response> {\n    return fetch(req, { headers: this.getAuthHeaders() }).then(\n      (response: Response) => {\n        if (!response.ok) {\n          throw new Error(\n            `Unexpected response for ${req.method} ${req.url}. Expected 200 but got ${response.status} - ${response.statusText}`,\n          );\n        }\n\n        return response;\n      },\n    );\n  }\n\n  private getAuthHeaders(): Record<string, string> {\n    const headers: Record<string, string> = {};\n\n    if (this.config.username) {\n      const buffer = Buffer.from(\n        `${this.config.username}:${this.config.appPassword}`,\n        'utf8',\n      );\n      headers.Authorization = `Basic ${buffer.toString('base64')}`;\n    }\n\n    return headers;\n  }\n}\n","/*\n * Copyright 2022 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * Bitbucket API\n * Code against the Bitbucket API to automate simple tasks, embed Bitbucket data into your own site, build mobile or desktop apps, or even add custom UI add-ons into Bitbucket itself using the Connect framework.\n *\n * The version of the OpenAPI document: 2.0\n * Contact: support@bitbucket.org\n *\n * NOTE: This file was auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n\n/** @public */\nexport namespace Models {\n  /**\n   * An account object.\n   * @public\n   */\n  export interface Account extends ModelObject {\n    /**\n     * The status of the account. Currently the only possible value is \"active\", but more values may be added in the future.\n     */\n    account_status?: string;\n    created_on?: string;\n    display_name?: string;\n    has_2fa_enabled?: boolean;\n    links?: AccountLinks;\n    /**\n     * Account name defined by the owner. Should be used instead of the \"username\" field. Note that \"nickname\" cannot be used in place of \"username\" in URLs and queries, as \"nickname\" is not guaranteed to be unique.\n     */\n    nickname?: string;\n    username?: string;\n    uuid?: string;\n    website?: string;\n  }\n\n  /**\n   * @public\n   */\n  export interface AccountLinks {\n    avatar?: Link;\n    followers?: Link;\n    following?: Link;\n    html?: Link;\n    repositories?: Link;\n    self?: Link;\n  }\n\n  /**\n   * The author of a change in a repository\n   * @public\n   */\n  export interface Author extends ModelObject {\n    /**\n     * The raw author value from the repository. This may be the only value available if the author does not match a user in Bitbucket.\n     */\n    raw?: string;\n    user?: Account;\n  }\n\n  /**\n   * The common base type for both repository and snippet commits.\n   * @public\n   */\n  export interface BaseCommit extends ModelObject {\n    author?: Author;\n    date?: string;\n    hash?: string;\n    message?: string;\n    parents?: Array<BaseCommit>;\n    summary?: BaseCommitSummary;\n  }\n\n  /**\n   * @public\n   */\n  export interface BaseCommitSummary {\n    /**\n     * The user's content rendered as HTML.\n     */\n    html?: string;\n    /**\n     * The type of markup language the raw content is to be interpreted in.\n     */\n    markup?: BaseCommitSummaryMarkupEnum;\n    /**\n     * The text as it was typed by a user.\n     */\n    raw?: string;\n  }\n\n  /**\n   * The type of markup language the raw content is to be interpreted in.\n   * @public\n   */\n  export const BaseCommitSummaryMarkupEnum = {\n    Markdown: 'markdown',\n    Creole: 'creole',\n    Plaintext: 'plaintext',\n  } as const;\n\n  /**\n   * The type of markup language the raw content is to be interpreted in.\n   * @public\n   */\n  export type BaseCommitSummaryMarkupEnum =\n    typeof BaseCommitSummaryMarkupEnum[keyof typeof BaseCommitSummaryMarkupEnum];\n\n  /**\n   * A branch object, representing a branch in a repository.\n   * @public\n   */\n  export interface Branch {\n    links?: RefLinks;\n    /**\n     * The name of the ref.\n     */\n    name?: string;\n    target?: Commit;\n    type: string;\n    /**\n     * The default merge strategy for pull requests targeting this branch.\n     */\n    default_merge_strategy?: string;\n    /**\n     * Available merge strategies for pull requests targeting this branch.\n     */\n    merge_strategies?: Array<BranchMergeStrategiesEnum>;\n  }\n\n  /**\n   * Available merge strategies for pull requests targeting this branch.\n   * @public\n   */\n  export const BranchMergeStrategiesEnum = {\n    MergeCommit: 'merge_commit',\n    Squash: 'squash',\n    FastForward: 'fast_forward',\n  } as const;\n\n  /**\n   * Available merge strategies for pull requests targeting this branch.\n   * @public\n   */\n  export type BranchMergeStrategiesEnum =\n    typeof BranchMergeStrategiesEnum[keyof typeof BranchMergeStrategiesEnum];\n\n  /**\n   * A repository commit object.\n   * @public\n   */\n  export interface Commit extends BaseCommit {\n    participants?: Array<Participant>;\n    repository?: Repository;\n  }\n\n  /**\n   * A file object, representing a file at a commit in a repository\n   * @public\n   */\n  export interface CommitFile {\n    [key: string]: unknown;\n    attributes?: CommitFileAttributesEnum;\n    commit?: Commit;\n    /**\n     * The escaped version of the path as it appears in a diff. If the path does not require escaping this will be the same as path.\n     */\n    escaped_path?: string;\n    /**\n     * The path in the repository\n     */\n    path?: string;\n    type: string;\n  }\n\n  /**\n   * @public\n   */\n  export const CommitFileAttributesEnum = {\n    Link: 'link',\n    Executable: 'executable',\n    Subrepository: 'subrepository',\n    Binary: 'binary',\n    Lfs: 'lfs',\n  } as const;\n\n  /**\n   * @public\n   */\n  export type CommitFileAttributesEnum =\n    typeof CommitFileAttributesEnum[keyof typeof CommitFileAttributesEnum];\n\n  /**\n   * A link to a resource related to this object.\n   * @public\n   */\n  export interface Link {\n    href?: string;\n    name?: string;\n  }\n\n  /**\n   * Base type for most resource objects. It defines the common `type` element that identifies an object's type. It also identifies the element as Swagger's `discriminator`.\n   * @public\n   */\n  export interface ModelObject {\n    [key: string]: unknown;\n    type: string;\n  }\n\n  /**\n   * A generic paginated list.\n   * @public\n   */\n  export interface Paginated<TResultItem> {\n    /**\n     * Link to the next page if it exists. The last page of a collection does not have this value. Use this link to navigate the result set and refrain from constructing your own URLs.\n     */\n    next?: string;\n    /**\n     * Page number of the current results. This is an optional element that is not provided in all responses.\n     */\n    page?: number;\n    /**\n     * Current number of objects on the existing page. The default value is 10 with 100 being the maximum allowed value. Individual APIs may enforce different values.\n     */\n    pagelen?: number;\n    /**\n     * Link to previous page if it exists. A collections first page does not have this value. This is an optional element that is not provided in all responses. Some result sets strictly support forward navigation and never provide previous links. Clients must anticipate that backwards navigation is not always available. Use this link to navigate the result set and refrain from constructing your own URLs.\n     */\n    previous?: string;\n    /**\n     * Total number of objects in the response. This is an optional element that is not provided in all responses, as it can be expensive to compute.\n     */\n    size?: number;\n    /**\n     * The values of the current page.\n     */\n    values?: Array<TResultItem> | Set<TResultItem>;\n  }\n\n  /**\n   * A paginated list of repositories.\n   * @public\n   */\n  export interface PaginatedRepositories extends Paginated<Repository> {\n    /**\n     * The values of the current page.\n     */\n    values?: Set<Repository>;\n  }\n\n  /**\n   * Object describing a user's role on resources like commits or pull requests.\n   * @public\n   */\n  export interface Participant extends ModelObject {\n    approved?: boolean;\n    /**\n     * The ISO8601 timestamp of the participant's action. For approvers, this is the time of their approval. For commenters and pull request reviewers who are not approvers, this is the time they last commented, or null if they have not commented.\n     */\n    participated_on?: string;\n    role?: ParticipantRoleEnum;\n    state?: ParticipantStateEnum;\n    user?: User;\n  }\n\n  /**\n   * @public\n   */\n  export const ParticipantRoleEnum = {\n    Participant: 'PARTICIPANT',\n    Reviewer: 'REVIEWER',\n  } as const;\n\n  /**\n   * @public\n   */\n  export type ParticipantRoleEnum =\n    typeof ParticipantRoleEnum[keyof typeof ParticipantRoleEnum];\n\n  /**\n   * @public\n   */\n  export const ParticipantStateEnum = {\n    Approved: 'approved',\n    ChangesRequested: 'changes_requested',\n    Null: 'null',\n  } as const;\n\n  /**\n   * @public\n   */\n  export type ParticipantStateEnum =\n    typeof ParticipantStateEnum[keyof typeof ParticipantStateEnum];\n\n  /**\n   * A Bitbucket project.\n   *             Projects are used by teams to organize repositories.\n   * @public\n   */\n  export interface Project extends ModelObject {\n    created_on?: string;\n    description?: string;\n    /**\n     *\n     * Indicates whether the project contains publicly visible repositories.\n     * Note that private projects cannot contain public repositories.\n     */\n    has_publicly_visible_repos?: boolean;\n    /**\n     *\n     * Indicates whether the project is publicly accessible, or whether it is\n     * private to the team and consequently only visible to team members.\n     * Note that private projects cannot contain public repositories.\n     */\n    is_private?: boolean;\n    /**\n     * The project's key.\n     */\n    key?: string;\n    links?: ProjectLinks;\n    /**\n     * The name of the project.\n     */\n    name?: string;\n    owner?: Team;\n    updated_on?: string;\n    /**\n     * The project's immutable id.\n     */\n    uuid?: string;\n  }\n\n  /**\n   * @public\n   */\n  export interface ProjectLinks {\n    avatar?: Link;\n    html?: Link;\n  }\n\n  /**\n   * @public\n   */\n  export interface RefLinks {\n    commits?: Link;\n    html?: Link;\n    self?: Link;\n  }\n\n  /**\n   * A Bitbucket repository.\n   * @public\n   */\n  export interface Repository extends ModelObject {\n    created_on?: string;\n    description?: string;\n    /**\n     *\n     * Controls the rules for forking this repository.\n     *\n     * * **allow_forks**: unrestricted forking\n     * * **no_public_forks**: restrict forking to private forks (forks cannot\n     *   be made public later)\n     * * **no_forks**: deny all forking\n     */\n    fork_policy?: RepositoryForkPolicyEnum;\n    /**\n     * The concatenation of the repository owner's username and the slugified name, e.g. \"evzijst/interruptingcow\". This is the same string used in Bitbucket URLs.\n     */\n    full_name?: string;\n    has_issues?: boolean;\n    has_wiki?: boolean;\n    is_private?: boolean;\n    language?: string;\n    links?: RepositoryLinks;\n    mainbranch?: Branch;\n    name?: string;\n    owner?: Account;\n    parent?: Repository;\n    project?: Project;\n    scm?: RepositoryScmEnum;\n    size?: number;\n    /**\n     * The \"sluggified\" version of the repository's name. This contains only ASCII characters and can therefore be slightly different than the name\n     */\n    slug?: string;\n    updated_on?: string;\n    /**\n     * The repository's immutable id. This can be used as a substitute for the slug segment in URLs. Doing this guarantees your URLs will survive renaming of the repository by its owner, or even transfer of the repository to a different user.\n     */\n    uuid?: string;\n  }\n\n  /**\n   *\n   * Controls the rules for forking this repository.\n   *\n   * * **allow_forks**: unrestricted forking\n   * * **no_public_forks**: restrict forking to private forks (forks cannot\n   *   be made public later)\n   * * **no_forks**: deny all forking\n   * @public\n   */\n  export const RepositoryForkPolicyEnum = {\n    AllowForks: 'allow_forks',\n    NoPublicForks: 'no_public_forks',\n    NoForks: 'no_forks',\n  } as const;\n\n  /**\n   *\n   * Controls the rules for forking this repository.\n   *\n   * * **allow_forks**: unrestricted forking\n   * * **no_public_forks**: restrict forking to private forks (forks cannot\n   *   be made public later)\n   * * **no_forks**: deny all forking\n   * @public\n   */\n  export type RepositoryForkPolicyEnum =\n    typeof RepositoryForkPolicyEnum[keyof typeof RepositoryForkPolicyEnum];\n\n  /**\n   * @public\n   */\n  export const RepositoryScmEnum = {\n    Git: 'git',\n  } as const;\n\n  /**\n   * @public\n   */\n  export type RepositoryScmEnum =\n    typeof RepositoryScmEnum[keyof typeof RepositoryScmEnum];\n\n  /**\n   * @public\n   */\n  export interface RepositoryLinks {\n    avatar?: Link;\n    clone?: Array<Link>;\n    commits?: Link;\n    downloads?: Link;\n    forks?: Link;\n    hooks?: Link;\n    html?: Link;\n    pullrequests?: Link;\n    self?: Link;\n    watchers?: Link;\n  }\n\n  /**\n   * @public\n   */\n  export interface SearchCodeSearchResult {\n    readonly content_match_count?: number;\n    readonly content_matches?: Array<SearchContentMatch>;\n    file?: CommitFile;\n    readonly path_matches?: Array<SearchSegment>;\n    readonly type?: string;\n  }\n\n  /**\n   * @public\n   */\n  export interface SearchContentMatch {\n    readonly lines?: Array<SearchLine>;\n  }\n\n  /**\n   * @public\n   */\n  export interface SearchLine {\n    readonly line?: number;\n    readonly segments?: Array<SearchSegment>;\n  }\n\n  /**\n   * @public\n   */\n  export interface SearchResultPage extends Paginated<SearchCodeSearchResult> {\n    readonly query_substituted?: boolean;\n    /**\n     * The values of the current page.\n     */\n    readonly values?: Array<SearchCodeSearchResult>;\n  }\n\n  /**\n   * @public\n   */\n  export interface SearchSegment {\n    readonly match?: boolean;\n    readonly text?: string;\n  }\n\n  /**\n   * A team object.\n   * @public\n   */\n  export interface Team extends Account {}\n\n  /**\n   * A user object.\n   * @public\n   */\n  export interface User extends Account {\n    /**\n     * The user's Atlassian account ID.\n     */\n    account_id?: string;\n    is_staff?: boolean;\n  }\n}\n"],"names":["Request","fetch","Models"],"mappings":"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"}