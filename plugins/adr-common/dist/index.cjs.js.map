{"version":3,"file":"index.cjs.js","sources":["../src/index.ts"],"sourcesContent":["/*\n * Copyright 2022 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * Common types and functionalities for the ADR plugin.\n * @packageDocumentation\n */\nimport { Entity, getEntitySourceLocation } from '@backstage/catalog-model';\nimport { IndexableDocument } from '@backstage/plugin-search-common';\nimport { ScmIntegrationRegistry } from '@backstage/integration';\n\n/**\n * ADR plugin annotation.\n * @public\n */\nexport const ANNOTATION_ADR_LOCATION = 'backstage.io/adr-location';\n\n/**\n * Standard luxon DateTime format string for MADR dates.\n * @public\n */\nexport const MADR_DATE_FORMAT = 'yyyy-MM-dd';\n\n/**\n * Utility function to get the value of an entity ADR annotation.\n * @public\n */\nconst getAdrLocationDir = (entity: Entity) =>\n  entity.metadata.annotations?.[ANNOTATION_ADR_LOCATION]?.trim();\n\n/**\n * Utility function to determine if the given entity has ADRs.\n * @public\n */\nexport const isAdrAvailable = (entity: Entity) =>\n  Boolean(getAdrLocationDir(entity));\n\n/**\n * Utility function to extract the ADR location URL from an entity based off\n * its ADR annotation and relative to the entity source location.\n * @public\n */\nexport const getAdrLocationUrl = (\n  entity: Entity,\n  scmIntegration: ScmIntegrationRegistry,\n) => {\n  if (!isAdrAvailable(entity)) {\n    throw new Error(`Missing ADR annotation: ${ANNOTATION_ADR_LOCATION}`);\n  }\n\n  return scmIntegration.resolveUrl({\n    url: getAdrLocationDir(entity)!,\n    base: getEntitySourceLocation(entity).target,\n  });\n};\n\n/**\n * File path filter function type for ADR filenames\n * @public\n */\nexport type AdrFilePathFilterFn = (path: string) => boolean;\n\n/**\n * File path filter for MADR filename formats\n * @public\n */\nexport const madrFilePathFilter: AdrFilePathFilterFn = (path: string) =>\n  /^\\d{4}-.+\\.md$/.test(path);\n\n/**\n * ADR indexable document interface\n * @public\n */\nexport interface AdrDocument extends IndexableDocument {\n  /**\n   * ADR status label\n   */\n  status?: string;\n  /**\n   * ADR date\n   */\n  date?: string;\n}\n"],"names":["getEntitySourceLocation"],"mappings":";;;;;;AACY,MAAC,uBAAuB,GAAG,4BAA4B;AACvD,MAAC,gBAAgB,GAAG,aAAa;AAC7C,MAAM,iBAAiB,GAAG,CAAC,MAAM,KAAK;AACtC,EAAE,IAAI,EAAE,EAAE,EAAE,CAAC;AACb,EAAE,OAAO,CAAC,EAAE,GAAG,CAAC,EAAE,GAAG,MAAM,CAAC,QAAQ,CAAC,WAAW,KAAK,IAAI,GAAG,KAAK,CAAC,GAAG,EAAE,CAAC,uBAAuB,CAAC,KAAK,IAAI,GAAG,KAAK,CAAC,GAAG,EAAE,CAAC,IAAI,EAAE,CAAC;AAC/H,CAAC,CAAC;AACU,MAAC,cAAc,GAAG,CAAC,MAAM,KAAK,OAAO,CAAC,iBAAiB,CAAC,MAAM,CAAC,EAAE;AACjE,MAAC,iBAAiB,GAAG,CAAC,MAAM,EAAE,cAAc,KAAK;AAC7D,EAAE,IAAI,CAAC,cAAc,CAAC,MAAM,CAAC,EAAE;AAC/B,IAAI,MAAM,IAAI,KAAK,CAAC,CAAC,wBAAwB,EAAE,uBAAuB,CAAC,CAAC,CAAC,CAAC;AAC1E,GAAG;AACH,EAAE,OAAO,cAAc,CAAC,UAAU,CAAC;AACnC,IAAI,GAAG,EAAE,iBAAiB,CAAC,MAAM,CAAC;AAClC,IAAI,IAAI,EAAEA,oCAAuB,CAAC,MAAM,CAAC,CAAC,MAAM;AAChD,GAAG,CAAC,CAAC;AACL,EAAE;AACU,MAAC,kBAAkB,GAAG,CAAC,IAAI,KAAK,gBAAgB,CAAC,IAAI,CAAC,IAAI;;;;;;;;"}