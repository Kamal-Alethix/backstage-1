{"version":3,"file":"index.cjs.js","sources":["../src/service/router.ts"],"sourcesContent":["/*\n * Copyright 2020 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { errorHandler } from '@backstage/backend-common';\nimport express from 'express';\nimport Router from 'express-promise-router';\nimport { Logger } from 'winston';\nimport { createApplication } from 'graphql-modules';\nimport { ApolloServer } from 'apollo-server-express';\nimport { createModule as createCatalogModule } from '@backstage/plugin-catalog-graphql';\nimport { Config } from '@backstage/config';\nimport helmet from 'helmet';\nimport { makeExecutableSchema } from '@graphql-tools/schema';\n\nexport interface RouterOptions {\n  logger: Logger;\n  config: Config;\n}\n\nexport async function createRouter(\n  options: RouterOptions,\n): Promise<express.Router> {\n  const catalogModule = await createCatalogModule(options);\n\n  const { createSchemaForApollo } = createApplication({\n    modules: [catalogModule],\n    schemaBuilder(input) {\n      return makeExecutableSchema({\n        ...input,\n        inheritResolversFromInterfaces: true,\n      });\n    },\n  });\n\n  const server = new ApolloServer({\n    schema: createSchemaForApollo(),\n    logger: options.logger,\n    introspection: true,\n  });\n\n  await server.start();\n\n  const router = Router();\n\n  router.get('/health', (_, response) => {\n    response.send({ status: 'ok' });\n  });\n\n  const apolloMiddleware = server.getMiddleware({ path: '/' });\n\n  if (process.env.NODE_ENV === 'development')\n    router.use(\n      helmet.contentSecurityPolicy({\n        directives: {\n          defaultSrc: [\"'self'\", \"'unsafe-inline'\", 'http://*'],\n        },\n      }),\n    );\n\n  router.use(apolloMiddleware);\n  router.use(errorHandler());\n\n  return router;\n}\n"],"names":["createCatalogModule","createApplication","makeExecutableSchema","ApolloServer","Router","helmet","errorHandler"],"mappings":";;;;;;;;;;;;;;;;;AAOO,eAAe,YAAY,CAAC,OAAO,EAAE;AAC5C,EAAE,MAAM,aAAa,GAAG,MAAMA,iCAAmB,CAAC,OAAO,CAAC,CAAC;AAC3D,EAAE,MAAM,EAAE,qBAAqB,EAAE,GAAGC,gCAAiB,CAAC;AACtD,IAAI,OAAO,EAAE,CAAC,aAAa,CAAC;AAC5B,IAAI,aAAa,CAAC,KAAK,EAAE;AACzB,MAAM,OAAOC,2BAAoB,CAAC;AAClC,QAAQ,GAAG,KAAK;AAChB,QAAQ,8BAA8B,EAAE,IAAI;AAC5C,OAAO,CAAC,CAAC;AACT,KAAK;AACL,GAAG,CAAC,CAAC;AACL,EAAE,MAAM,MAAM,GAAG,IAAIC,gCAAY,CAAC;AAClC,IAAI,MAAM,EAAE,qBAAqB,EAAE;AACnC,IAAI,MAAM,EAAE,OAAO,CAAC,MAAM;AAC1B,IAAI,aAAa,EAAE,IAAI;AACvB,GAAG,CAAC,CAAC;AACL,EAAE,MAAM,MAAM,CAAC,KAAK,EAAE,CAAC;AACvB,EAAE,MAAM,MAAM,GAAGC,0BAAM,EAAE,CAAC;AAC1B,EAAE,MAAM,CAAC,GAAG,CAAC,SAAS,EAAE,CAAC,CAAC,EAAE,QAAQ,KAAK;AACzC,IAAI,QAAQ,CAAC,IAAI,CAAC,EAAE,MAAM,EAAE,IAAI,EAAE,CAAC,CAAC;AACpC,GAAG,CAAC,CAAC;AACL,EAAE,MAAM,gBAAgB,GAAG,MAAM,CAAC,aAAa,CAAC,EAAE,IAAI,EAAE,GAAG,EAAE,CAAC,CAAC;AAC/D,EAAE,IAAI,OAAO,CAAC,GAAG,CAAC,QAAQ,KAAK,aAAa;AAC5C,IAAI,MAAM,CAAC,GAAG,CAACC,0BAAM,CAAC,qBAAqB,CAAC;AAC5C,MAAM,UAAU,EAAE;AAClB,QAAQ,UAAU,EAAE,CAAC,QAAQ,EAAE,iBAAiB,EAAE,UAAU,CAAC;AAC7D,OAAO;AACP,KAAK,CAAC,CAAC,CAAC;AACR,EAAE,MAAM,CAAC,GAAG,CAAC,gBAAgB,CAAC,CAAC;AAC/B,EAAE,MAAM,CAAC,GAAG,CAACC,0BAAY,EAAE,CAAC,CAAC;AAC7B,EAAE,OAAO,MAAM,CAAC;AAChB;;;;"}