{"version":3,"file":"index.cjs.js","sources":["../src/ldap/util.ts","../src/ldap/vendors.ts","../src/ldap/client.ts","../src/ldap/config.ts","../src/ldap/constants.ts","../src/ldap/org.ts","../src/ldap/read.ts","../src/processors/LdapOrgEntityProvider.ts","../src/processors/LdapOrgReaderProcessor.ts"],"sourcesContent":["/*\n * Copyright 2020 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Error as LDAPError, SearchEntry } from 'ldapjs';\nimport { LdapVendor } from './vendors';\n\n/**\n * Builds a string form of an LDAP Error structure.\n *\n * @param error - The error\n */\nexport function errorString(error: LDAPError) {\n  return `${error.code} ${error.name}: ${error.message}`;\n}\n\n/**\n * Maps a single-valued attribute to a consumer.\n *\n * This helper can be useful when implementing a user or group transformer.\n *\n * @param entry - The LDAP source entry\n * @param vendor - The LDAP vendor\n * @param attributeName - The source attribute to map. If the attribute is\n *        undefined the mapping will be silently ignored.\n * @param setter - The function to be called with the decoded attribute from the\n *        source entry\n *\n * @public\n */\nexport function mapStringAttr(\n  entry: SearchEntry,\n  vendor: LdapVendor,\n  attributeName: string | undefined,\n  setter: (value: string) => void,\n) {\n  if (attributeName) {\n    const values = vendor.decodeStringAttribute(entry, attributeName);\n    if (values && values.length === 1) {\n      setter(values[0]);\n    }\n  }\n}\n\nexport type RecursivePartial<T> = {\n  [P in keyof T]?: T[P] extends (infer U)[]\n    ? RecursivePartial<U>[]\n    : T[P] extends object\n    ? RecursivePartial<T[P]>\n    : T[P];\n};\n","/*\n * Copyright 2021 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { SearchEntry } from 'ldapjs';\n\n/**\n * An LDAP Vendor handles unique nuances between different vendors.\n *\n * @public\n */\nexport type LdapVendor = {\n  /**\n   * The attribute name that holds the distinguished name (DN) for an entry.\n   */\n  dnAttributeName: string;\n  /**\n   * The attribute name that holds a universal unique identifier for an entry.\n   */\n  uuidAttributeName: string;\n  /**\n   * Decode ldap entry values for a given attribute name to their string representation.\n   *\n   * @param entry - The ldap entry\n   * @param name - The attribute to decode\n   */\n  decodeStringAttribute: (entry: SearchEntry, name: string) => string[];\n};\n\nexport const DefaultLdapVendor: LdapVendor = {\n  dnAttributeName: 'entryDN',\n  uuidAttributeName: 'entryUUID',\n  decodeStringAttribute: (entry, name) => {\n    return decode(entry, name, value => {\n      return value.toString();\n    });\n  },\n};\n\nexport const ActiveDirectoryVendor: LdapVendor = {\n  dnAttributeName: 'distinguishedName',\n  uuidAttributeName: 'objectGUID',\n  decodeStringAttribute: (entry, name) => {\n    const decoder = (value: string | Buffer) => {\n      if (name === ActiveDirectoryVendor.uuidAttributeName) {\n        return formatGUID(value);\n      }\n      return value.toString();\n    };\n    return decode(entry, name, decoder);\n  },\n};\n\n// Decode an attribute to a consumer\nfunction decode(\n  entry: SearchEntry,\n  attributeName: string,\n  decoder: (value: string | Buffer) => string,\n): string[] {\n  const values = entry.raw[attributeName];\n  if (Array.isArray(values)) {\n    return values.map(v => {\n      return decoder(v);\n    });\n  } else if (values) {\n    return [decoder(values)];\n  }\n  return [];\n}\n\n// Formats a Microsoft Active Directory binary-encoded uuid to a readable string\n// See https://github.com/ldapjs/node-ldapjs/issues/297#issuecomment-137765214\nfunction formatGUID(objectGUID: string | Buffer): string {\n  let data: Buffer;\n  if (typeof objectGUID === 'string') {\n    data = new Buffer(objectGUID, 'binary');\n  } else {\n    data = objectGUID;\n  }\n  // GUID_FORMAT_D\n  let template = '{3}{2}{1}{0}-{5}{4}-{7}{6}-{8}{9}-{10}{11}{12}{13}{14}{15}';\n\n  // check each byte\n  for (let i = 0; i < data.length; i++) {\n    let dataStr = data[i].toString(16);\n    dataStr = data[i] >= 16 ? dataStr : `0${dataStr}`;\n\n    // insert that character into the template\n    template = template.replace(`{${i}}`, dataStr);\n  }\n  return template;\n}\n","/*\n * Copyright 2020 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { ForwardedError } from '@backstage/errors';\nimport ldap, { Client, SearchEntry, SearchOptions } from 'ldapjs';\nimport { cloneDeep } from 'lodash';\nimport { Logger } from 'winston';\nimport { BindConfig, TLSConfig } from './config';\nimport { errorString } from './util';\nimport {\n  ActiveDirectoryVendor,\n  DefaultLdapVendor,\n  LdapVendor,\n} from './vendors';\n\n/**\n * Basic wrapper for the `ldapjs` library.\n *\n * Helps out with promisifying calls, paging, binding etc.\n *\n * @public\n */\nexport class LdapClient {\n  private vendor: Promise<LdapVendor> | undefined;\n\n  static async create(\n    logger: Logger,\n    target: string,\n    bind?: BindConfig,\n    tls?: TLSConfig,\n  ): Promise<LdapClient> {\n    const client = ldap.createClient({\n      url: target,\n      tlsOptions: tls,\n    });\n\n    // We want to have a catch-all error handler at the top, since the default\n    // behavior of the client is to blow up the entire process when it fails,\n    // unless an error handler is set.\n    client.on('error', (err: ldap.Error) => {\n      logger.warn(`LDAP client threw an error, ${errorString(err)}`);\n    });\n\n    if (!bind) {\n      return new LdapClient(client, logger);\n    }\n\n    return new Promise<LdapClient>((resolve, reject) => {\n      const { dn, secret } = bind;\n      client.bind(dn, secret, err => {\n        if (err) {\n          reject(`LDAP bind failed for ${dn}, ${errorString(err)}`);\n        } else {\n          resolve(new LdapClient(client, logger));\n        }\n      });\n    });\n  }\n\n  constructor(\n    private readonly client: Client,\n    private readonly logger: Logger,\n  ) {}\n\n  /**\n   * Performs an LDAP search operation.\n   *\n   * @param dn - The fully qualified base DN to search within\n   * @param options - The search options\n   */\n  async search(dn: string, options: SearchOptions): Promise<SearchEntry[]> {\n    try {\n      const output: SearchEntry[] = [];\n\n      const logInterval = setInterval(() => {\n        this.logger.debug(`Read ${output.length} LDAP entries so far...`);\n      }, 5000);\n\n      const search = new Promise<SearchEntry[]>((resolve, reject) => {\n        // Note that we clone the (frozen) options, since ldapjs rudely tries to\n        // overwrite parts of them\n        this.client.search(dn, cloneDeep(options), (err, res) => {\n          if (err) {\n            reject(new Error(errorString(err)));\n            return;\n          }\n\n          res.on('searchReference', () => {\n            this.logger.warn('Received unsupported search referral');\n          });\n\n          res.on('searchEntry', entry => {\n            output.push(entry);\n          });\n\n          res.on('error', e => {\n            reject(new Error(errorString(e)));\n          });\n\n          res.on('page', (_result, cb) => {\n            if (cb) {\n              cb();\n            }\n          });\n\n          res.on('end', r => {\n            if (!r) {\n              reject(new Error('Null response'));\n            } else if (r.status !== 0) {\n              reject(new Error(`Got status ${r.status}: ${r.errorMessage}`));\n            } else {\n              resolve(output);\n            }\n          });\n        });\n      });\n\n      return await search.finally(() => {\n        clearInterval(logInterval);\n      });\n    } catch (e) {\n      throw new ForwardedError(`LDAP search at DN \"${dn}\" failed`, e);\n    }\n  }\n\n  /**\n   * Performs an LDAP search operation, calls a function on each entry to limit memory usage\n   *\n   * @param dn - The fully qualified base DN to search within\n   * @param options - The search options\n   * @param f - The callback to call on each search entry\n   */\n  async searchStreaming(\n    dn: string,\n    options: SearchOptions,\n    f: (entry: SearchEntry) => void,\n  ): Promise<void> {\n    try {\n      return await new Promise<void>((resolve, reject) => {\n        // Note that we clone the (frozen) options, since ldapjs rudely tries to\n        // overwrite parts of them\n        this.client.search(dn, cloneDeep(options), (err, res) => {\n          if (err) {\n            reject(new Error(errorString(err)));\n          }\n\n          res.on('searchReference', () => {\n            this.logger.warn('Received unsupported search referral');\n          });\n\n          res.on('searchEntry', entry => {\n            f(entry);\n          });\n\n          res.on('error', e => {\n            reject(new Error(errorString(e)));\n          });\n\n          res.on('end', r => {\n            if (!r) {\n              throw new Error('Null response');\n            } else if (r.status !== 0) {\n              throw new Error(`Got status ${r.status}: ${r.errorMessage}`);\n            } else {\n              resolve();\n            }\n          });\n        });\n      });\n    } catch (e) {\n      throw new ForwardedError(`LDAP search at DN \"${dn}\" failed`, e);\n    }\n  }\n\n  /**\n   * Get the Server Vendor.\n   * Currently only detects Microsoft Active Directory Servers.\n   *\n   * @see https://ldapwiki.com/wiki/Determine%20LDAP%20Server%20Vendor\n   */\n  async getVendor(): Promise<LdapVendor> {\n    if (this.vendor) {\n      return this.vendor;\n    }\n    this.vendor = this.getRootDSE()\n      .then(root => {\n        if (root && root.raw?.forestFunctionality) {\n          return ActiveDirectoryVendor;\n        }\n        return DefaultLdapVendor;\n      })\n      .catch(err => {\n        this.vendor = undefined;\n        throw err;\n      });\n    return this.vendor;\n  }\n\n  /**\n   * Get the Root DSE.\n   *\n   * @see https://ldapwiki.com/wiki/RootDSE\n   */\n  async getRootDSE(): Promise<SearchEntry | undefined> {\n    const result = await this.search('', {\n      scope: 'base',\n      filter: '(objectclass=*)',\n    } as SearchOptions);\n    if (result && result.length === 1) {\n      return result[0];\n    }\n    return undefined;\n  }\n}\n","/*\n * Copyright 2020 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Config } from '@backstage/config';\nimport { JsonValue } from '@backstage/types';\nimport { SearchOptions } from 'ldapjs';\nimport mergeWith from 'lodash/mergeWith';\nimport { trimEnd } from 'lodash';\nimport { RecursivePartial } from './util';\n\n/**\n * The configuration parameters for a single LDAP provider.\n *\n * @public\n */\nexport type LdapProviderConfig = {\n  // The prefix of the target that this matches on, e.g.\n  // \"ldaps://ds.example.net\", with no trailing slash.\n  target: string;\n  // TLS settings\n  tls?: TLSConfig;\n  // The settings to use for the bind command. If none are specified, the bind\n  // command is not issued.\n  bind?: BindConfig;\n  // The settings that govern the reading and interpretation of users\n  users: UserConfig;\n  // The settings that govern the reading and interpretation of groups\n  groups: GroupConfig;\n};\n\n/**\n * TLS settings\n *\n * @public\n */\nexport type TLSConfig = {\n  // Node TLS rejectUnauthorized\n  rejectUnauthorized?: boolean;\n};\n\n/**\n * The settings to use for the a command.\n *\n * @public\n */\nexport type BindConfig = {\n  // The DN of the user to auth as, e.g.\n  // uid=ldap-robot,ou=robots,ou=example,dc=example,dc=net\n  dn: string;\n  // The secret of the user to auth as (its password)\n  secret: string;\n};\n\n/**\n * The settings that govern the reading and interpretation of users.\n *\n * @public\n */\nexport type UserConfig = {\n  // The DN under which users are stored.\n  dn: string;\n  // The search options to use.\n  // Only the scope, filter, attributes, and paged fields are supported. The\n  // default is scope \"one\" and attributes \"*\" and \"+\".\n  options: SearchOptions;\n  // JSON paths (on a.b.c form) and hard coded values to set on those paths\n  set?: { [path: string]: JsonValue };\n  // Mappings from well known entity fields, to LDAP attribute names\n  map: {\n    // The name of the attribute that holds the relative distinguished name of\n    // each entry. Defaults to \"uid\".\n    rdn: string;\n    // The name of the attribute that shall be used for the value of the\n    // metadata.name field of the entity. Defaults to \"uid\".\n    name: string;\n    // The name of the attribute that shall be used for the value of the\n    // metadata.description field of the entity.\n    description?: string;\n    // The name of the attribute that shall be used for the value of the\n    // spec.profile.displayName field of the entity. Defaults to \"cn\".\n    displayName: string;\n    // The name of the attribute that shall be used for the value of the\n    // spec.profile.email field of the entity. Defaults to \"mail\".\n    email: string;\n    // The name of the attribute that shall be used for the value of the\n    // spec.profile.picture field of the entity.\n    picture?: string;\n    // The name of the attribute that shall be used for the values of the\n    // spec.memberOf field of the entity. Defaults to \"memberOf\".\n    memberOf: string;\n  };\n};\n\n/**\n * The settings that govern the reading and interpretation of groups.\n *\n * @public\n */\nexport type GroupConfig = {\n  // The DN under which groups are stored.\n  dn: string;\n  // The search options to use.\n  // Only the scope, filter, attributes, and paged fields are supported.\n  options: SearchOptions;\n  // JSON paths (on a.b.c form) and hard coded values to set on those paths\n  set?: { [path: string]: JsonValue };\n  // Mappings from well known entity fields, to LDAP attribute names\n  map: {\n    // The name of the attribute that holds the relative distinguished name of\n    // each entry. Defaults to \"cn\".\n    rdn: string;\n    // The name of the attribute that shall be used for the value of the\n    // metadata.name field of the entity. Defaults to \"cn\".\n    name: string;\n    // The name of the attribute that shall be used for the value of the\n    // metadata.description field of the entity. Defaults to \"description\".\n    description: string;\n    // The name of the attribute that shall be used for the value of the\n    // spec.type field of the entity. Defaults to \"groupType\".\n    type: string;\n    // The name of the attribute that shall be used for the value of the\n    // spec.profile.displayName field of the entity. Defaults to \"cn\".\n    displayName: string;\n    // The name of the attribute that shall be used for the value of the\n    // spec.profile.email field of the entity.\n    email?: string;\n    // The name of the attribute that shall be used for the value of the\n    // spec.profile.picture field of the entity.\n    picture?: string;\n    // The name of the attribute that shall be used for the values of the\n    // spec.parent field of the entity. Defaults to \"memberOf\".\n    memberOf: string;\n    // The name of the attribute that shall be used for the values of the\n    // spec.children field of the entity. Defaults to \"member\".\n    members: string;\n  };\n};\n\nconst defaultConfig = {\n  users: {\n    options: {\n      scope: 'one',\n      attributes: ['*', '+'],\n    },\n    map: {\n      rdn: 'uid',\n      name: 'uid',\n      displayName: 'cn',\n      email: 'mail',\n      memberOf: 'memberOf',\n    },\n  },\n  groups: {\n    options: {\n      scope: 'one',\n      attributes: ['*', '+'],\n    },\n    map: {\n      rdn: 'cn',\n      name: 'cn',\n      description: 'description',\n      displayName: 'cn',\n      type: 'groupType',\n      memberOf: 'memberOf',\n      members: 'member',\n    },\n  },\n};\n\n/**\n * Parses configuration.\n *\n * @param config - The root of the LDAP config hierarchy\n *\n * @public\n */\nexport function readLdapConfig(config: Config): LdapProviderConfig[] {\n  function freeze<T>(data: T): T {\n    return JSON.parse(JSON.stringify(data), (_key, value) => {\n      if (typeof value === 'object' && value !== null) {\n        Object.freeze(value);\n      }\n      return value;\n    });\n  }\n\n  function readTlsConfig(\n    c: Config | undefined,\n  ): LdapProviderConfig['tls'] | undefined {\n    if (!c) {\n      return undefined;\n    }\n    return {\n      rejectUnauthorized: c.getOptionalBoolean('rejectUnauthorized'),\n    };\n  }\n\n  function readBindConfig(\n    c: Config | undefined,\n  ): LdapProviderConfig['bind'] | undefined {\n    if (!c) {\n      return undefined;\n    }\n    return {\n      dn: c.getString('dn'),\n      secret: c.getString('secret'),\n    };\n  }\n\n  function readOptionsConfig(c: Config | undefined): SearchOptions {\n    if (!c) {\n      return {};\n    }\n\n    const paged = readOptionsPagedConfig(c);\n\n    return {\n      scope: c.getOptionalString('scope') as SearchOptions['scope'],\n      filter: formatFilter(c.getOptionalString('filter')),\n      attributes: c.getOptionalStringArray('attributes'),\n      sizeLimit: c.getOptionalNumber('sizeLimit'),\n      timeLimit: c.getOptionalNumber('timeLimit'),\n      derefAliases: c.getOptionalNumber('derefAliases'),\n      typesOnly: c.getOptionalBoolean('typesOnly'),\n      ...(paged !== undefined ? { paged } : undefined),\n    };\n  }\n\n  function readOptionsPagedConfig(c: Config): SearchOptions['paged'] {\n    const pagedConfig = c.getOptional('paged');\n    if (pagedConfig === undefined) {\n      return undefined;\n    }\n\n    if (pagedConfig === true || pagedConfig === false) {\n      return pagedConfig;\n    }\n\n    const pageSize = c.getOptionalNumber('paged.pageSize');\n    const pagePause = c.getOptionalBoolean('paged.pagePause');\n    return {\n      ...(pageSize !== undefined ? { pageSize } : undefined),\n      ...(pagePause !== undefined ? { pagePause } : undefined),\n    };\n  }\n\n  function readSetConfig(\n    c: Config | undefined,\n  ): { [path: string]: JsonValue } | undefined {\n    if (!c) {\n      return undefined;\n    }\n    return c.get();\n  }\n\n  function readUserMapConfig(\n    c: Config | undefined,\n  ): Partial<LdapProviderConfig['users']['map']> {\n    if (!c) {\n      return {};\n    }\n\n    return {\n      rdn: c.getOptionalString('rdn'),\n      name: c.getOptionalString('name'),\n      description: c.getOptionalString('description'),\n      displayName: c.getOptionalString('displayName'),\n      email: c.getOptionalString('email'),\n      picture: c.getOptionalString('picture'),\n      memberOf: c.getOptionalString('memberOf'),\n    };\n  }\n\n  function readGroupMapConfig(\n    c: Config | undefined,\n  ): Partial<LdapProviderConfig['groups']['map']> {\n    if (!c) {\n      return {};\n    }\n\n    return {\n      rdn: c.getOptionalString('rdn'),\n      name: c.getOptionalString('name'),\n      description: c.getOptionalString('description'),\n      type: c.getOptionalString('type'),\n      displayName: c.getOptionalString('displayName'),\n      email: c.getOptionalString('email'),\n      picture: c.getOptionalString('picture'),\n      memberOf: c.getOptionalString('memberOf'),\n      members: c.getOptionalString('members'),\n    };\n  }\n\n  function readUserConfig(\n    c: Config,\n  ): RecursivePartial<LdapProviderConfig['users']> {\n    return {\n      dn: c.getString('dn'),\n      options: readOptionsConfig(c.getOptionalConfig('options')),\n      set: readSetConfig(c.getOptionalConfig('set')),\n      map: readUserMapConfig(c.getOptionalConfig('map')),\n    };\n  }\n\n  function readGroupConfig(\n    c: Config,\n  ): RecursivePartial<LdapProviderConfig['groups']> {\n    return {\n      dn: c.getString('dn'),\n      options: readOptionsConfig(c.getOptionalConfig('options')),\n      set: readSetConfig(c.getOptionalConfig('set')),\n      map: readGroupMapConfig(c.getOptionalConfig('map')),\n    };\n  }\n\n  function formatFilter(filter?: string): string | undefined {\n    // Remove extra whitespace between blocks to support multiline filters from the configuration\n    return filter?.replace(/\\s*(\\(|\\))/g, '$1')?.trim();\n  }\n\n  const providerConfigs = config.getOptionalConfigArray('providers') ?? [];\n  return providerConfigs.map(c => {\n    const newConfig = {\n      target: trimEnd(c.getString('target'), '/'),\n      tls: readTlsConfig(c.getOptionalConfig('tls')),\n      bind: readBindConfig(c.getOptionalConfig('bind')),\n      users: readUserConfig(c.getConfig('users')),\n      groups: readGroupConfig(c.getConfig('groups')),\n    };\n    const merged = mergeWith({}, defaultConfig, newConfig, (_into, from) => {\n      // Replace arrays instead of merging, otherwise default behavior\n      return Array.isArray(from) ? from : undefined;\n    });\n    return freeze(merged) as LdapProviderConfig;\n  });\n}\n","/*\n * Copyright 2020 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * The name of an entity annotation, that references the RDN of the LDAP object\n * it was ingested from.\n *\n * The RDN is the name of the leftmost attribute that identifies the item; for\n * example, for an item with the fully qualified DN\n * uid=john,ou=people,ou=spotify,dc=spotify,dc=net the generated entity would\n * have this annotation, with the value \"john\".\n *\n * @public\n */\nexport const LDAP_RDN_ANNOTATION = 'backstage.io/ldap-rdn';\n\n/**\n * The name of an entity annotation, that references the DN of the LDAP object\n * it was ingested from.\n *\n * The DN is the fully qualified name that identifies the item; for example,\n * for an item with the DN uid=john,ou=people,ou=spotify,dc=spotify,dc=net the\n * generated entity would have this annotation, with that full string as its\n * value.\n *\n * @public\n */\nexport const LDAP_DN_ANNOTATION = 'backstage.io/ldap-dn';\n\n/**\n * The name of an entity annotation, that references the UUID of the LDAP\n * object it was ingested from.\n *\n * The UUID is the globally unique ID that identifies the item; for example,\n * for an item with the UUID 76ef928a-b251-1037-9840-d78227f36a7e, the\n * generated entity would have this annotation, with that full string as its\n * value.\n *\n * @public\n */\nexport const LDAP_UUID_ANNOTATION = 'backstage.io/ldap-uuid';\n","/*\n * Copyright 2020 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  GroupEntity,\n  stringifyEntityRef,\n  UserEntity,\n} from '@backstage/catalog-model';\n\n// TODO: Copied from plugin-catalog-backend, but we could also export them from\n// there. Or move them to catalog-model.\n\nexport function buildOrgHierarchy(groups: GroupEntity[]) {\n  const groupsByRef = new Map(groups.map(g => [stringifyEntityRef(g), g]));\n\n  //\n  // Make sure that g.parent.children contain g\n  //\n\n  for (const group of groups) {\n    const selfRef = stringifyEntityRef(group);\n    const parentRef = group.spec.parent;\n    if (parentRef) {\n      const parent = groupsByRef.get(parentRef);\n      if (parent && !parent.spec.children.includes(selfRef)) {\n        parent.spec.children.push(selfRef);\n      }\n    }\n  }\n\n  //\n  // Make sure that g.children.parent is g\n  //\n\n  for (const group of groups) {\n    const selfRef = stringifyEntityRef(group);\n    for (const childRef of group.spec.children) {\n      const child = groupsByRef.get(childRef);\n      if (child && !child.spec.parent) {\n        child.spec.parent = selfRef;\n      }\n    }\n  }\n}\n\n// Ensure that users have their transitive group memberships. Requires that\n// the groups were previously processed with buildOrgHierarchy()\nexport function buildMemberOf(groups: GroupEntity[], users: UserEntity[]) {\n  const groupsByRef = new Map(groups.map(g => [stringifyEntityRef(g), g]));\n\n  users.forEach(user => {\n    const transitiveMemberOf = new Set<string>();\n\n    const todo = [\n      ...(user.spec.memberOf ?? []),\n      ...groups\n        .filter(g => g.spec.members?.includes(stringifyEntityRef(user)))\n        .map(g => stringifyEntityRef(g)),\n    ];\n\n    for (;;) {\n      const current = todo.pop();\n      if (!current) {\n        break;\n      }\n\n      if (!transitiveMemberOf.has(current)) {\n        transitiveMemberOf.add(current);\n        const group = groupsByRef.get(current);\n        if (group?.spec.parent) {\n          todo.push(group.spec.parent);\n        }\n      }\n    }\n\n    user.spec.memberOf = [...transitiveMemberOf];\n  });\n}\n","/*\n * Copyright 2020 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  GroupEntity,\n  stringifyEntityRef,\n  UserEntity,\n} from '@backstage/catalog-model';\nimport { SearchEntry } from 'ldapjs';\nimport lodashSet from 'lodash/set';\nimport cloneDeep from 'lodash/cloneDeep';\nimport { buildOrgHierarchy } from './org';\nimport { LdapClient } from './client';\nimport { GroupConfig, UserConfig } from './config';\nimport {\n  LDAP_DN_ANNOTATION,\n  LDAP_RDN_ANNOTATION,\n  LDAP_UUID_ANNOTATION,\n} from './constants';\nimport { LdapVendor } from './vendors';\nimport { Logger } from 'winston';\nimport { GroupTransformer, UserTransformer } from './types';\nimport { mapStringAttr } from './util';\n\n/**\n * The default implementation of the transformation from an LDAP entry to a\n * User entity.\n *\n * @public\n */\nexport async function defaultUserTransformer(\n  vendor: LdapVendor,\n  config: UserConfig,\n  entry: SearchEntry,\n): Promise<UserEntity | undefined> {\n  const { set, map } = config;\n\n  const entity: UserEntity = {\n    apiVersion: 'backstage.io/v1beta1',\n    kind: 'User',\n    metadata: {\n      name: '',\n      annotations: {},\n    },\n    spec: {\n      profile: {},\n      memberOf: [],\n    },\n  };\n\n  if (set) {\n    for (const [path, value] of Object.entries(set)) {\n      lodashSet(entity, path, cloneDeep(value));\n    }\n  }\n\n  mapStringAttr(entry, vendor, map.name, v => {\n    entity.metadata.name = v;\n  });\n  mapStringAttr(entry, vendor, map.description, v => {\n    entity.metadata.description = v;\n  });\n  mapStringAttr(entry, vendor, map.rdn, v => {\n    entity.metadata.annotations![LDAP_RDN_ANNOTATION] = v;\n  });\n  mapStringAttr(entry, vendor, vendor.uuidAttributeName, v => {\n    entity.metadata.annotations![LDAP_UUID_ANNOTATION] = v;\n  });\n  mapStringAttr(entry, vendor, vendor.dnAttributeName, v => {\n    entity.metadata.annotations![LDAP_DN_ANNOTATION] = v;\n  });\n  mapStringAttr(entry, vendor, map.displayName, v => {\n    entity.spec.profile!.displayName = v;\n  });\n  mapStringAttr(entry, vendor, map.email, v => {\n    entity.spec.profile!.email = v;\n  });\n  mapStringAttr(entry, vendor, map.picture, v => {\n    entity.spec.profile!.picture = v;\n  });\n\n  return entity;\n}\n\n/**\n * Reads users out of an LDAP provider.\n *\n * @param client - The LDAP client\n * @param config - The user data configuration\n * @param opts - Additional options\n */\nexport async function readLdapUsers(\n  client: LdapClient,\n  config: UserConfig,\n  opts?: { transformer?: UserTransformer },\n): Promise<{\n  users: UserEntity[]; // With all relations empty\n  userMemberOf: Map<string, Set<string>>; // DN -> DN or UUID of groups\n}> {\n  const { dn, options, map } = config;\n  const vendor = await client.getVendor();\n\n  const entities: UserEntity[] = [];\n  const userMemberOf: Map<string, Set<string>> = new Map();\n\n  const transformer = opts?.transformer ?? defaultUserTransformer;\n\n  await client.searchStreaming(dn, options, async user => {\n    const entity = await transformer(vendor, config, user);\n\n    if (!entity) {\n      return;\n    }\n\n    mapReferencesAttr(user, vendor, map.memberOf, (myDn, vs) => {\n      ensureItems(userMemberOf, myDn, vs);\n    });\n\n    entities.push(entity);\n  });\n\n  return { users: entities, userMemberOf };\n}\n\n/**\n * The default implementation of the transformation from an LDAP entry to a\n * Group entity.\n *\n * @public\n */\nexport async function defaultGroupTransformer(\n  vendor: LdapVendor,\n  config: GroupConfig,\n  entry: SearchEntry,\n): Promise<GroupEntity | undefined> {\n  const { set, map } = config;\n  const entity: GroupEntity = {\n    apiVersion: 'backstage.io/v1beta1',\n    kind: 'Group',\n    metadata: {\n      name: '',\n      annotations: {},\n    },\n    spec: {\n      type: 'unknown',\n      profile: {},\n      children: [],\n    },\n  };\n\n  if (set) {\n    for (const [path, value] of Object.entries(set)) {\n      lodashSet(entity, path, cloneDeep(value));\n    }\n  }\n\n  mapStringAttr(entry, vendor, map.name, v => {\n    entity.metadata.name = v;\n  });\n  mapStringAttr(entry, vendor, map.description, v => {\n    entity.metadata.description = v;\n  });\n  mapStringAttr(entry, vendor, map.rdn, v => {\n    entity.metadata.annotations![LDAP_RDN_ANNOTATION] = v;\n  });\n  mapStringAttr(entry, vendor, vendor.uuidAttributeName, v => {\n    entity.metadata.annotations![LDAP_UUID_ANNOTATION] = v;\n  });\n  mapStringAttr(entry, vendor, vendor.dnAttributeName, v => {\n    entity.metadata.annotations![LDAP_DN_ANNOTATION] = v;\n  });\n  mapStringAttr(entry, vendor, map.type, v => {\n    entity.spec.type = v;\n  });\n  mapStringAttr(entry, vendor, map.displayName, v => {\n    entity.spec.profile!.displayName = v;\n  });\n  mapStringAttr(entry, vendor, map.email, v => {\n    entity.spec.profile!.email = v;\n  });\n  mapStringAttr(entry, vendor, map.picture, v => {\n    entity.spec.profile!.picture = v;\n  });\n\n  return entity;\n}\n\n/**\n * Reads groups out of an LDAP provider.\n *\n * @param client - The LDAP client\n * @param config - The group data configuration\n * @param opts - Additional options\n */\nexport async function readLdapGroups(\n  client: LdapClient,\n  config: GroupConfig,\n  opts?: {\n    transformer?: GroupTransformer;\n  },\n): Promise<{\n  groups: GroupEntity[]; // With all relations empty\n  groupMemberOf: Map<string, Set<string>>; // DN -> DN or UUID of groups\n  groupMember: Map<string, Set<string>>; // DN -> DN or UUID of groups & users\n}> {\n  const groups: GroupEntity[] = [];\n  const groupMemberOf: Map<string, Set<string>> = new Map();\n  const groupMember: Map<string, Set<string>> = new Map();\n\n  const { dn, map, options } = config;\n  const vendor = await client.getVendor();\n\n  const transformer = opts?.transformer ?? defaultGroupTransformer;\n\n  await client.searchStreaming(dn, options, async entry => {\n    if (!entry) {\n      return;\n    }\n\n    const entity = await transformer(vendor, config, entry);\n\n    if (!entity) {\n      return;\n    }\n\n    mapReferencesAttr(entry, vendor, map.memberOf, (myDn, vs) => {\n      ensureItems(groupMemberOf, myDn, vs);\n    });\n    mapReferencesAttr(entry, vendor, map.members, (myDn, vs) => {\n      ensureItems(groupMember, myDn, vs);\n    });\n\n    groups.push(entity);\n  });\n\n  return {\n    groups,\n    groupMemberOf,\n    groupMember,\n  };\n}\n\n/**\n * Reads users and groups out of an LDAP provider.\n *\n * @param client - The LDAP client\n * @param userConfig - The user data configuration\n * @param groupConfig - The group data configuration\n * @param options - Additional options\n *\n * @public\n */\nexport async function readLdapOrg(\n  client: LdapClient,\n  userConfig: UserConfig,\n  groupConfig: GroupConfig,\n  options: {\n    groupTransformer?: GroupTransformer;\n    userTransformer?: UserTransformer;\n    logger: Logger;\n  },\n): Promise<{\n  users: UserEntity[];\n  groups: GroupEntity[];\n}> {\n  // Invokes the above \"raw\" read functions and stitches together the results\n  // with all relations etc filled in.\n\n  const { users, userMemberOf } = await readLdapUsers(client, userConfig, {\n    transformer: options?.userTransformer,\n  });\n  const { groups, groupMemberOf, groupMember } = await readLdapGroups(\n    client,\n    groupConfig,\n    { transformer: options?.groupTransformer },\n  );\n\n  resolveRelations(groups, users, userMemberOf, groupMemberOf, groupMember);\n  users.sort((a, b) => a.metadata.name.localeCompare(b.metadata.name));\n  groups.sort((a, b) => a.metadata.name.localeCompare(b.metadata.name));\n\n  return { users, groups };\n}\n\n//\n// Helpers\n//\n\n// Maps a multi-valued attribute of references to other objects, to a consumer\nfunction mapReferencesAttr(\n  entry: SearchEntry,\n  vendor: LdapVendor,\n  attributeName: string | undefined,\n  setter: (sourceDn: string, targets: string[]) => void,\n) {\n  if (attributeName) {\n    const values = vendor.decodeStringAttribute(entry, attributeName);\n    const dn = vendor.decodeStringAttribute(entry, vendor.dnAttributeName);\n    if (values && dn && dn.length === 1) {\n      setter(dn[0], values);\n    }\n  }\n}\n\n// Inserts a number of values in a key-values mapping\nfunction ensureItems(\n  target: Map<string, Set<string>>,\n  key: string,\n  values: string[],\n) {\n  if (key) {\n    let set = target.get(key);\n    if (!set) {\n      set = new Set();\n      target.set(key, set);\n    }\n    for (const value of values) {\n      if (value) {\n        set!.add(value);\n      }\n    }\n  }\n}\n\n/**\n * Takes groups and entities with empty relations, and fills in the various\n * relations that were returned by the readers, and forms the org hierarchy.\n *\n * @param groups - Group entities with empty relations; modified in place\n * @param users - User entities with empty relations; modified in place\n * @param userMemberOf - For a user DN, the set of group DNs or UUIDs that the\n *        user is a member of\n * @param groupMemberOf - For a group DN, the set of group DNs or UUIDs that\n *        the group is a member of (parents in the hierarchy)\n * @param groupMember - For a group DN, the set of group DNs or UUIDs that are\n *        members of the group (children in the hierarchy)\n */\nexport function resolveRelations(\n  groups: GroupEntity[],\n  users: UserEntity[],\n  userMemberOf: Map<string, Set<string>>,\n  groupMemberOf: Map<string, Set<string>>,\n  groupMember: Map<string, Set<string>>,\n) {\n  // Build reference lookup tables - all of the relations that are output from\n  // the above calls can be expressed as either DNs or UUIDs so we need to be\n  // able to find by both, as well as the entity reference. Note that we expect them to not\n  // collide here - this is a reasonable assumption as long as the fields are\n  // the supported forms.\n  const userMap: Map<string, UserEntity> = new Map(); // by entityRef, dn, uuid\n  const groupMap: Map<string, GroupEntity> = new Map(); // by entityRef, dn, uuid\n  for (const user of users) {\n    userMap.set(stringifyEntityRef(user), user);\n    userMap.set(user.metadata.annotations![LDAP_DN_ANNOTATION], user);\n    userMap.set(user.metadata.annotations![LDAP_UUID_ANNOTATION], user);\n  }\n  for (const group of groups) {\n    groupMap.set(stringifyEntityRef(group), group);\n    groupMap.set(group.metadata.annotations![LDAP_DN_ANNOTATION], group);\n    groupMap.set(group.metadata.annotations![LDAP_UUID_ANNOTATION], group);\n  }\n\n  // This can happen e.g. if entryUUID wasn't returned by the server\n  userMap.delete('');\n  groupMap.delete('');\n  userMap.delete(undefined!);\n  groupMap.delete(undefined!);\n\n  // Fill in all of the immediate relations, now keyed on the entity reference. We\n  // keep all parents at this point, whether the target model can support more\n  // than one or not (it gets filtered farther down). And group children are\n  // only groups in here.\n  const newUserMemberOf: Map<string, Set<string>> = new Map();\n  const newGroupParents: Map<string, Set<string>> = new Map();\n  const newGroupChildren: Map<string, Set<string>> = new Map();\n\n  // Resolve and store in the intermediaries. It may seem redundant that the\n  // input data has both parent and children directions, as well as both\n  // user->group and group->user - the reason is that different LDAP schemas\n  // express relations in different directions. Some may have a user memberOf\n  // overlay, some don't, for example.\n  for (const [userN, groupsN] of userMemberOf.entries()) {\n    const user = userMap.get(userN);\n    if (user) {\n      for (const groupN of groupsN) {\n        const group = groupMap.get(groupN);\n        if (group) {\n          ensureItems(newUserMemberOf, stringifyEntityRef(user), [\n            stringifyEntityRef(group),\n          ]);\n        }\n      }\n    }\n  }\n  for (const [groupN, parentsN] of groupMemberOf.entries()) {\n    const group = groupMap.get(groupN);\n    if (group) {\n      for (const parentN of parentsN) {\n        const parentGroup = groupMap.get(parentN);\n        if (parentGroup) {\n          ensureItems(newGroupParents, stringifyEntityRef(group), [\n            stringifyEntityRef(parentGroup),\n          ]);\n          ensureItems(newGroupChildren, stringifyEntityRef(parentGroup), [\n            stringifyEntityRef(group),\n          ]);\n        }\n      }\n    }\n  }\n  for (const [groupN, membersN] of groupMember.entries()) {\n    const group = groupMap.get(groupN);\n    if (group) {\n      for (const memberN of membersN) {\n        // Group members can be both users and groups in the input model, so\n        // try both\n        const memberUser = userMap.get(memberN);\n        if (memberUser) {\n          ensureItems(newUserMemberOf, stringifyEntityRef(memberUser), [\n            stringifyEntityRef(group),\n          ]);\n        } else {\n          const memberGroup = groupMap.get(memberN);\n          if (memberGroup) {\n            ensureItems(newGroupChildren, stringifyEntityRef(group), [\n              stringifyEntityRef(memberGroup),\n            ]);\n            ensureItems(newGroupParents, stringifyEntityRef(memberGroup), [\n              stringifyEntityRef(group),\n            ]);\n          }\n        }\n      }\n    }\n  }\n\n  // Write down the relations again into the actual entities\n  for (const [userN, groupsN] of newUserMemberOf.entries()) {\n    const user = userMap.get(userN);\n    if (user) {\n      user.spec.memberOf = Array.from(groupsN).sort();\n    }\n  }\n  for (const [groupN, parentsN] of newGroupParents.entries()) {\n    if (parentsN.size === 1) {\n      const group = groupMap.get(groupN);\n      if (group) {\n        group.spec.parent = parentsN.values().next().value;\n      }\n    }\n  }\n  for (const [groupN, childrenN] of newGroupChildren.entries()) {\n    const group = groupMap.get(groupN);\n    if (group) {\n      group.spec.children = Array.from(childrenN).sort();\n    }\n  }\n\n  // Fill out the rest of the hierarchy\n  buildOrgHierarchy(groups);\n}\n","/*\n * Copyright 2021 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { TaskRunner } from '@backstage/backend-tasks';\nimport {\n  ANNOTATION_LOCATION,\n  ANNOTATION_ORIGIN_LOCATION,\n  Entity,\n} from '@backstage/catalog-model';\nimport { Config } from '@backstage/config';\nimport {\n  EntityProvider,\n  EntityProviderConnection,\n} from '@backstage/plugin-catalog-backend';\nimport { merge } from 'lodash';\nimport * as uuid from 'uuid';\nimport { Logger } from 'winston';\nimport {\n  GroupTransformer,\n  LdapClient,\n  LdapProviderConfig,\n  LDAP_DN_ANNOTATION,\n  readLdapConfig,\n  readLdapOrg,\n  UserTransformer,\n} from '../ldap';\n\n/**\n * Options for {@link LdapOrgEntityProvider}.\n *\n * @public\n */\nexport interface LdapOrgEntityProviderOptions {\n  /**\n   * A unique, stable identifier for this provider.\n   *\n   * @example \"production\"\n   */\n  id: string;\n\n  /**\n   * The target that this provider should consume.\n   *\n   * Should exactly match the \"target\" field of one of the \"ldap.providers\"\n   * configuration entries.\n   *\n   * @example \"ldaps://ds-read.example.net\"\n   */\n  target: string;\n\n  /**\n   * The logger to use.\n   */\n  logger: Logger;\n\n  /**\n   * The refresh schedule to use.\n   *\n   * @remarks\n   *\n   * If you pass in 'manual', you are responsible for calling the `read` method\n   * manually at some interval.\n   *\n   * But more commonly you will pass in the result of\n   * {@link @backstage/backend-tasks#PluginTaskScheduler.createScheduledTaskRunner}\n   * to enable automatic scheduling of tasks.\n   */\n  schedule: 'manual' | TaskRunner;\n\n  /**\n   * The function that transforms a user entry in LDAP to an entity.\n   */\n  userTransformer?: UserTransformer;\n\n  /**\n   * The function that transforms a group entry in LDAP to an entity.\n   */\n  groupTransformer?: GroupTransformer;\n}\n\n/**\n * Reads user and group entries out of an LDAP service, and provides them as\n * User and Group entities for the catalog.\n *\n * @remarks\n *\n * Add an instance of this class to your catalog builder, and then periodically\n * call the {@link LdapOrgEntityProvider.read} method.\n *\n * @public\n */\nexport class LdapOrgEntityProvider implements EntityProvider {\n  private connection?: EntityProviderConnection;\n  private scheduleFn?: () => Promise<void>;\n\n  static fromConfig(\n    configRoot: Config,\n    options: LdapOrgEntityProviderOptions,\n  ): LdapOrgEntityProvider {\n    // TODO(freben): Deprecate the old catalog.processors.ldapOrg config\n    const config =\n      configRoot.getOptionalConfig('ldap') ||\n      configRoot.getOptionalConfig('catalog.processors.ldapOrg');\n    const providers = config ? readLdapConfig(config) : [];\n    const provider = providers.find(p => options.target === p.target);\n    if (!provider) {\n      throw new TypeError(\n        `There is no LDAP configuration that matches \"${options.target}\". Please add a configuration entry for it under \"ldap.providers\".`,\n      );\n    }\n\n    const logger = options.logger.child({\n      target: options.target,\n    });\n\n    const result = new LdapOrgEntityProvider({\n      id: options.id,\n      provider,\n      userTransformer: options.userTransformer,\n      groupTransformer: options.groupTransformer,\n      logger,\n    });\n\n    result.schedule(options.schedule);\n\n    return result;\n  }\n\n  constructor(\n    private options: {\n      id: string;\n      provider: LdapProviderConfig;\n      logger: Logger;\n      userTransformer?: UserTransformer;\n      groupTransformer?: GroupTransformer;\n    },\n  ) {}\n\n  /** {@inheritdoc @backstage/plugin-catalog-backend#EntityProvider.getProviderName} */\n  getProviderName() {\n    return `LdapOrgEntityProvider:${this.options.id}`;\n  }\n\n  /** {@inheritdoc @backstage/plugin-catalog-backend#EntityProvider.connect} */\n  async connect(connection: EntityProviderConnection) {\n    this.connection = connection;\n    await this.scheduleFn?.();\n  }\n\n  /**\n   * Runs one single complete ingestion. This is only necessary if you use\n   * manual scheduling.\n   */\n  async read(options?: { logger?: Logger }) {\n    if (!this.connection) {\n      throw new Error('Not initialized');\n    }\n\n    const logger = options?.logger ?? this.options.logger;\n    const { markReadComplete } = trackProgress(logger);\n\n    // Be lazy and create the client each time; even though it's pretty\n    // inefficient, we usually only do this once per entire refresh loop and\n    // don't have to worry about timeouts and reconnects etc.\n    const client = await LdapClient.create(\n      this.options.logger,\n      this.options.provider.target,\n      this.options.provider.bind,\n      this.options.provider.tls,\n    );\n\n    const { users, groups } = await readLdapOrg(\n      client,\n      this.options.provider.users,\n      this.options.provider.groups,\n      {\n        groupTransformer: this.options.groupTransformer,\n        userTransformer: this.options.userTransformer,\n        logger,\n      },\n    );\n\n    const { markCommitComplete } = markReadComplete({ users, groups });\n\n    await this.connection.applyMutation({\n      type: 'full',\n      entities: [...users, ...groups].map(entity => ({\n        locationKey: `ldap-org-provider:${this.options.id}`,\n        entity: withLocations(this.options.id, entity),\n      })),\n    });\n\n    markCommitComplete();\n  }\n\n  private schedule(schedule: LdapOrgEntityProviderOptions['schedule']) {\n    if (schedule === 'manual') {\n      return;\n    }\n\n    this.scheduleFn = async () => {\n      const id = `${this.getProviderName()}:refresh`;\n      await schedule.run({\n        id,\n        fn: async () => {\n          const logger = this.options.logger.child({\n            class: LdapOrgEntityProvider.prototype.constructor.name,\n            taskId: id,\n            taskInstanceId: uuid.v4(),\n          });\n\n          try {\n            await this.read({ logger });\n          } catch (error) {\n            logger.error(error);\n          }\n        },\n      });\n    };\n  }\n}\n\n// Helps wrap the timing and logging behaviors\nfunction trackProgress(logger: Logger) {\n  let timestamp = Date.now();\n  let summary: string;\n\n  logger.info('Reading LDAP users and groups');\n\n  function markReadComplete(read: { users: unknown[]; groups: unknown[] }) {\n    summary = `${read.users.length} LDAP users and ${read.groups.length} LDAP groups`;\n    const readDuration = ((Date.now() - timestamp) / 1000).toFixed(1);\n    timestamp = Date.now();\n    logger.info(`Read ${summary} in ${readDuration} seconds. Committing...`);\n    return { markCommitComplete };\n  }\n\n  function markCommitComplete() {\n    const commitDuration = ((Date.now() - timestamp) / 1000).toFixed(1);\n    logger.info(`Committed ${summary} in ${commitDuration} seconds.`);\n  }\n\n  return { markReadComplete };\n}\n\n// Makes sure that emitted entities have a proper location based on their DN\nfunction withLocations(providerId: string, entity: Entity): Entity {\n  const dn =\n    entity.metadata.annotations?.[LDAP_DN_ANNOTATION] || entity.metadata.name;\n  const location = `ldap://${providerId}/${encodeURIComponent(dn)}`;\n  return merge(\n    {\n      metadata: {\n        annotations: {\n          [ANNOTATION_LOCATION]: location,\n          [ANNOTATION_ORIGIN_LOCATION]: location,\n        },\n      },\n    },\n    entity,\n  ) as Entity;\n}\n","/*\n * Copyright 2020 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Config } from '@backstage/config';\nimport { Logger } from 'winston';\nimport {\n  GroupTransformer,\n  LdapClient,\n  LdapProviderConfig,\n  readLdapConfig,\n  readLdapOrg,\n  UserTransformer,\n} from '../ldap';\nimport {\n  CatalogProcessor,\n  CatalogProcessorEmit,\n  LocationSpec,\n  processingResult,\n} from '@backstage/plugin-catalog-backend';\n\n/**\n * Extracts teams and users out of an LDAP server.\n *\n * @public\n */\nexport class LdapOrgReaderProcessor implements CatalogProcessor {\n  private readonly providers: LdapProviderConfig[];\n  private readonly logger: Logger;\n  private readonly groupTransformer?: GroupTransformer;\n  private readonly userTransformer?: UserTransformer;\n\n  static fromConfig(\n    configRoot: Config,\n    options: {\n      logger: Logger;\n      groupTransformer?: GroupTransformer;\n      userTransformer?: UserTransformer;\n    },\n  ) {\n    // TODO(freben): Deprecate the old catalog.processors.ldapOrg config\n    const config =\n      configRoot.getOptionalConfig('ldap') ||\n      configRoot.getOptionalConfig('catalog.processors.ldapOrg');\n    return new LdapOrgReaderProcessor({\n      ...options,\n      providers: config ? readLdapConfig(config) : [],\n    });\n  }\n\n  constructor(options: {\n    providers: LdapProviderConfig[];\n    logger: Logger;\n    groupTransformer?: GroupTransformer;\n    userTransformer?: UserTransformer;\n  }) {\n    this.providers = options.providers;\n    this.logger = options.logger;\n    this.groupTransformer = options.groupTransformer;\n    this.userTransformer = options.userTransformer;\n  }\n\n  getProcessorName(): string {\n    return 'LdapOrgReaderProcessor';\n  }\n\n  async readLocation(\n    location: LocationSpec,\n    _optional: boolean,\n    emit: CatalogProcessorEmit,\n  ): Promise<boolean> {\n    if (location.type !== 'ldap-org') {\n      return false;\n    }\n\n    const provider = this.providers.find(p => location.target === p.target);\n    if (!provider) {\n      throw new Error(\n        `There is no LDAP configuration that matches \"${location.target}\". Please add a configuration entry for it under \"ldap.providers\".`,\n      );\n    }\n\n    // Read out all of the raw data\n    const startTimestamp = Date.now();\n    this.logger.info('Reading LDAP users and groups');\n\n    // Be lazy and create the client each time; even though it's pretty\n    // inefficient, we usually only do this once per entire refresh loop and\n    // don't have to worry about timeouts and reconnects etc.\n    const client = await LdapClient.create(\n      this.logger,\n      provider.target,\n      provider.bind,\n      provider.tls,\n    );\n    const { users, groups } = await readLdapOrg(\n      client,\n      provider.users,\n      provider.groups,\n      {\n        groupTransformer: this.groupTransformer,\n        userTransformer: this.userTransformer,\n        logger: this.logger,\n      },\n    );\n\n    const duration = ((Date.now() - startTimestamp) / 1000).toFixed(1);\n    this.logger.debug(\n      `Read ${users.length} LDAP users and ${groups.length} LDAP groups in ${duration} seconds`,\n    );\n\n    // Done!\n    for (const group of groups) {\n      emit(processingResult.entity(location, group));\n    }\n    for (const user of users) {\n      emit(processingResult.entity(location, user));\n    }\n\n    return true;\n  }\n}\n"],"names":["ldap","cloneDeep","ForwardedError","trimEnd","mergeWith","stringifyEntityRef","lodashSet","uuid","merge","ANNOTATION_LOCATION","ANNOTATION_ORIGIN_LOCATION","processingResult"],"mappings":"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"}