{"version":3,"file":"index.cjs.js","sources":["../src/service/CoverageUtils.ts","../src/service/CodeCoverageDatabase.ts","../src/service/converter/cobertura.ts","../src/service/converter/jacoco.ts","../src/service/router.ts"],"sourcesContent":["/*\n * Copyright 2021 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { Request } from 'express';\nimport { UrlReader } from '@backstage/backend-common';\nimport { InputError, NotFoundError } from '@backstage/errors';\nimport {\n  Entity,\n  getEntitySourceLocation,\n  stringifyEntityRef,\n} from '@backstage/catalog-model';\nimport { ScmIntegration, ScmIntegrations } from '@backstage/integration';\nimport { AggregateCoverage, FileEntry, JsonCodeCoverage } from './types';\n\nexport const calculatePercentage = (\n  available: number,\n  covered: number,\n): number => {\n  if (available === 0) {\n    return 0;\n  }\n  return parseFloat(((covered / available) * 100).toFixed(2));\n};\n\nexport const aggregateCoverage = (c: JsonCodeCoverage): AggregateCoverage => {\n  let availableLine = 0;\n  let coveredLine = 0;\n  let availableBranch = 0;\n  let coveredBranch = 0;\n  c.files.forEach(f => {\n    availableLine += Object.keys(f.lineHits).length;\n    coveredLine += Object.values(f.lineHits).filter(l => l > 0).length;\n\n    availableBranch += Object.keys(f.branchHits)\n      .map(b => parseInt(b, 10))\n      .map((b: number) => f.branchHits[b].available)\n      .filter(Boolean)\n      .reduce((acc, curr) => acc + curr, 0);\n    coveredBranch += Object.keys(f.branchHits)\n      .map(b => parseInt(b, 10))\n      .map((b: number) => f.branchHits[b].covered)\n      .filter(Boolean)\n      .reduce((acc, curr) => acc + curr, 0);\n  });\n\n  return {\n    timestamp: c.metadata.generationTime,\n    branch: {\n      available: availableBranch,\n      covered: coveredBranch,\n      missed: availableBranch - coveredBranch,\n      percentage: calculatePercentage(availableBranch, coveredBranch),\n    },\n    line: {\n      available: availableLine,\n      covered: coveredLine,\n      missed: availableLine - coveredLine,\n      percentage: calculatePercentage(availableLine, coveredLine),\n    },\n  };\n};\n\nexport class CoverageUtils {\n  constructor(\n    readonly scm: Partial<ScmIntegrations>,\n    readonly urlReader: Partial<UrlReader>,\n  ) {}\n\n  async processCoveragePayload(\n    entity: Entity,\n    req: Request,\n  ): Promise<{\n    sourceLocation?: string;\n    vcs?: ScmIntegration;\n    scmFiles: string[];\n    body: {};\n  }> {\n    const enforceScmFiles =\n      entity.metadata.annotations?.['backstage.io/code-coverage'] ===\n        'scm-only' || false;\n\n    let sourceLocation: string | undefined = undefined;\n    let vcs: ScmIntegration | undefined = undefined;\n    let scmFiles: string[] = [];\n\n    if (enforceScmFiles) {\n      try {\n        const sl = getEntitySourceLocation(entity);\n        sourceLocation = sl.target;\n      } catch (e: unknown) {\n        // TODO: logging\n      }\n\n      if (!sourceLocation) {\n        throw new InputError(\n          `No \"backstage.io/source-location\" annotation on entity ${stringifyEntityRef(\n            entity,\n          )}`,\n        );\n      }\n\n      vcs = this.scm.byUrl?.(sourceLocation);\n      if (!vcs) {\n        throw new InputError(`Unable to determine SCM from ${sourceLocation}`);\n      }\n\n      const scmTree = await this.urlReader.readTree?.(sourceLocation);\n      if (!scmTree) {\n        throw new NotFoundError(`Unable to read tree from ${sourceLocation}`);\n      }\n      scmFiles = (await scmTree.files()).map(f => f.path);\n    }\n\n    const body = this.validateRequestBody(req);\n    if (Object.keys(body).length === 0) {\n      throw new InputError('Unable to parse body');\n    }\n\n    return {\n      sourceLocation,\n      vcs,\n      scmFiles,\n      body,\n    };\n  }\n\n  async buildCoverage(\n    entity: Entity,\n    sourceLocation: string | undefined,\n    vcs: ScmIntegration | undefined,\n    files: FileEntry[],\n  ): Promise<JsonCodeCoverage> {\n    return {\n      metadata: {\n        vcs: {\n          type: vcs?.type || 'unknown',\n          location: sourceLocation || 'unknown',\n        },\n        generationTime: Date.now(),\n      },\n      entity: {\n        name: entity.metadata.name,\n        namespace: entity.metadata.namespace || 'default',\n        kind: entity.kind,\n      },\n      files,\n    };\n  }\n\n  validateRequestBody(req: Request) {\n    const contentType = req.headers['content-type'];\n    if (!contentType) {\n      throw new InputError('Content-Type missing');\n    } else if (!contentType.match(/^text\\/xml($|;)/)) {\n      throw new InputError('Illegal Content-Type');\n    }\n    const body = req.body;\n    if (!body) {\n      throw new InputError('Missing request body');\n    }\n    return body;\n  }\n}\n","/*\n * Copyright 2021 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { resolvePackagePath } from '@backstage/backend-common';\nimport { NotFoundError } from '@backstage/errors';\nimport { parseEntityRef, stringifyEntityRef } from '@backstage/catalog-model';\nimport { Knex } from 'knex';\nimport { v4 as uuid } from 'uuid';\nimport { aggregateCoverage } from './CoverageUtils';\nimport { JsonCodeCoverage, JsonCoverageHistory } from './types';\n\nexport type RawDbCoverageRow = {\n  id: string;\n  entity: string;\n  coverage: string;\n};\n\nexport interface CodeCoverageStore {\n  insertCodeCoverage(\n    coverage: JsonCodeCoverage,\n  ): Promise<{ codeCoverageId: string }>;\n  getCodeCoverage(entity: string): Promise<JsonCodeCoverage>;\n  getHistory(entity: string, limit: number): Promise<JsonCoverageHistory>;\n}\n\nconst migrationsDir = resolvePackagePath(\n  '@backstage/plugin-code-coverage-backend',\n  'migrations',\n);\n\nexport class CodeCoverageDatabase implements CodeCoverageStore {\n  static async create(knex: Knex): Promise<CodeCoverageStore> {\n    await knex.migrate.latest({\n      directory: migrationsDir,\n    });\n    return new CodeCoverageDatabase(knex);\n  }\n\n  constructor(private readonly db: Knex) {}\n\n  async insertCodeCoverage(\n    coverage: JsonCodeCoverage,\n  ): Promise<{ codeCoverageId: string }> {\n    const codeCoverageId = uuid();\n    const entity = stringifyEntityRef({\n      kind: coverage.entity.kind,\n      namespace: coverage.entity.namespace,\n      name: coverage.entity.name,\n    });\n\n    await this.db<RawDbCoverageRow>('code_coverage').insert({\n      id: codeCoverageId,\n      entity: entity,\n      coverage: JSON.stringify(coverage),\n    });\n\n    return { codeCoverageId };\n  }\n\n  async getCodeCoverage(entity: string): Promise<JsonCodeCoverage> {\n    const [result] = await this.db<RawDbCoverageRow>('code_coverage')\n      .where({ entity: entity })\n      .orderBy('index', 'desc')\n      .limit(1)\n      .select();\n\n    if (!result) {\n      throw new NotFoundError(\n        `No coverage for entity '${JSON.stringify(entity)}' found`,\n      );\n    }\n\n    try {\n      return JSON.parse(result.coverage);\n    } catch (error) {\n      throw new Error(`Failed to parse coverage for '${entity}', ${error}`);\n    }\n  }\n\n  async getHistory(\n    entity: string,\n    limit: number,\n  ): Promise<JsonCoverageHistory> {\n    const res = await this.db<RawDbCoverageRow>('code_coverage')\n      .where({ entity: entity })\n      .orderBy('index', 'desc')\n      .limit(limit)\n      .select();\n\n    const history = res\n      .map(r => JSON.parse(r.coverage))\n      .map(c => aggregateCoverage(c));\n\n    const entityName = parseEntityRef(entity);\n\n    return {\n      entity: {\n        name: entityName.name,\n        kind: entityName.kind,\n        namespace: entityName.namespace,\n      },\n      history: history,\n    };\n  }\n}\n","/*\n * Copyright 2021 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { BranchHit, FileEntry } from '../types';\nimport { CoberturaXML, InnerClass, LineHit } from './types';\nimport { Logger } from 'winston';\nimport { Converter } from './Converter';\n\nexport class Cobertura implements Converter {\n  constructor(readonly logger: Logger) {\n    this.logger = logger;\n  }\n\n  /**\n   * convert cobertura into shared json coverage format\n   *\n   * @param xml - cobertura xml object\n   * @param scmFiles - list of files that are committed to SCM\n   */\n  convert(xml: CoberturaXML, scmFiles: string[]): FileEntry[] {\n    const ppc = xml.coverage.packages\n      ?.flatMap(p => p.package)\n      .filter(Boolean)\n      .flatMap(p => p.classes);\n    const pc = xml.coverage.package?.filter(Boolean).flatMap(p => p.classes);\n\n    const classes = [ppc, pc]\n      .flat()\n      .filter(Boolean)\n      .flatMap(c => c.class)\n      .filter(Boolean);\n    const jscov: Array<FileEntry> = [];\n\n    classes.forEach(c => {\n      const packageAndFilename = c.$.filename;\n      const lines = this.extractLines(c);\n      const lineHits: Record<number, number> = {};\n      const branchHits: Record<number, BranchHit> = {};\n\n      lines.forEach(l => {\n        if (!lineHits[l.number]) {\n          lineHits[l.number] = 0;\n        }\n        lineHits[l.number] += l.hits;\n        if (l.branch && l['condition-coverage']) {\n          const bh = this.parseBranch(l['condition-coverage']);\n          if (bh) {\n            branchHits[l.number] = bh;\n          }\n        }\n      });\n\n      const currentFile = scmFiles\n        .map(f => f.trimEnd())\n        .find(f => f.endsWith(packageAndFilename));\n      this.logger.debug(`matched ${packageAndFilename} to ${currentFile}`);\n      if (\n        scmFiles.length === 0 ||\n        (Object.keys(lineHits).length > 0 && currentFile)\n      ) {\n        jscov.push({\n          filename: currentFile || packageAndFilename,\n          branchHits: branchHits,\n          lineHits: lineHits,\n        });\n      }\n    });\n\n    return jscov;\n  }\n\n  /**\n   * Parses branch coverage information from condition-coverage\n   *\n   * @param condition - condition-coverage value from line coverage\n   */\n  private parseBranch(condition: string): BranchHit | null {\n    const pattern = /[0-9\\.]+\\%\\s\\(([0-9]+)\\/([0-9]+)\\)/;\n    const match = condition.match(pattern);\n    if (!match) {\n      return null;\n    }\n    const covered = parseInt(match[1], 10);\n    const available = parseInt(match[2], 10);\n    return {\n      covered: covered,\n      missed: available - covered,\n      available: available,\n    };\n  }\n\n  /**\n   * Extract line hits from a class coverage entry\n   *\n   * @param clz - class coverage information\n   */\n  private extractLines(clz: InnerClass): Array<LineHit> {\n    const classLines = clz.lines.flatMap(l => l.line);\n    const methodLines = clz.methods\n      ?.flatMap(m => m.method)\n      .filter(Boolean)\n      .flatMap(m => m.lines)\n      .filter(Boolean)\n      .flatMap(l => l.line);\n    const lines = [classLines, methodLines].flat().filter(Boolean);\n    const lineHits = lines.map(l => {\n      return {\n        number: parseInt(l.$.number as unknown as string, 10),\n        hits: parseInt(l.$.hits as unknown as string, 10),\n        'condition-coverage': l.$['condition-coverage'],\n        branch: l.$.branch,\n      };\n    });\n    return lineHits;\n  }\n}\n","/*\n * Copyright 2021 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { BranchHit, FileEntry } from '../types';\nimport { JacocoSourceFile, JacocoXML } from './types';\nimport { Logger } from 'winston';\nimport { Converter } from './Converter';\n\ntype ParsedLine = {\n  number: number;\n  missed_instructions: number;\n  covered_instructions: number;\n  missed_branches: number;\n  covered_branches: number;\n};\n\nexport class Jacoco implements Converter {\n  constructor(readonly logger: Logger) {\n    this.logger = logger;\n  }\n\n  /**\n   * Converts jacoco into shared json coverage format\n   *\n   * @param xml - jacoco xml object\n   * @param scmFiles - list of files that are committed to SCM\n   */\n  convert(xml: JacocoXML, scmFiles: Array<string>): Array<FileEntry> {\n    const jscov: Array<FileEntry> = [];\n\n    xml.report.package.forEach(r => {\n      const packageName = r.$.name;\n      r.sourcefile.forEach(sf => {\n        const fileName = sf.$.name;\n        const lines = this.extractLines(sf);\n        const lineHits: Record<number, number> = {};\n        const branchHits: Record<number, BranchHit> = {};\n        lines.forEach(l => {\n          if (!lineHits[l.number]) {\n            lineHits[l.number] = 0;\n          }\n          lineHits[l.number] += l.covered_instructions;\n          const ab = l.covered_branches + l.missed_branches;\n          if (ab > 0) {\n            branchHits[l.number] = {\n              covered: l.covered_branches,\n              missed: l.missed_branches,\n              available: ab,\n            };\n          }\n        });\n\n        const packageAndFilename = `${packageName}/${fileName}`;\n        const currentFile = scmFiles\n          .map(f => f.trimEnd())\n          .find(f => f.endsWith(packageAndFilename));\n        this.logger.debug(`matched ${packageAndFilename} to ${currentFile}`);\n        if (Object.keys(lineHits).length > 0 && currentFile) {\n          jscov.push({\n            filename: currentFile,\n            branchHits: branchHits,\n            lineHits: lineHits,\n          });\n        }\n      });\n    });\n\n    return jscov;\n  }\n\n  private extractLines(sourcefile: JacocoSourceFile): ParsedLine[] {\n    const parsed: ParsedLine[] = [];\n\n    sourcefile.line?.forEach(l => {\n      parsed.push({\n        number: parseInt(l.$.nr, 10),\n        missed_instructions: parseInt(l.$.mi, 10),\n        covered_instructions: parseInt(l.$.ci, 10),\n        missed_branches: parseInt(l.$.mb, 10),\n        covered_branches: parseInt(l.$.cb, 10),\n      });\n    });\n\n    return parsed;\n  }\n}\n","/*\n * Copyright 2021 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport express from 'express';\nimport Router from 'express-promise-router';\nimport { Logger } from 'winston';\nimport xmlparser from 'express-xml-bodyparser';\nimport { CatalogApi, CatalogClient } from '@backstage/catalog-client';\nimport {\n  errorHandler,\n  PluginDatabaseManager,\n  PluginEndpointDiscovery,\n  UrlReader,\n} from '@backstage/backend-common';\nimport { InputError, NotFoundError } from '@backstage/errors';\nimport { Config } from '@backstage/config';\nimport { ScmIntegrations } from '@backstage/integration';\nimport { CodeCoverageDatabase } from './CodeCoverageDatabase';\nimport { aggregateCoverage, CoverageUtils } from './CoverageUtils';\nimport { Cobertura } from './converter/cobertura';\nimport { Jacoco } from './converter/jacoco';\nimport { Converter } from './converter';\nimport { getEntitySourceLocation } from '@backstage/catalog-model';\n\nexport interface RouterOptions {\n  config: Config;\n  discovery: PluginEndpointDiscovery;\n  database: PluginDatabaseManager;\n  urlReader: UrlReader;\n  logger: Logger;\n}\n\nexport interface CodeCoverageApi {\n  name: string;\n}\n\nexport const makeRouter = async (\n  options: RouterOptions,\n): Promise<express.Router> => {\n  const { config, logger, discovery, database, urlReader } = options;\n\n  const codeCoverageDatabase = await CodeCoverageDatabase.create(\n    await database.getClient(),\n  );\n  const codecovUrl = await discovery.getExternalBaseUrl('code-coverage');\n  const catalogApi: CatalogApi = new CatalogClient({ discoveryApi: discovery });\n  const scm = ScmIntegrations.fromConfig(config);\n\n  const router = Router();\n  router.use(xmlparser());\n  router.use(express.json());\n\n  const utils = new CoverageUtils(scm, urlReader);\n\n  router.get('/health', async (_req, res) => {\n    res.status(200).json({ status: 'ok' });\n  });\n\n  /**\n   * /report?entity=component:default/mycomponent\n   */\n  router.get('/report', async (req, res) => {\n    const { entity } = req.query;\n    const entityLookup = await catalogApi.getEntityByRef(entity as string);\n    if (!entityLookup) {\n      throw new NotFoundError(`No entity found matching ${entity}`);\n    }\n    const stored = await codeCoverageDatabase.getCodeCoverage(entity as string);\n\n    const aggregate = aggregateCoverage(stored);\n\n    res.status(200).json({\n      ...stored,\n      aggregate: {\n        line: aggregate.line,\n        branch: aggregate.branch,\n      },\n    });\n  });\n\n  /**\n   * /history?entity=component:default/mycomponent\n   */\n  router.get('/history', async (req, res) => {\n    const { entity } = req.query;\n    const entityLookup = await catalogApi.getEntityByRef(entity as string);\n    if (!entityLookup) {\n      throw new NotFoundError(`No entity found matching ${entity}`);\n    }\n    const { limit } = req.query;\n    const history = await codeCoverageDatabase.getHistory(\n      entity as string,\n      parseInt(limit?.toString() || '10', 10),\n    );\n\n    res.status(200).json(history);\n  });\n\n  /**\n   * /file-content?entity=component:default/mycomponent&path=src/some-file.go\n   */\n  router.get('/file-content', async (req, res) => {\n    const { entity, path } = req.query;\n    const entityLookup = await catalogApi.getEntityByRef(entity as string);\n    if (!entityLookup) {\n      throw new NotFoundError(`No entity found matching ${entity}`);\n    }\n\n    if (!path) {\n      throw new InputError('Need path query parameter');\n    }\n\n    const sourceLocation = getEntitySourceLocation(entityLookup);\n\n    if (!sourceLocation) {\n      throw new InputError(\n        `No \"backstage.io/source-location\" annotation on entity ${entity}`,\n      );\n    }\n\n    const vcs = scm.byUrl(sourceLocation.target);\n    if (!vcs) {\n      throw new InputError(`Unable to determine SCM from ${sourceLocation}`);\n    }\n\n    const scmTree = await urlReader.readTree(sourceLocation.target);\n    const scmFile = (await scmTree.files()).find(f => f.path === path);\n    if (!scmFile) {\n      res.status(404).json({\n        message: \"Couldn't find file in SCM\",\n        file: path,\n        scm: vcs.title,\n      });\n      return;\n    }\n    const content = await scmFile?.content();\n    if (!content) {\n      res.status(400).json({\n        message: \"Couldn't process content of file in SCM\",\n        file: path,\n        scm: vcs.title,\n      });\n      return;\n    }\n\n    const data = content.toString();\n    res.status(200).contentType('text/plain').send(data);\n  });\n\n  /**\n   * /report?entity=component:default/mycomponent&coverageType=cobertura\n   */\n  router.post('/report', async (req, res) => {\n    const { entity, coverageType } = req.query;\n    const entityLookup = await catalogApi.getEntityByRef(entity as string);\n    if (!entityLookup) {\n      throw new NotFoundError(`No entity found matching ${entity}`);\n    }\n\n    let converter: Converter;\n    if (!coverageType) {\n      throw new InputError('Need coverageType query parameter');\n    } else if (coverageType === 'jacoco') {\n      converter = new Jacoco(logger);\n    } else if (coverageType === 'cobertura') {\n      converter = new Cobertura(logger);\n    } else {\n      throw new InputError(`Unsupported coverage type '${coverageType}`);\n    }\n\n    const { sourceLocation, vcs, scmFiles, body } =\n      await utils.processCoveragePayload(entityLookup, req);\n\n    const files = converter.convert(body, scmFiles);\n    if (!files || files.length === 0) {\n      throw new InputError(`Unable to parse body as ${coverageType}`);\n    }\n\n    const coverage = await utils.buildCoverage(\n      entityLookup,\n      sourceLocation,\n      vcs,\n      files,\n    );\n    await codeCoverageDatabase.insertCodeCoverage(coverage);\n\n    res.status(201).json({\n      links: [\n        {\n          rel: 'coverage',\n          href: `${codecovUrl}/report?entity=${entity}`,\n        },\n      ],\n    });\n  });\n\n  router.use(errorHandler());\n  return router;\n};\n\nexport async function createRouter(\n  options: RouterOptions,\n): Promise<express.Router> {\n  const logger = options.logger;\n\n  logger.info('Initializing Code Coverage backend');\n\n  return makeRouter(options);\n}\n"],"names":["getEntitySourceLocation","InputError","stringifyEntityRef","NotFoundError","resolvePackagePath","uuid","parseEntityRef","CatalogClient","ScmIntegrations","Router","xmlparser","express","errorHandler"],"mappings":"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"}