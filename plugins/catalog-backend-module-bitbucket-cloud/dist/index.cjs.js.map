{"version":3,"file":"index.cjs.js","sources":["../src/BitbucketCloudEntityProviderConfig.ts","../src/BitbucketCloudEntityProvider.ts"],"sourcesContent":["/*\n * Copyright 2022 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Config } from '@backstage/config';\n\nconst DEFAULT_CATALOG_PATH = '/catalog-info.yaml';\nconst DEFAULT_PROVIDER_ID = 'default';\n\nexport type BitbucketCloudEntityProviderConfig = {\n  id: string;\n  catalogPath: string;\n  workspace: string;\n  filters?: {\n    projectKey?: RegExp;\n    repoSlug?: RegExp;\n  };\n};\n\nexport function readProviderConfigs(\n  config: Config,\n): BitbucketCloudEntityProviderConfig[] {\n  const providersConfig = config.getOptionalConfig(\n    'catalog.providers.bitbucketCloud',\n  );\n  if (!providersConfig) {\n    return [];\n  }\n\n  if (providersConfig.has('workspace')) {\n    // simple/single config variant\n    return [readProviderConfig(DEFAULT_PROVIDER_ID, providersConfig)];\n  }\n\n  return providersConfig.keys().map(id => {\n    const providerConfig = providersConfig.getConfig(id);\n\n    return readProviderConfig(id, providerConfig);\n  });\n}\n\nfunction readProviderConfig(\n  id: string,\n  config: Config,\n): BitbucketCloudEntityProviderConfig {\n  const workspace = config.getString('workspace');\n  const catalogPath =\n    config.getOptionalString('catalogPath') ?? DEFAULT_CATALOG_PATH;\n  const projectKeyPattern = config.getOptionalString('filters.projectKey');\n  const repoSlugPattern = config.getOptionalString('filters.repoSlug');\n\n  return {\n    id,\n    catalogPath,\n    workspace,\n    filters: {\n      projectKey: projectKeyPattern\n        ? compileRegExp(projectKeyPattern)\n        : undefined,\n      repoSlug: repoSlugPattern ? compileRegExp(repoSlugPattern) : undefined,\n    },\n  };\n}\n\n/**\n * Compiles a RegExp while enforcing the pattern to contain\n * the start-of-line and end-of-line anchors.\n *\n * @param pattern\n */\nfunction compileRegExp(pattern: string): RegExp {\n  let fullLinePattern = pattern;\n  if (!fullLinePattern.startsWith('^')) {\n    fullLinePattern = `^${fullLinePattern}`;\n  }\n  if (!fullLinePattern.endsWith('$')) {\n    fullLinePattern = `${fullLinePattern}$`;\n  }\n\n  return new RegExp(fullLinePattern);\n}\n","/*\n * Copyright 2022 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { TaskRunner } from '@backstage/backend-tasks';\nimport { Config } from '@backstage/config';\nimport {\n  BitbucketCloudIntegration,\n  ScmIntegrations,\n} from '@backstage/integration';\nimport {\n  BitbucketCloudClient,\n  Models,\n} from '@backstage/plugin-bitbucket-cloud-common';\nimport {\n  EntityProvider,\n  EntityProviderConnection,\n  LocationSpec,\n  locationSpecToLocationEntity,\n} from '@backstage/plugin-catalog-backend';\nimport {\n  BitbucketCloudEntityProviderConfig,\n  readProviderConfigs,\n} from './BitbucketCloudEntityProviderConfig';\nimport * as uuid from 'uuid';\nimport { Logger } from 'winston';\n\nconst DEFAULT_BRANCH = 'master';\n\n/**\n * Discovers catalog files located in [Bitbucket Cloud](https://bitbucket.org).\n * The provider will search your Bitbucket Cloud account and register catalog files matching the configured path\n * as Location entity and via following processing steps add all contained catalog entities.\n * This can be useful as an alternative to static locations or manually adding things to the catalog.\n *\n * @public\n */\nexport class BitbucketCloudEntityProvider implements EntityProvider {\n  private readonly client: BitbucketCloudClient;\n  private readonly config: BitbucketCloudEntityProviderConfig;\n  private readonly logger: Logger;\n  private readonly scheduleFn: () => Promise<void>;\n  private connection?: EntityProviderConnection;\n\n  static fromConfig(\n    config: Config,\n    options: {\n      logger: Logger;\n      schedule: TaskRunner;\n    },\n  ): BitbucketCloudEntityProvider[] {\n    const integrations = ScmIntegrations.fromConfig(config);\n    const integration = integrations.bitbucketCloud.byHost('bitbucket.org');\n    if (!integration) {\n      // this should never happen as we add a default integration,\n      // but as a general safeguard, e.g. if this approach gets changed\n      throw new Error('No integration for bitbucket.org available');\n    }\n\n    return readProviderConfigs(config).map(\n      providerConfig =>\n        new BitbucketCloudEntityProvider(\n          providerConfig,\n          integration,\n          options.logger,\n          options.schedule,\n        ),\n    );\n  }\n\n  private constructor(\n    config: BitbucketCloudEntityProviderConfig,\n    integration: BitbucketCloudIntegration,\n    logger: Logger,\n    schedule: TaskRunner,\n  ) {\n    this.client = BitbucketCloudClient.fromConfig(integration.config);\n    this.config = config;\n    this.logger = logger.child({\n      target: this.getProviderName(),\n    });\n    this.scheduleFn = this.createScheduleFn(schedule);\n  }\n\n  private createScheduleFn(schedule: TaskRunner): () => Promise<void> {\n    return async () => {\n      const taskId = this.getTaskId();\n      return schedule.run({\n        id: taskId,\n        fn: async () => {\n          const logger = this.logger.child({\n            class: BitbucketCloudEntityProvider.prototype.constructor.name,\n            taskId,\n            taskInstanceId: uuid.v4(),\n          });\n\n          try {\n            await this.refresh(logger);\n          } catch (error) {\n            logger.error(error);\n          }\n        },\n      });\n    };\n  }\n\n  /** {@inheritdoc @backstage/plugin-catalog-backend#EntityProvider.getProviderName} */\n  getProviderName(): string {\n    return `bitbucketCloud-provider:${this.config.id}`;\n  }\n\n  /** {@inheritdoc @backstage/plugin-catalog-backend#EntityProvider.getTaskId} */\n  getTaskId(): string {\n    return `${this.getProviderName()}:refresh`;\n  }\n\n  /** {@inheritdoc @backstage/plugin-catalog-backend#EntityProvider.connect} */\n  async connect(connection: EntityProviderConnection): Promise<void> {\n    this.connection = connection;\n    await this.scheduleFn();\n  }\n\n  async refresh(logger: Logger) {\n    if (!this.connection) {\n      throw new Error('Not initialized');\n    }\n\n    logger.info('Discovering catalog files in Bitbucket Cloud repositories');\n\n    const targets = await this.findCatalogFiles();\n    const entities = targets\n      .map(BitbucketCloudEntityProvider.toLocationSpec)\n      .map(location => locationSpecToLocationEntity({ location }))\n      .map(entity => {\n        return {\n          locationKey: this.getProviderName(),\n          entity: entity,\n        };\n      });\n\n    await this.connection.applyMutation({\n      type: 'full',\n      entities: entities,\n    });\n\n    logger.info(\n      `Committed ${entities.length} Locations for catalog files in Bitbucket Cloud repositories`,\n    );\n  }\n\n  private async findCatalogFiles(): Promise<string[]> {\n    const workspace = this.config.workspace;\n    const catalogPath = this.config.catalogPath;\n\n    const catalogFilename = catalogPath.substring(\n      catalogPath.lastIndexOf('/') + 1,\n    );\n\n    // load all fields relevant for creating refs later, but not more\n    const fields = [\n      // exclude code/content match details\n      '-values.content_matches',\n      // include/add relevant repository details\n      '+values.file.commit.repository.mainbranch.name',\n      '+values.file.commit.repository.project.key',\n      '+values.file.commit.repository.slug',\n      // remove irrelevant links\n      '-values.*.links',\n      '-values.*.*.links',\n      '-values.*.*.*.links',\n      // ...except the one we need\n      '+values.file.commit.repository.links.html.href',\n    ].join(',');\n    const query = `\"${catalogFilename}\" path:${catalogPath}`;\n    const searchResults = this.client\n      .searchCode(workspace, query, { fields })\n      .iterateResults();\n\n    const result: string[] = [];\n\n    for await (const searchResult of searchResults) {\n      // not a file match, but a code match\n      if (searchResult.path_matches!.length === 0) {\n        continue;\n      }\n\n      const repository = searchResult.file!.commit!.repository!;\n      if (this.matchesFilters(repository)) {\n        result.push(\n          BitbucketCloudEntityProvider.toUrl(\n            repository,\n            searchResult.file!.path!,\n          ),\n        );\n      }\n    }\n\n    return result;\n  }\n\n  private matchesFilters(repository: Models.Repository): boolean {\n    const filters = this.config.filters;\n    return (\n      !filters ||\n      ((!filters.projectKey ||\n        filters.projectKey.test(repository.project!.key!)) &&\n        (!filters.repoSlug || filters.repoSlug.test(repository.slug!)))\n    );\n  }\n\n  private static toUrl(\n    repository: Models.Repository,\n    filePath: string,\n  ): string {\n    const repoUrl = repository.links!.html!.href;\n    const branch = repository.mainbranch?.name ?? DEFAULT_BRANCH;\n\n    return `${repoUrl}/src/${branch}/${filePath}`;\n  }\n\n  private static toLocationSpec(target: string): LocationSpec {\n    return {\n      type: 'url',\n      target: target,\n      presence: 'required',\n    };\n  }\n}\n"],"names":["ScmIntegrations","integration","BitbucketCloudClient","uuid","locationSpecToLocationEntity"],"mappings":"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"}