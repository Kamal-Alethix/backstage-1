{"version":3,"file":"index.esm.js","sources":["../src/api/utils.ts","../src/api/gitlab.ts"],"sourcesContent":["/*\n * Copyright 2022 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  Build,\n  FilterStatusType,\n  TriggerReason,\n  Stage,\n} from '@backstage/plugin-cicd-statistics';\nimport { Types } from '@gitbeaker/core';\n\nconst statusMap: Record<string, FilterStatusType> = {\n  manual: 'unknown',\n  created: 'enqueued',\n  waiting_for_resource: 'stalled',\n  preparing: 'unknown',\n  pending: 'scheduled',\n  running: 'running',\n  success: 'succeeded',\n  failed: 'failed',\n  canceled: 'aborted',\n  skipped: 'aborted',\n  scheduled: 'scheduled',\n};\n\n// all gitlab trigger reasons can be found here: https://docs.gitlab.com/ee/api/pipelines.html#list-project-pipelines\nconst triggerReasonMap: Record<string, TriggerReason> = {\n  push: 'scm',\n  trigger: 'manual',\n  merge_request_event: 'scm',\n  schedule: 'internal',\n};\n\n/**\n * Takes the Pipeline object from Gitlab and transforms it to the Build object\n *\n * @param pipelines - Pipeline object that gets returned from Gitlab\n *\n * @public\n */\nexport function pipelinesToBuilds(\n  pipelines: Array<Types.PipelineSchema>,\n): Build[] {\n  return pipelines.map(pipeline => {\n    return {\n      id: pipeline.id.toString(),\n      status: statusMap[pipeline.status],\n      branchType: 'master',\n      duration: 0, // will get filled in later in a seperate API call\n      requestedAt: new Date(pipeline.created_at),\n      triggeredBy: triggerReasonMap[pipeline.source as string] ?? 'other',\n      stages: [],\n    };\n  });\n}\n\n/**\n * Takes the Job object from Gitlab and transforms it to the Stage object\n *\n * @param jobs - Job object that gets returned from Gitlab\n *\n * @public\n *\n * @remarks\n *\n * The Gitlab API can only return the job (sub-stage) of a pipeline and not a whole stage\n * The job does return from which stage it is\n * So, for the stage name we use the parent stage name and in the sub-stages we add the current job\n * In the end the cicd-statistics plugin will calculate the right durations for each stage\n *\n * Furthermore, we don't add the job to the sub-stage if it is has the same name as the parent stage\n * We then assume that the stage has no sub-stages\n */\nexport function jobsToStages(jobs: Array<Types.JobSchema>): Stage[] {\n  return jobs.map(job => {\n    const status = statusMap[job.status] ? statusMap[job.status] : 'unknown';\n    const duration = job.duration ? ((job.duration * 1000) as number) : 0;\n    return {\n      name: job.stage,\n      status,\n      duration,\n      stages:\n        job.name !== job.stage\n          ? [\n              {\n                name: job.name,\n                status,\n                duration,\n              },\n            ]\n          : [],\n    };\n  });\n}\n","/*\n * Copyright 2022 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  CicdStatisticsApi,\n  CicdState,\n  CicdConfiguration,\n  Build,\n  FetchBuildsOptions,\n  Stage,\n} from '@backstage/plugin-cicd-statistics';\nimport { Gitlab } from '@gitbeaker/browser';\nimport { OAuthApi } from '@backstage/core-plugin-api';\nimport limiterFactory from 'p-limit';\nimport { Entity, getEntitySourceLocation } from '@backstage/catalog-model';\nimport { pipelinesToBuilds, jobsToStages } from './utils';\n\n/**\n * This type represents a initialized gitlab client with gitbeaker\n *\n * @public\n */\nexport type GitlabClient = {\n  /* the actual API of gitbeaker */\n  api: InstanceType<typeof Gitlab>;\n  /* the owner the repository, retrieved from the entity source location  */\n  owner: string;\n};\n\n/**\n * Extracts the CI/CD statistics from a Gitlab repository\n *\n * @public\n */\nexport class CicdStatisticsApiGitlab implements CicdStatisticsApi {\n  readonly #gitLabAuthApi: OAuthApi;\n\n  constructor(gitLabAuthApi: OAuthApi) {\n    this.#gitLabAuthApi = gitLabAuthApi;\n  }\n\n  public async createGitlabApi(\n    entity: Entity,\n    scopes: string[],\n  ): Promise<GitlabClient> {\n    const entityInfo = getEntitySourceLocation(entity);\n    const url = new URL(entityInfo.target);\n    const owner = url.pathname.split('/-/blob/')[0];\n    const oauthToken = await this.#gitLabAuthApi.getAccessToken(scopes);\n    return {\n      api: new Gitlab({\n        host: `https://${url.host}`,\n        oauthToken,\n      }),\n      owner: owner.substring(1),\n    };\n  }\n\n  private static async updateBuildWithStages(\n    gitbeaker: InstanceType<typeof Gitlab>,\n    owner: string,\n    build: Build,\n  ): Promise<Stage[]> {\n    const jobs = await gitbeaker.Jobs.showPipelineJobs(\n      owner,\n      parseInt(build.id, 10),\n    );\n    const stages = jobsToStages(jobs);\n    return stages;\n  }\n\n  private static async getDurationOfBuild(\n    gitbeaker: InstanceType<typeof Gitlab>,\n    owner: string,\n    build: Build,\n  ): Promise<number> {\n    const pipeline = await gitbeaker.Pipelines.show(\n      owner,\n      parseInt(build.id, 10),\n    );\n    return parseInt(pipeline.duration as string, 10) * 1000;\n  }\n\n  private static async getDefaultBranch(\n    gitbeaker: InstanceType<typeof Gitlab>,\n    owner: string,\n  ): Promise<string | undefined> {\n    const branches = await gitbeaker.Branches.all(owner);\n    return branches.find(branch => branch.default)?.name;\n  }\n\n  public async fetchBuilds(options: FetchBuildsOptions): Promise<CicdState> {\n    const {\n      entity,\n      updateProgress,\n      timeFrom,\n      timeTo,\n      filterStatus = ['all'],\n      filterType = 'all',\n    } = options;\n    const { api, owner } = await this.createGitlabApi(entity, ['read_api']);\n    updateProgress(0, 0, 0);\n\n    const branch =\n      filterType === 'master'\n        ? await CicdStatisticsApiGitlab.getDefaultBranch(api, owner)\n        : undefined;\n    const pipelines = await api.Pipelines.all(owner, {\n      perPage: 25,\n      updated_after: timeFrom.toISOString(),\n      updated_before: timeTo.toISOString(),\n      ref: branch,\n    });\n\n    const limiter = limiterFactory(10);\n    const builds = pipelinesToBuilds(pipelines).map(async build => ({\n      ...build,\n      duration: await limiter(() =>\n        CicdStatisticsApiGitlab.getDurationOfBuild(api, owner, build),\n      ),\n      stages: await limiter(() =>\n        CicdStatisticsApiGitlab.updateBuildWithStages(api, owner, build),\n      ),\n    }));\n    const promisedBuilds = (await Promise.all(builds)).filter(b =>\n      filterStatus.includes(b.status),\n    );\n\n    return { builds: promisedBuilds };\n  }\n\n  public async getConfiguration(): Promise<Partial<CicdConfiguration>> {\n    return {\n      availableStatuses: [\n        'succeeded',\n        'failed',\n        'enqueued',\n        'running',\n        'aborted',\n        'stalled',\n        'expired',\n        'unknown',\n      ] as const,\n    };\n  }\n}\n"],"names":[],"mappings":"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"}