{"version":3,"file":"index.cjs.js","sources":["../src/service/CheckRegistry.ts","../src/constants.ts","../src/service/JsonRulesEngineFactChecker.ts"],"sourcesContent":["/*\n * Copyright 2021 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { ConflictError, NotFoundError } from '@backstage/errors';\nimport {\n  TechInsightCheck,\n  TechInsightCheckRegistry,\n} from '@backstage/plugin-tech-insights-node';\n\nexport class DefaultCheckRegistry<CheckType extends TechInsightCheck>\n  implements TechInsightCheckRegistry<CheckType>\n{\n  private readonly checks = new Map<string, CheckType>();\n\n  constructor(checks: CheckType[]) {\n    checks.forEach(check => {\n      this.register(check);\n    });\n  }\n\n  async register(check: CheckType): Promise<CheckType> {\n    if (this.checks.has(check.id)) {\n      throw new ConflictError(\n        `Tech insight check with id ${check.id} has already been registered`,\n      );\n    }\n    this.checks.set(check.id, check);\n    return check;\n  }\n\n  async get(checkId: string): Promise<CheckType> {\n    const check = this.checks.get(checkId);\n    if (!check) {\n      throw new NotFoundError(\n        `Tech insight check with id '${checkId}' is not registered.`,\n      );\n    }\n    return check;\n  }\n  async getAll(checks: string[]): Promise<CheckType[]> {\n    return Promise.all(checks.map(checkId => this.get(checkId)));\n  }\n\n  async list(): Promise<CheckType[]> {\n    return [...this.checks.values()];\n  }\n}\n","/*\n * Copyright 2021 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @public\n */\nexport const JSON_RULE_ENGINE_CHECK_TYPE = 'json-rules-engine';\n","/*\n * Copyright 2021 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { JsonRuleBooleanCheckResult, TechInsightJsonRuleCheck } from '../types';\nimport {\n  FactChecker,\n  TechInsightCheckRegistry,\n  FlatTechInsightFact,\n  TechInsightsStore,\n  CheckValidationResponse,\n} from '@backstage/plugin-tech-insights-node';\nimport { FactResponse } from '@backstage/plugin-tech-insights-common';\nimport {\n  Engine,\n  EngineResult,\n  Operator,\n  TopLevelCondition,\n} from 'json-rules-engine';\nimport { DefaultCheckRegistry } from './CheckRegistry';\nimport { Logger } from 'winston';\nimport { pick } from 'lodash';\nimport Ajv, { SchemaObject } from 'ajv';\nimport * as validationSchema from './validation-schema.json';\nimport { JSON_RULE_ENGINE_CHECK_TYPE } from '../constants';\nimport { isError } from '@backstage/errors';\n\nconst noopEvent = {\n  type: 'noop',\n};\n\n/**\n * @public\n * Should actually be at-internal\n *\n * Constructor options for JsonRulesEngineFactChecker\n */\nexport type JsonRulesEngineFactCheckerOptions = {\n  checks: TechInsightJsonRuleCheck[];\n  repository: TechInsightsStore;\n  logger: Logger;\n  checkRegistry?: TechInsightCheckRegistry<any>;\n  operators?: Operator[];\n};\n\n/**\n * @public\n * Should actually be at-internal\n *\n * FactChecker implementation using json-rules-engine\n */\nexport class JsonRulesEngineFactChecker\n  implements FactChecker<TechInsightJsonRuleCheck, JsonRuleBooleanCheckResult>\n{\n  private readonly checkRegistry: TechInsightCheckRegistry<TechInsightJsonRuleCheck>;\n  private repository: TechInsightsStore;\n  private readonly logger: Logger;\n  private readonly validationSchema: SchemaObject;\n  private readonly operators: Operator[];\n\n  constructor({\n    checks,\n    repository,\n    logger,\n    checkRegistry,\n    operators,\n  }: JsonRulesEngineFactCheckerOptions) {\n    this.repository = repository;\n    this.logger = logger;\n    this.operators = operators || [];\n    this.validationSchema = JSON.parse(JSON.stringify(validationSchema));\n\n    this.operators.forEach(op => {\n      this.validationSchema.definitions.condition.properties.operator.anyOf.push(\n        { const: op.name },\n      );\n    });\n\n    checks.forEach(check => this.validate(check));\n    this.checkRegistry =\n      checkRegistry ??\n      new DefaultCheckRegistry<TechInsightJsonRuleCheck>(checks);\n  }\n\n  async runChecks(\n    entity: string,\n    checks?: string[],\n  ): Promise<JsonRuleBooleanCheckResult[]> {\n    const engine = new Engine();\n    this.operators.forEach(op => {\n      engine.addOperator(op);\n    });\n\n    const techInsightChecks = checks\n      ? await this.checkRegistry.getAll(checks)\n      : await this.checkRegistry.list();\n    const factIds = techInsightChecks.flatMap(it => it.factIds);\n    const facts = await this.repository.getLatestFactsByIds(factIds, entity);\n    techInsightChecks.forEach(techInsightCheck => {\n      const rule = techInsightCheck.rule;\n      rule.name = techInsightCheck.id;\n      // Only run checks that have all the facts available:\n      const hasAllFacts = techInsightCheck.factIds.every(\n        factId => facts[factId],\n      );\n      if (hasAllFacts) {\n        engine.addRule({ ...techInsightCheck.rule, event: noopEvent });\n      } else {\n        this.logger.debug(\n          `Skipping ${\n            rule.name\n          } due to missing facts: ${techInsightCheck.factIds\n            .filter(factId => !facts[factId])\n            .join(', ')}`,\n        );\n      }\n    });\n    const factValues = Object.values(facts).reduce(\n      (acc, it) => ({ ...acc, ...it.facts }),\n      {},\n    );\n\n    try {\n      const results = await engine.run(factValues);\n      return await this.ruleEngineResultsToCheckResponse(\n        results,\n        techInsightChecks,\n        Object.values(facts),\n      );\n    } catch (e) {\n      if (isError(e)) {\n        throw new Error(`Failed to run rules engine, ${e.message}`);\n      }\n      throw e;\n    }\n  }\n\n  async validate(\n    check: TechInsightJsonRuleCheck,\n  ): Promise<CheckValidationResponse> {\n    const ajv = new Ajv({ verbose: true });\n    const validator = ajv.compile(this.validationSchema);\n    const isValidToSchema = validator(check.rule);\n    if (check.type !== JSON_RULE_ENGINE_CHECK_TYPE) {\n      const msg = `Only ${JSON_RULE_ENGINE_CHECK_TYPE} checks can be registered to this fact checker`;\n      this.logger.warn(msg);\n      return {\n        valid: false,\n        message: msg,\n      };\n    }\n    if (!isValidToSchema) {\n      const msg = 'Failed to to validate conditions against JSON schema';\n      this.logger.warn(\n        'Failed to to validate conditions against JSON schema',\n        validator.errors,\n      );\n      return {\n        valid: false,\n        message: msg,\n        errors: validator.errors ? validator.errors : undefined,\n      };\n    }\n\n    const existingSchemas = await this.repository.getLatestSchemas(\n      check.factIds,\n    );\n    const references = this.retrieveIndividualFactReferences(\n      check.rule.conditions,\n    );\n    const results = references.map(ref => ({\n      ref,\n      result: existingSchemas.some(schema => schema.hasOwnProperty(ref)),\n    }));\n    const failedReferences = results.filter(it => !it.result);\n    failedReferences.forEach(it => {\n      this.logger.warn(\n        `Validation failed for check ${check.name}. Reference to value ${\n          it.ref\n        } does not exists in referred fact schemas: ${check.factIds.join(',')}`,\n      );\n    });\n    const valid = failedReferences.length === 0;\n    return {\n      valid,\n      ...(!valid\n        ? {\n            message: `Check is referencing missing values from fact schemas: ${failedReferences\n              .map(it => it.ref)\n              .join(',')}`,\n          }\n        : {}),\n    };\n  }\n\n  getChecks(): Promise<TechInsightJsonRuleCheck[]> {\n    return this.checkRegistry.list();\n  }\n\n  private retrieveIndividualFactReferences(\n    condition: TopLevelCondition | { fact: string },\n  ): string[] {\n    let results: string[] = [];\n    if ('all' in condition) {\n      results = results.concat(\n        condition.all.flatMap(con =>\n          this.retrieveIndividualFactReferences(con),\n        ),\n      );\n    } else if ('any' in condition) {\n      results = results.concat(\n        condition.any.flatMap(con =>\n          this.retrieveIndividualFactReferences(con),\n        ),\n      );\n    } else {\n      results.push(condition.fact);\n    }\n    return results;\n  }\n\n  private async ruleEngineResultsToCheckResponse(\n    results: EngineResult,\n    techInsightChecks: TechInsightJsonRuleCheck[],\n    facts: FlatTechInsightFact[],\n  ) {\n    return await Promise.all(\n      [\n        ...(results.results && results.results),\n        ...(results.failureResults && results.failureResults),\n      ].map(async result => {\n        const techInsightCheck = techInsightChecks.find(\n          check => check.id === result.name,\n        );\n        if (!techInsightCheck) {\n          // This should never happen, we just constructed these based on each other\n          throw new Error(\n            `Failed to determine tech insight check with id ${result.name}. Discrepancy between ran rule engine and configured checks.`,\n          );\n        }\n        const factResponse = await this.constructFactInformationResponse(\n          facts,\n          techInsightCheck,\n        );\n        return {\n          facts: factResponse,\n          result: result.result,\n          check: JsonRulesEngineFactChecker.constructCheckResponse(\n            techInsightCheck,\n            result,\n          ),\n        };\n      }),\n    );\n  }\n\n  private static constructCheckResponse(\n    techInsightCheck: TechInsightJsonRuleCheck,\n    result: any,\n  ) {\n    const returnable = {\n      id: techInsightCheck.id,\n      type: techInsightCheck.type,\n      name: techInsightCheck.name,\n      description: techInsightCheck.description,\n      factIds: techInsightCheck.factIds,\n      metadata: result.result\n        ? techInsightCheck.successMetadata\n        : techInsightCheck.failureMetadata,\n      rule: { conditions: {} },\n    };\n\n    if ('toJSON' in result) {\n      // Results from json-rules-engine serialize \"wrong\" since the objects are creating their own serialization implementations.\n      // 'toJSON' should always be present in the result object but it is missing from the types.\n      // Parsing the stringified representation into a plain object here to be able to serialize it later\n      // along with other items present in the returned response.\n      const rule = JSON.parse(result.toJSON());\n      return { ...returnable, rule: pick(rule, ['conditions']) };\n    }\n    return returnable;\n  }\n\n  private async constructFactInformationResponse(\n    facts: FlatTechInsightFact[],\n    techInsightCheck: TechInsightJsonRuleCheck,\n  ): Promise<FactResponse> {\n    const factSchemas = await this.repository.getLatestSchemas(\n      techInsightCheck.factIds,\n    );\n    const schemas = factSchemas.reduce(\n      (acc, schema) => ({ ...acc, ...schema }),\n      {},\n    );\n    const individualFacts = this.retrieveIndividualFactReferences(\n      techInsightCheck.rule.conditions,\n    );\n    const factValues = facts\n      .filter(factContainer =>\n        techInsightCheck.factIds.includes(factContainer.id),\n      )\n      .reduce(\n        (acc, factContainer) => ({\n          ...acc,\n          ...pick(factContainer.facts, individualFacts),\n        }),\n        {},\n      );\n    return Object.entries(factValues).reduce((acc, [key, value]) => {\n      return {\n        ...acc,\n        [key]: {\n          value,\n          ...schemas[key],\n        },\n      };\n    }, {});\n  }\n}\n\n/**\n * @public\n *\n * Constructor options for JsonRulesEngineFactCheckerFactory\n *\n * Implementation of checkRegistry is optional.\n * If there is a need to use persistent storage for checks, it is recommended to inject a storage implementation here.\n * Otherwise an in-memory option is instantiated and used.\n */\nexport type JsonRulesEngineFactCheckerFactoryOptions = {\n  checks: TechInsightJsonRuleCheck[];\n  logger: Logger;\n  checkRegistry?: TechInsightCheckRegistry<TechInsightJsonRuleCheck>;\n  operators?: Operator[];\n};\n\n/**\n * @public\n *\n * Factory to construct JsonRulesEngineFactChecker\n * Can be constructed with optional implementation of CheckInsightCheckRegistry if needed.\n * Otherwise defaults to using in-memory CheckRegistry\n */\nexport class JsonRulesEngineFactCheckerFactory {\n  private readonly checks: TechInsightJsonRuleCheck[];\n  private readonly logger: Logger;\n  private readonly checkRegistry?: TechInsightCheckRegistry<TechInsightJsonRuleCheck>;\n  private readonly operators?: Operator[];\n\n  constructor({\n    checks,\n    logger,\n    checkRegistry,\n    operators,\n  }: JsonRulesEngineFactCheckerFactoryOptions) {\n    this.logger = logger;\n    this.checks = checks;\n    this.checkRegistry = checkRegistry;\n    this.operators = operators;\n  }\n\n  /**\n   * @param repository - Implementation of TechInsightsStore. Used by the returned JsonRulesEngineFactChecker\n   *                     to retrieve fact and fact schema data\n   * @returns JsonRulesEngineFactChecker implementation\n   */\n  construct(repository: TechInsightsStore) {\n    return new JsonRulesEngineFactChecker({\n      checks: this.checks,\n      logger: this.logger,\n      checkRegistry: this.checkRegistry,\n      repository,\n      operators: this.operators,\n    });\n  }\n}\n"],"names":["ConflictError","NotFoundError","validationSchema","Engine","isError","Ajv","pick"],"mappings":"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"}