{"version":3,"file":"index.esm.js","sources":["../src/plugin.ts","../src/util/DeferredCapture.ts","../src/apis/implementations/AnalyticsApi/GoogleAnalytics.ts"],"sourcesContent":["/*\n * Copyright 2021 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { createPlugin } from '@backstage/core-plugin-api';\n\n/**\n * @deprecated Importing and including this plugin in an app has no effect.\n * This will be removed in a future release.\n *\n * @public\n */\nexport const analyticsModuleGA = createPlugin({\n  id: 'analytics-provider-ga',\n});\n","/*\n * Copyright 2022 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport ReactGA from 'react-ga';\n\ntype Hit = {\n  timestamp: number;\n  data: {\n    hitType: 'pageview' | 'event';\n    [x: string]: any;\n  };\n};\n\n/**\n * A wrapper around ReactGA that can optionally handle latent capture logic.\n *\n * - When defer is `false`, event data is sent directly to GA.\n * - When defer is `true`, event data is queued (with a timestamp), so that it\n *   can be sent to GA once externally indicated to be ready. This relies on\n *   the `qt` or `queueTime` parameter of the Measurement Protocol.\n *\n * @see https://developers.google.com/analytics/devguides/collection/protocol/v1/parameters#qt\n */\nexport class DeferredCapture {\n  /**\n   * Queue of deferred hits to be processed when ready. When undefined, hits\n   * can safely be sent without delay.\n   */\n  private queue: Hit[] | undefined;\n\n  constructor({ defer = false }: { defer: boolean }) {\n    this.queue = defer ? [] : undefined;\n  }\n\n  /**\n   * Indicates that deferred capture may now proceed.\n   */\n  setReady() {\n    if (this.queue) {\n      this.queue.forEach(this.sendDeferred);\n      this.queue = undefined;\n    }\n  }\n\n  /**\n   * Either forwards the pageview directly to GA, or (if configured) enqueues\n   * the pageview hit to be captured when ready.\n   */\n  pageview(path: string, metadata: ReactGA.FieldsObject = {}) {\n    if (this.queue) {\n      this.queue.push({\n        timestamp: Date.now(),\n        data: {\n          hitType: 'pageview',\n          page: path,\n          ...metadata,\n        },\n      });\n      return;\n    }\n\n    ReactGA.send({\n      hitType: 'pageview',\n      page: path,\n      ...metadata,\n    });\n  }\n\n  /**\n   * Either forwards the event directly to GA, or (if configured) enqueues the\n   * event hit to be captured when ready.\n   */\n  event(eventDetails: ReactGA.EventArgs) {\n    if (this.queue) {\n      this.queue.push({\n        timestamp: Date.now(),\n        data: {\n          ...eventDetails,\n          hitType: 'event',\n        },\n      });\n      return;\n    }\n\n    ReactGA.event(eventDetails);\n  }\n\n  /**\n   * Sends a given hit to GA, decorated with the correct queue time.\n   */\n  private sendDeferred(hit: Hit) {\n    // Send the hit with the appropriate queue time (`qt`).\n    ReactGA.send({\n      ...hit.data,\n      queueTime: Date.now() - hit.timestamp,\n    });\n  }\n}\n","/*\n * Copyright 2021 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport ReactGA from 'react-ga';\nimport {\n  AnalyticsApi,\n  AnalyticsContextValue,\n  AnalyticsEventAttributes,\n  AnalyticsEvent,\n  IdentityApi,\n} from '@backstage/core-plugin-api';\nimport { Config } from '@backstage/config';\nimport { DeferredCapture } from '../../../util';\n\ntype CustomDimensionOrMetricConfig = {\n  type: 'dimension' | 'metric';\n  index: number;\n  source: 'context' | 'attributes';\n  key: string;\n};\n\n/**\n * Google Analytics API provider for the Backstage Analytics API.\n * @public\n */\nexport class GoogleAnalytics implements AnalyticsApi {\n  private readonly cdmConfig: CustomDimensionOrMetricConfig[];\n  private customUserIdTransform?: (userEntityRef: string) => Promise<string>;\n  private readonly capture: DeferredCapture;\n\n  /**\n   * Instantiate the implementation and initialize ReactGA.\n   */\n  private constructor(options: {\n    identityApi?: IdentityApi;\n    userIdTransform?: 'sha-256' | ((userEntityRef: string) => Promise<string>);\n    cdmConfig: CustomDimensionOrMetricConfig[];\n    identity: string;\n    trackingId: string;\n    scriptSrc?: string;\n    testMode: boolean;\n    debug: boolean;\n  }) {\n    const {\n      cdmConfig,\n      identity,\n      trackingId,\n      identityApi,\n      userIdTransform = 'sha-256',\n      scriptSrc,\n      testMode,\n      debug,\n    } = options;\n\n    this.cdmConfig = cdmConfig;\n\n    // Initialize Google Analytics.\n    ReactGA.initialize(trackingId, {\n      testMode,\n      debug,\n      gaAddress: scriptSrc,\n      titleCase: false,\n    });\n\n    // If identity is required, defer event capture until identity is known.\n    this.capture = new DeferredCapture({ defer: identity === 'required' });\n\n    // Allow custom userId transformation.\n    this.customUserIdTransform =\n      typeof userIdTransform === 'function' ? userIdTransform : undefined;\n\n    // Capture user only when explicitly enabled and provided.\n    if (identity !== 'disabled' && identityApi) {\n      this.setUserFrom(identityApi);\n    }\n  }\n\n  /**\n   * Instantiate a fully configured GA Analytics API implementation.\n   */\n  static fromConfig(\n    config: Config,\n    options: {\n      identityApi?: IdentityApi;\n      userIdTransform?:\n        | 'sha-256'\n        | ((userEntityRef: string) => Promise<string>);\n    } = {},\n  ) {\n    // Get all necessary configuration.\n    const trackingId = config.getString('app.analytics.ga.trackingId');\n    const scriptSrc = config.getOptionalString('app.analytics.ga.scriptSrc');\n    const identity =\n      config.getOptionalString('app.analytics.ga.identity') || 'disabled';\n    const debug = config.getOptionalBoolean('app.analytics.ga.debug') ?? false;\n    const testMode =\n      config.getOptionalBoolean('app.analytics.ga.testMode') ?? false;\n    const cdmConfig =\n      config\n        .getOptionalConfigArray('app.analytics.ga.customDimensionsMetrics')\n        ?.map(c => {\n          return {\n            type: c.getString('type') as CustomDimensionOrMetricConfig['type'],\n            index: c.getNumber('index'),\n            source: c.getString(\n              'source',\n            ) as CustomDimensionOrMetricConfig['source'],\n            key: c.getString('key'),\n          };\n        }) ?? [];\n\n    if (identity === 'required' && !options.identityApi) {\n      throw new Error(\n        'Invalid config: identity API must be provided to deps when ga.identity is required',\n      );\n    }\n\n    // Return an implementation instance.\n    return new GoogleAnalytics({\n      ...options,\n      identity,\n      trackingId,\n      scriptSrc,\n      cdmConfig,\n      testMode,\n      debug,\n    });\n  }\n\n  /**\n   * Primary event capture implementation. Handles core navigate event as a\n   * pageview and the rest as custom events. All custom dimensions/metrics are\n   * applied as they should be (set on pageview, merged object on events).\n   */\n  captureEvent(event: AnalyticsEvent) {\n    const { context, action, subject, value, attributes } = event;\n    const customMetadata = this.getCustomDimensionMetrics(context, attributes);\n\n    if (action === 'navigate' && context.extension === 'App') {\n      this.capture.pageview(subject, customMetadata);\n      return;\n    }\n\n    this.capture.event({\n      category: context.extension || 'App',\n      action,\n      label: subject,\n      value,\n      ...customMetadata,\n    });\n  }\n\n  /**\n   * Returns an object of dimensions/metrics given an Analytics Context and an\n   * Event Attributes, e.g. { dimension1: \"some value\", metric8: 42 }\n   */\n  private getCustomDimensionMetrics(\n    context: AnalyticsContextValue,\n    attributes: AnalyticsEventAttributes = {},\n  ) {\n    const customDimensionsMetrics: { [x: string]: string | number | boolean } =\n      {};\n\n    this.cdmConfig.forEach(config => {\n      const value =\n        config.source === 'context'\n          ? context[config.key]\n          : attributes[config.key];\n\n      // Never pass a non-numeric value on a metric.\n      if (config.type === 'metric' && typeof value !== 'number') {\n        return;\n      }\n\n      // Only set defined values.\n      if (value !== undefined) {\n        customDimensionsMetrics[`${config.type}${config.index}`] = value;\n      }\n    });\n\n    return customDimensionsMetrics;\n  }\n\n  /**\n   * Sets the GA userId, based on the `userEntityRef` set on the backstage\n   * identity loaded from a given Backstage Identity API instance. Because\n   * Google forbids sending any PII (including on the userId field), we hash\n   * the entire `userEntityRef` on behalf of integrators:\n   *\n   * - With value `User:default/name`, userId becomes `sha256(User:default/name)`\n   *\n   * If an integrator wishes to use an alternative hashing mechanism or an\n   * entirely different value, they may do so by passing a `userIdTransform`\n   * function alongside the `identityApi` to `GoogleAnalytics.fromConfig()`.\n   * This function receives the `userEntityRef` as an argument and should\n   * resolve to a hashed version of whatever identifier they choose.\n   *\n   * Note: this feature requires that an integrator has set up a Google\n   * Analytics User ID view in the property used to track Backstage.\n   */\n  private async setUserFrom(identityApi: IdentityApi) {\n    const { userEntityRef } = await identityApi.getBackstageIdentity();\n\n    // Prevent PII from being passed to Google Analytics.\n    const userId = await this.getPrivateUserId(userEntityRef);\n\n    // Set the user ID.\n    ReactGA.set({ userId });\n\n    // Notify the deferred capture mechanism that it may proceed.\n    this.capture.setReady();\n  }\n\n  /**\n   * Returns a PII-free (according to Google's terms of service) user ID for\n   * use in Google Analytics.\n   */\n  private getPrivateUserId(userEntityRef: string): Promise<string> {\n    // Allow integrators to provide their own hashing transformer.\n    if (this.customUserIdTransform) {\n      return this.customUserIdTransform(userEntityRef);\n    }\n\n    return this.hash(userEntityRef);\n  }\n\n  /**\n   * Simple hash function; relies on web cryptography + the sha-256 algorithm.\n   */\n  private async hash(value: string): Promise<string> {\n    const digest = await crypto.subtle.digest(\n      'sha-256',\n      new TextEncoder().encode(value),\n    );\n    const hashArray = Array.from(new Uint8Array(digest));\n    return hashArray.map(b => b.toString(16).padStart(2, '0')).join('');\n  }\n}\n"],"names":[],"mappings":"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"}