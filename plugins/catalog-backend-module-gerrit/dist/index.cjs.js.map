{"version":3,"file":"index.cjs.js","sources":["../src/providers/config.ts","../src/providers/GerritEntityProvider.ts"],"sourcesContent":["/*\n * Copyright 2022 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Config } from '@backstage/config';\nimport { GerritProviderConfig } from './types';\n\nfunction readGerritConfig(id: string, config: Config): GerritProviderConfig {\n  const branch = config.getOptionalString('branch') ?? 'master';\n  const host = config.getString('host');\n  const query = config.getString('query');\n\n  return {\n    branch,\n    host,\n    id,\n    query,\n  };\n}\n\nexport function readGerritConfigs(config: Config): GerritProviderConfig[] {\n  const configs: GerritProviderConfig[] = [];\n\n  const providerConfigs = config.getOptionalConfig('catalog.providers.gerrit');\n\n  if (!providerConfigs) {\n    return configs;\n  }\n\n  for (const id of providerConfigs.keys()) {\n    configs.push(readGerritConfig(id, providerConfigs.getConfig(id)));\n  }\n\n  return configs;\n}\n","/*\n * Copyright 2022 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { TaskRunner } from '@backstage/backend-tasks';\nimport { Config } from '@backstage/config';\nimport { InputError } from '@backstage/errors';\nimport {\n  EntityProvider,\n  EntityProviderConnection,\n  LocationSpec,\n  locationSpecToLocationEntity,\n} from '@backstage/plugin-catalog-backend';\nimport fetch, { Response } from 'node-fetch';\nimport {\n  GerritIntegration,\n  getGerritProjectsApiUrl,\n  getGerritRequestOptions,\n  parseGerritJsonResponse,\n  ScmIntegrations,\n} from '@backstage/integration';\nimport * as uuid from 'uuid';\nimport { Logger } from 'winston';\n\nimport { readGerritConfigs } from './config';\nimport { GerritProjectQueryResult, GerritProviderConfig } from './types';\n\n/** @public */\nexport class GerritEntityProvider implements EntityProvider {\n  private readonly config: GerritProviderConfig;\n  private readonly integration: GerritIntegration;\n  private readonly logger: Logger;\n  private readonly scheduleFn: () => Promise<void>;\n  private connection?: EntityProviderConnection;\n\n  static fromConfig(\n    configRoot: Config,\n    options: {\n      logger: Logger;\n      schedule: TaskRunner;\n    },\n  ): GerritEntityProvider[] {\n    const providerConfigs = readGerritConfigs(configRoot);\n    const integrations = ScmIntegrations.fromConfig(configRoot).gerrit;\n    const providers: GerritEntityProvider[] = [];\n\n    providerConfigs.forEach(providerConfig => {\n      const integration = integrations.byHost(providerConfig.host);\n      if (!integration) {\n        throw new InputError(\n          `No gerrit integration found that matches host ${providerConfig.host}`,\n        );\n      }\n      providers.push(\n        new GerritEntityProvider(\n          providerConfig,\n          integration,\n          options.logger,\n          options.schedule,\n        ),\n      );\n    });\n    return providers;\n  }\n\n  private constructor(\n    config: GerritProviderConfig,\n    integration: GerritIntegration,\n    logger: Logger,\n    schedule: TaskRunner,\n  ) {\n    this.config = config;\n    this.integration = integration;\n    this.logger = logger.child({\n      target: this.getProviderName(),\n    });\n    this.scheduleFn = this.createScheduleFn(schedule);\n  }\n\n  getProviderName(): string {\n    return `gerrit-provider:${this.config.id}`;\n  }\n\n  async connect(connection: EntityProviderConnection): Promise<void> {\n    this.connection = connection;\n    await this.scheduleFn();\n  }\n\n  private createScheduleFn(schedule: TaskRunner): () => Promise<void> {\n    return async () => {\n      const taskId = `${this.getProviderName()}:refresh`;\n      return schedule.run({\n        id: taskId,\n        fn: async () => {\n          const logger = this.logger.child({\n            class: GerritEntityProvider.prototype.constructor.name,\n            taskId,\n            taskInstanceId: uuid.v4(),\n          });\n\n          try {\n            await this.refresh(logger);\n          } catch (error) {\n            logger.error(error);\n          }\n        },\n      });\n    };\n  }\n\n  async refresh(logger: Logger): Promise<void> {\n    if (!this.connection) {\n      throw new Error('Gerrit discovery connection not initialized');\n    }\n\n    let response: Response;\n\n    const baseProjectApiUrl = getGerritProjectsApiUrl(this.integration.config);\n    const projectQueryUrl = `${baseProjectApiUrl}?${this.config.query}`;\n    try {\n      response = await fetch(projectQueryUrl, {\n        method: 'GET',\n        ...getGerritRequestOptions(this.integration.config),\n      });\n    } catch (e) {\n      throw new Error(\n        `Failed to list Gerrit projects for query ${this.config.query}, ${e}`,\n      );\n    }\n    const gerritProjectsResponse = (await parseGerritJsonResponse(\n      response as any,\n    )) as GerritProjectQueryResult;\n    const projects = Object.keys(gerritProjectsResponse);\n\n    const locations = projects.map(project => this.createLocationSpec(project));\n    await this.connection.applyMutation({\n      type: 'full',\n      entities: locations.map(location => ({\n        locationKey: this.getProviderName(),\n        entity: locationSpecToLocationEntity({ location }),\n      })),\n    });\n    logger.info(`Found ${locations.length} locations.`);\n  }\n\n  private createLocationSpec(project: string): LocationSpec {\n    return {\n      type: 'url',\n      target: `${this.integration.config.gitilesBaseUrl}/${project}/+/refs/heads/${this.config.branch}/catalog-info.yaml`,\n      presence: 'optional',\n    };\n  }\n}\n"],"names":["ScmIntegrations","InputError","uuid","getGerritProjectsApiUrl","fetch","getGerritRequestOptions","parseGerritJsonResponse","locationSpecToLocationEntity"],"mappings":"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"}