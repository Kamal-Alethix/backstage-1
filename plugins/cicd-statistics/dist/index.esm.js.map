{"version":3,"file":"index.esm.js","sources":["../src/plugin.ts","../src/apis/types.ts","../src/apis/cicd-statistics.ts"],"sourcesContent":["/*\n * Copyright 2022 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  createPlugin,\n  createRoutableExtension,\n  createRouteRef,\n} from '@backstage/core-plugin-api';\n\nexport type { EntityPageCicdCharts } from './entity-page';\n\nconst rootCatalogCicdStatsRouteRef = createRouteRef({\n  id: 'cicd-statistics',\n});\n\nexport const cicdStatisticsPlugin = createPlugin({\n  id: 'cicd-statistics',\n  routes: {\n    entityContent: rootCatalogCicdStatsRouteRef,\n  },\n});\n\nexport const EntityCicdStatisticsContent = cicdStatisticsPlugin.provide(\n  createRoutableExtension({\n    component: () => import('./entity-page').then(m => m.EntityPageCicdCharts),\n    mountPoint: rootCatalogCicdStatsRouteRef,\n    name: 'EntityCicdStatisticsContent',\n  }),\n);\n","/*\n * Copyright 2022 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Entity } from '@backstage/catalog-model';\n\n/**\n * This is a generic enum of build statuses.\n *\n * If all of these aren't applicable to the underlying CI/CD, these can be\n * configured to be hidden, using the `availableStatuses` in `CicdConfiguration`.\n */\nexport type FilterStatusType =\n  | 'unknown'\n  | 'enqueued'\n  | 'scheduled'\n  | 'running'\n  | 'aborted'\n  | 'succeeded'\n  | 'failed'\n  | 'stalled'\n  | 'expired';\nexport const statusTypes: Array<FilterStatusType> = [\n  'succeeded',\n  'failed',\n  'enqueued',\n  'scheduled',\n  'running',\n  'aborted',\n  'stalled',\n  'expired',\n  'unknown',\n];\n\n/**\n * The branch enum of either 'master' or 'branch' (or possibly the meta 'all').\n *\n * The concept of what constitutes a master branch is generic. It might be called\n * something like 'release' or 'main' or 'trunk' in the underlying CI/CD system,\n * which is then up to the Api to map accordingly.\n */\nexport type FilterBranchType = 'master' | 'branch';\n\nexport type TriggerReason =\n  /** Triggered by source code management, e.g. a Github hook */\n  | 'scm'\n  /** Triggered manually */\n  | 'manual'\n  /** Triggered internally (non-scm, or perhaps after being delayed/enqueued) */\n  | 'internal'\n  /** Triggered for some other reason */\n  | 'other';\n\nexport const triggerReasons: Array<TriggerReason> = [\n  'scm',\n  'manual',\n  'internal',\n  'other',\n];\n\n/**\n * A Stage is a part of either a Build or a parent Stage.\n *\n * This may be called things like Stage or Step or Task in CI/CD systems, but is\n * generic here. There's also no concept of parallelism which might exist within\n * some stages.\n */\nexport interface Stage {\n  name: string;\n\n  /** The status of the stage */\n  status: FilterStatusType;\n\n  /** Stage duration in milliseconds */\n  duration: number;\n\n  /** Sub stages within this stage */\n  stages?: Array<Stage>;\n}\n\n/**\n * Generic Build type.\n *\n * A build has e.g. a build type (master/branch), a status and (possibly) sub stages.\n */\nexport interface Build {\n  raw?: unknown;\n\n  /** Build id */\n  id: string;\n\n  /** The reason this build was started */\n  triggeredBy?: TriggerReason;\n\n  /** The status of the build */\n  status: FilterStatusType;\n\n  /** Branch type */\n  branchType: FilterBranchType;\n\n  /** Time when the build started */\n  requestedAt: Date;\n\n  /** The overall duration of the build */\n  duration: number;\n\n  /** Top-level build stages */\n  stages: Array<Stage>;\n}\n\n/**\n * Helper type which is a Build with a certain typed 'raw' field.\n *\n * This can be useful in an Api to use while mapping internal data structures\n * (raw) into generic builds.\n */\nexport type BuildWithRaw<T = any> = Build & {\n  raw: T;\n};\n\n/**\n * Chart type.\n *\n * Values are:\n *  * `duration`: shows an area chart of the duration over time\n *  * `count`: shows a bar chart of the number of build per day\n */\nexport type ChartType = 'duration' | 'count';\nexport type ChartTypes = Array<ChartType>;\n\n/**\n * Default settings for the fetching options and view options.\n *\n * These are all optional, but can be overridden from the Api to whatever makes\n * most sense for that implementation.\n */\nexport interface CicdDefaults {\n  timeFrom: Date;\n  timeTo: Date;\n  filterStatus: Array<FilterStatusType>;\n  filterType: FilterBranchType | 'all';\n\n  /** Lower-case all stage names (to potentially merge stages with different cases) */\n  lowercaseNames: boolean;\n  /** Normalize the from-to date range in all charts */\n  normalizeTimeRange: boolean;\n  /** Default collapse the stages with a max-duration below this value */\n  collapsedLimit: number;\n  /** Default hide stages with a max-duration below this value */\n  hideLimit: number;\n  /** Chart types per status */\n  chartTypes: Record<FilterStatusType, ChartTypes>;\n}\n\n/**\n * A configuration interface which the Api must implement.\n *\n * When the UI for the CI/CD Statistics is loaded, it begins with fetching the\n * configuration before anything else.\n *\n * All of these fields are optional though, and will fallback to hard-coded defaults.\n */\nexport interface CicdConfiguration {\n  /**\n   * This field can be used to override what statuses are available\n   */\n  availableStatuses: ReadonlyArray<FilterStatusType>;\n\n  /**\n   * When transposing the list of builds into a tree of stages, the stage names\n   * will be transformed through this function.\n   *\n   * Override this for a custom implementation. The default will try to remove\n   * parent names off of child names, if they are prepended by them.\n   *\n   * For example; if a stage has the name 'Install' and a child stage has the\n   * name 'Install - Fetch dependencies', the child name will be replaced with\n   * 'Fetch dependencies'.\n   */\n  formatStageName: (parentNames: Array<string>, stageName: string) => string;\n\n  /**\n   * Default options for the UI\n   */\n  defaults: Partial<CicdDefaults>;\n}\n\n/**\n * If the Api implements support for aborting the fetching of builds, throw an\n * AbortError of this type (or any other error with name === 'AbortError').\n */\nexport class AbortError extends Error {}\n\n/**\n * The result type for `fetchBuilds`.\n */\nexport interface CicdState {\n  builds: Array<Build>;\n}\n\n/**\n * When fetching, if applicable, the Api can feedback progress back to the UI.\n *\n * Use the `updateProgress(completed, total, started?)` to signal that\n * `completed` builds out of a `total` has finished. Optionally use the\n * `started` to signal how many builds have been started in total (i.e. at least\n * the amount of `completed`).\n *\n * This can be called at any rate. Rate limiting (debouncing) is implemented in\n * the UI.\n *\n * Optionally this can signal multiple progresses in several steps\n */\nexport interface UpdateProgress {\n  (completed: number, total: number, started?: number): void;\n  (\n    steps: Array<{\n      title: string;\n      completed: number;\n      total: number;\n      started?: number;\n    }>,\n  ): void;\n}\n\n/**\n * When reading configuration, the Api can return a custom settings depending on\n * the entity being viewed.\n */\nexport interface GetConfigurationOptions {\n  entity: Entity;\n}\n\n/**\n * When fetching, the Api should fetch build information about the `entity` and\n * respect the `timeFrom`, `timeTo`, `filterStatus` and `filterType`.\n *\n * Optionally implement support for `updateProgress` and `abortSignal` if\n * preferred.\n *\n * When the UI re-fetches, it will abort any previous fetching, so polling\n * `abortSignal.aborted`, and possibly throwing an `AbortError`, can be useful.\n */\nexport interface FetchBuildsOptions {\n  entity: Entity;\n  updateProgress: UpdateProgress;\n  abortSignal: AbortSignal;\n  timeFrom: Date;\n  timeTo: Date;\n  filterStatus: Array<FilterStatusType | 'all'>;\n  filterType: FilterBranchType | 'all';\n}\n\n/**\n * The interface which is mapped to the `cicdStatisticsApiRef` which is used by\n * the UI.\n */\nexport interface CicdStatisticsApi {\n  getConfiguration(\n    options: GetConfigurationOptions,\n  ): Promise<Partial<CicdConfiguration>>;\n  fetchBuilds(options: FetchBuildsOptions): Promise<CicdState>;\n}\n","/*\n * Copyright 2022 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { createApiRef } from '@backstage/core-plugin-api';\n\nimport { CicdStatisticsApi } from './types';\n\nexport const cicdStatisticsApiRef = createApiRef<CicdStatisticsApi>({\n  id: 'cicd-statistics-api',\n});\n"],"names":[],"mappings":";;AAKA,MAAM,4BAA4B,GAAG,cAAc,CAAC;AACpD,EAAE,EAAE,EAAE,iBAAiB;AACvB,CAAC,CAAC,CAAC;AACS,MAAC,oBAAoB,GAAG,YAAY,CAAC;AACjD,EAAE,EAAE,EAAE,iBAAiB;AACvB,EAAE,MAAM,EAAE;AACV,IAAI,aAAa,EAAE,4BAA4B;AAC/C,GAAG;AACH,CAAC,EAAE;AACS,MAAC,2BAA2B,GAAG,oBAAoB,CAAC,OAAO,CAAC,uBAAuB,CAAC;AAChG,EAAE,SAAS,EAAE,MAAM,OAAO,mCAAe,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,oBAAoB,CAAC;AAC9E,EAAE,UAAU,EAAE,4BAA4B;AAC1C,EAAE,IAAI,EAAE,6BAA6B;AACrC,CAAC,CAAC;;AClBU,MAAC,WAAW,GAAG;AAC3B,EAAE,WAAW;AACb,EAAE,QAAQ;AACV,EAAE,UAAU;AACZ,EAAE,WAAW;AACb,EAAE,SAAS;AACX,EAAE,SAAS;AACX,EAAE,SAAS;AACX,EAAE,SAAS;AACX,EAAE,SAAS;AACX,EAAE;AACU,MAAC,cAAc,GAAG;AAC9B,EAAE,KAAK;AACP,EAAE,QAAQ;AACV,EAAE,UAAU;AACZ,EAAE,OAAO;AACT,EAAE;AACK,MAAM,UAAU,SAAS,KAAK,CAAC;AACtC;;ACjBY,MAAC,oBAAoB,GAAG,YAAY,CAAC;AACjD,EAAE,EAAE,EAAE,qBAAqB;AAC3B,CAAC;;;;"}