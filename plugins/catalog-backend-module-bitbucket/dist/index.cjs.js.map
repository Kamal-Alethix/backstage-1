{"version":3,"file":"index.cjs.js","sources":["../src/lib/BitbucketRepositoryParser.ts","../src/lib/BitbucketServerClient.ts","../src/BitbucketDiscoveryProcessor.ts"],"sourcesContent":["/*\n * Copyright 2021 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { BitbucketIntegration } from '@backstage/integration';\nimport {\n  CatalogProcessorResult,\n  processingResult,\n} from '@backstage/plugin-catalog-backend';\nimport { Logger } from 'winston';\n\n/**\n * A custom callback that reacts to finding a repository by yielding processing\n * results.\n *\n * @public\n */\nexport type BitbucketRepositoryParser = (options: {\n  integration: BitbucketIntegration;\n  target: string;\n  presence?: 'optional' | 'required';\n  logger: Logger;\n}) => AsyncIterable<CatalogProcessorResult>;\n\nexport const defaultRepositoryParser =\n  async function* defaultRepositoryParser(options: {\n    target: string;\n    presence?: 'optional' | 'required';\n  }) {\n    yield processingResult.location({\n      type: 'url',\n      target: options.target,\n      // Not all locations may actually exist, since the user defined them as a wildcard pattern.\n      // Thus, we emit them as optional and let the downstream processor find them while not outputting\n      // an error if it couldn't.\n      presence: options.presence ?? 'optional',\n    });\n  };\n","/*\n * Copyright 2021 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  BitbucketIntegrationConfig,\n  getBitbucketRequestOptions,\n} from '@backstage/integration';\nimport fetch from 'node-fetch';\n\nexport class BitbucketServerClient {\n  private readonly config: BitbucketIntegrationConfig;\n\n  constructor(options: { config: BitbucketIntegrationConfig }) {\n    this.config = options.config;\n  }\n\n  async listProjects(options?: ListOptions): Promise<PagedResponse<any>> {\n    return this.pagedRequest(`${this.config.apiBaseUrl}/projects`, options);\n  }\n\n  async listRepositories(\n    projectKey: string,\n    options?: ListOptions,\n  ): Promise<PagedResponse<any>> {\n    return this.pagedRequest(\n      `${this.config.apiBaseUrl}/projects/${encodeURIComponent(\n        projectKey,\n      )}/repos`,\n      options,\n    );\n  }\n\n  private async pagedRequest(\n    endpoint: string,\n    options?: ListOptions,\n  ): Promise<PagedResponse<any>> {\n    const request = new URL(endpoint);\n    for (const key in options) {\n      if (options[key]) {\n        request.searchParams.append(key, options[key]!.toString());\n      }\n    }\n\n    const response = await fetch(\n      request.toString(),\n      getBitbucketRequestOptions(this.config),\n    );\n    if (!response.ok) {\n      throw new Error(\n        `Unexpected response when fetching ${request.toString()}. Expected 200 but got ${\n          response.status\n        } - ${response.statusText}`,\n      );\n    }\n    return response.json() as Promise<PagedResponse<any>>;\n  }\n}\n\nexport type ListOptions = {\n  [key: string]: number | undefined;\n  limit?: number | undefined;\n  start?: number | undefined;\n};\n\nexport type PagedResponse<T> = {\n  size: number;\n  limit: number;\n  start: number;\n  isLastPage: boolean;\n  values: T[];\n  nextPageStart: number;\n};\n\nexport async function* paginated(\n  request: (options: ListOptions) => Promise<PagedResponse<any>>,\n  options?: ListOptions,\n) {\n  const opts = options || { start: 0 };\n  let res;\n  do {\n    res = await request(opts);\n    opts.start = res.nextPageStart;\n    for (const item of res.values) {\n      yield item;\n    }\n  } while (!res.isLastPage);\n}\n","/*\n * Copyright 2021 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Config } from '@backstage/config';\nimport {\n  BitbucketIntegration,\n  ScmIntegrationRegistry,\n  ScmIntegrations,\n} from '@backstage/integration';\nimport {\n  BitbucketCloudClient,\n  Models,\n} from '@backstage/plugin-bitbucket-cloud-common';\nimport {\n  CatalogProcessor,\n  CatalogProcessorEmit,\n  LocationSpec,\n} from '@backstage/plugin-catalog-backend';\nimport { Logger } from 'winston';\nimport {\n  BitbucketRepository,\n  BitbucketRepositoryParser,\n  BitbucketServerClient,\n  defaultRepositoryParser,\n  paginated,\n} from './lib';\n\nconst DEFAULT_BRANCH = 'master';\nconst DEFAULT_CATALOG_LOCATION = '/catalog-info.yaml';\n\n/** @public */\nexport class BitbucketDiscoveryProcessor implements CatalogProcessor {\n  private readonly integrations: ScmIntegrationRegistry;\n  private readonly parser: BitbucketRepositoryParser;\n  private readonly logger: Logger;\n\n  static fromConfig(\n    config: Config,\n    options: {\n      parser?: BitbucketRepositoryParser;\n      logger: Logger;\n    },\n  ) {\n    const integrations = ScmIntegrations.fromConfig(config);\n\n    return new BitbucketDiscoveryProcessor({\n      ...options,\n      integrations,\n    });\n  }\n\n  constructor(options: {\n    integrations: ScmIntegrationRegistry;\n    parser?: BitbucketRepositoryParser;\n    logger: Logger;\n  }) {\n    this.integrations = options.integrations;\n    this.parser = options.parser || defaultRepositoryParser;\n    this.logger = options.logger;\n  }\n\n  getProcessorName(): string {\n    return 'BitbucketDiscoveryProcessor';\n  }\n\n  async readLocation(\n    location: LocationSpec,\n    _optional: boolean,\n    emit: CatalogProcessorEmit,\n  ): Promise<boolean> {\n    if (location.type !== 'bitbucket-discovery') {\n      return false;\n    }\n\n    const integration = this.integrations.bitbucket.byUrl(location.target);\n    if (!integration) {\n      throw new Error(\n        `There is no Bitbucket integration that matches ${location.target}. Please add a configuration entry for it under integrations.bitbucket`,\n      );\n    }\n\n    const startTimestamp = Date.now();\n    this.logger.info(\n      `Reading ${integration.config.host} repositories from ${location.target}`,\n    );\n\n    const processOptions: ProcessOptions = {\n      emit,\n      integration,\n      location,\n    };\n\n    const isBitbucketCloud = integration.config.host === 'bitbucket.org';\n    const { scanned, matches } = isBitbucketCloud\n      ? await this.processCloudRepositories(processOptions)\n      : await this.processOrganizationRepositories(processOptions);\n\n    const duration = ((Date.now() - startTimestamp) / 1000).toFixed(1);\n    this.logger.debug(\n      `Read ${scanned} ${integration.config.host} repositories (${matches} matching the pattern) in ${duration} seconds`,\n    );\n\n    return true;\n  }\n\n  private async processCloudRepositories(\n    options: ProcessOptions,\n  ): Promise<ResultSummary> {\n    const { location, integration, emit } = options;\n    const client = BitbucketCloudClient.fromConfig(integration.config);\n\n    const { searchEnabled } = parseBitbucketCloudUrl(location.target);\n\n    const result = searchEnabled\n      ? await searchBitbucketCloudLocations(client, location.target)\n      : await readBitbucketCloudLocations(client, location.target);\n\n    for (const locationTarget of result.matches) {\n      for await (const entity of this.parser({\n        integration,\n        target: locationTarget,\n        presence: searchEnabled ? 'required' : 'optional',\n        logger: this.logger,\n      })) {\n        emit(entity);\n      }\n    }\n    return {\n      matches: result.matches.length,\n      scanned: result.scanned,\n    };\n  }\n\n  private async processOrganizationRepositories(\n    options: ProcessOptions,\n  ): Promise<ResultSummary> {\n    const { location, integration, emit } = options;\n    const { catalogPath: requestedCatalogPath } = parseUrl(location.target);\n    const catalogPath = requestedCatalogPath\n      ? `/${requestedCatalogPath}`\n      : DEFAULT_CATALOG_LOCATION;\n\n    const client = new BitbucketServerClient({\n      config: integration.config,\n    });\n\n    const result = await readBitbucketOrg(client, location.target);\n    for (const repository of result.matches) {\n      for await (const entity of this.parser({\n        integration,\n        target: `${repository.links.self[0].href}${catalogPath}`,\n        logger: this.logger,\n      })) {\n        emit(entity);\n      }\n    }\n    return {\n      matches: result.matches.length,\n      scanned: result.scanned,\n    };\n  }\n}\n\nexport async function readBitbucketOrg(\n  client: BitbucketServerClient,\n  target: string,\n): Promise<Result<BitbucketRepository>> {\n  const { projectSearchPath, repoSearchPath } = parseUrl(target);\n  const projects = paginated(options => client.listProjects(options));\n  const result: Result<BitbucketRepository> = {\n    scanned: 0,\n    matches: [],\n  };\n\n  for await (const project of projects) {\n    if (!projectSearchPath.test(project.key)) {\n      continue;\n    }\n    const repositories = paginated(options =>\n      client.listRepositories(project.key, options),\n    );\n    for await (const repository of repositories) {\n      result.scanned++;\n      if (repoSearchPath.test(repository.slug)) {\n        result.matches.push(repository);\n      }\n    }\n  }\n  return result;\n}\n\nexport async function searchBitbucketCloudLocations(\n  client: BitbucketCloudClient,\n  target: string,\n): Promise<Result<string>> {\n  const {\n    workspacePath,\n    catalogPath: requestedCatalogPath,\n    projectSearchPath,\n    repoSearchPath,\n  } = parseBitbucketCloudUrl(target);\n\n  const result: Result<string> = {\n    scanned: 0,\n    matches: [],\n  };\n\n  const catalogPath = requestedCatalogPath\n    ? requestedCatalogPath\n    : DEFAULT_CATALOG_LOCATION;\n  const catalogFilename = catalogPath.substring(\n    catalogPath.lastIndexOf('/') + 1,\n  );\n\n  // load all fields relevant for creating refs later, but not more\n  const fields = [\n    // exclude code/content match details\n    '-values.content_matches',\n    // include/add relevant repository details\n    '+values.file.commit.repository.mainbranch.name',\n    '+values.file.commit.repository.project.key',\n    '+values.file.commit.repository.slug',\n    // remove irrelevant links\n    '-values.*.links',\n    '-values.*.*.links',\n    '-values.*.*.*.links',\n    // ...except the one we need\n    '+values.file.commit.repository.links.html.href',\n  ].join(',');\n  const query = `\"${catalogFilename}\" path:${catalogPath}`;\n  const searchResults = client\n    .searchCode(workspacePath, query, { fields })\n    .iterateResults();\n\n  for await (const searchResult of searchResults) {\n    // not a file match, but a code match\n    if (searchResult.path_matches!.length === 0) {\n      continue;\n    }\n\n    const repository = searchResult.file!.commit!.repository!;\n    if (!matchesPostFilters(repository, projectSearchPath, repoSearchPath)) {\n      continue;\n    }\n\n    const repoUrl = repository.links!.html!.href;\n    const branch = repository.mainbranch?.name ?? DEFAULT_BRANCH;\n    const filePath = searchResult.file!.path;\n    const location = `${repoUrl}/src/${branch}/${filePath}`;\n\n    result.matches.push(location);\n  }\n\n  return result;\n}\n\nexport async function readBitbucketCloudLocations(\n  client: BitbucketCloudClient,\n  target: string,\n): Promise<Result<string>> {\n  const { catalogPath: requestedCatalogPath } = parseBitbucketCloudUrl(target);\n  const catalogPath = requestedCatalogPath\n    ? `/${requestedCatalogPath}`\n    : DEFAULT_CATALOG_LOCATION;\n\n  return readBitbucketCloud(client, target).then(result => {\n    const matches = result.matches.map(repository => {\n      const branch = repository.mainbranch?.name ?? DEFAULT_BRANCH;\n      return `${repository.links!.html!.href}/src/${branch}${catalogPath}`;\n    });\n\n    return {\n      scanned: result.scanned,\n      matches,\n    };\n  });\n}\n\nexport async function readBitbucketCloud(\n  client: BitbucketCloudClient,\n  target: string,\n): Promise<Result<Models.Repository>> {\n  const {\n    workspacePath,\n    queryParam: q,\n    projectSearchPath,\n    repoSearchPath,\n  } = parseBitbucketCloudUrl(target);\n\n  const repositories = client\n    .listRepositoriesByWorkspace(workspacePath, { q })\n    .iterateResults();\n  const result: Result<Models.Repository> = {\n    scanned: 0,\n    matches: [],\n  };\n\n  for await (const repository of repositories) {\n    result.scanned++;\n    if (matchesPostFilters(repository, projectSearchPath, repoSearchPath)) {\n      result.matches.push(repository);\n    }\n  }\n  return result;\n}\n\nfunction matchesPostFilters(\n  repository: Models.Repository,\n  projectSearchPath: RegExp | undefined,\n  repoSearchPath: RegExp | undefined,\n): boolean {\n  return (\n    (!projectSearchPath || projectSearchPath.test(repository.project!.key!)) &&\n    (!repoSearchPath || repoSearchPath.test(repository.slug!))\n  );\n}\n\nfunction parseUrl(urlString: string): {\n  projectSearchPath: RegExp;\n  repoSearchPath: RegExp;\n  catalogPath: string;\n} {\n  const url = new URL(urlString);\n  const indexOfProjectSegment =\n    url.pathname.toLowerCase().indexOf('/projects/') + 1;\n  const path = url.pathname.substr(indexOfProjectSegment).split('/');\n\n  // /projects/backstage/repos/techdocs-*/catalog-info.yaml\n  if (path.length > 3 && path[1].length && path[3].length) {\n    return {\n      projectSearchPath: escapeRegExp(decodeURIComponent(path[1])),\n      repoSearchPath: escapeRegExp(decodeURIComponent(path[3])),\n      catalogPath: decodeURIComponent(path.slice(4).join('/') + url.search),\n    };\n  }\n\n  throw new Error(`Failed to parse ${urlString}`);\n}\n\nfunction readPathParameters(pathParts: string[]): Map<string, string> {\n  const vals: Record<string, any> = {};\n  for (let i = 0; i + 1 < pathParts.length; i += 2) {\n    vals[pathParts[i]] = decodeURIComponent(pathParts[i + 1]);\n  }\n  return new Map<string, string>(Object.entries(vals));\n}\n\nfunction parseBitbucketCloudUrl(urlString: string): {\n  workspacePath: string;\n  catalogPath?: string;\n  projectSearchPath?: RegExp;\n  repoSearchPath?: RegExp;\n  queryParam?: string;\n  searchEnabled: boolean;\n} {\n  const url = new URL(urlString);\n  const pathMap = readPathParameters(url.pathname.substr(1).split('/'));\n  const query = url.searchParams;\n\n  if (!pathMap.has('workspaces')) {\n    throw new Error(`Failed to parse workspace from ${urlString}`);\n  }\n\n  return {\n    workspacePath: pathMap.get('workspaces')!,\n    projectSearchPath: pathMap.has('projects')\n      ? escapeRegExp(pathMap.get('projects')!)\n      : undefined,\n    repoSearchPath: pathMap.has('repos')\n      ? escapeRegExp(pathMap.get('repos')!)\n      : undefined,\n    catalogPath: query.get('catalogPath') || undefined,\n    queryParam: query.get('q') || undefined,\n    searchEnabled: query.get('search')?.toLowerCase() === 'true',\n  };\n}\n\nfunction escapeRegExp(str: string): RegExp {\n  return new RegExp(`^${str.replace(/\\*/g, '.*')}$`);\n}\n\ntype ProcessOptions = {\n  integration: BitbucketIntegration;\n  location: LocationSpec;\n  emit: CatalogProcessorEmit;\n};\n\ntype Result<T> = {\n  scanned: number;\n  matches: T[];\n};\n\ntype ResultSummary = {\n  scanned: number;\n  matches: number;\n};\n"],"names":["processingResult","fetch","getBitbucketRequestOptions","ScmIntegrations","BitbucketCloudClient"],"mappings":"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"}