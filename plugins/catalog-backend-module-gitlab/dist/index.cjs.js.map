{"version":3,"file":"index.cjs.js","sources":["../src/lib/client.ts","../src/GitLabDiscoveryProcessor.ts"],"sourcesContent":["/*\n * Copyright 2021 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport fetch from 'node-fetch';\nimport {\n  getGitLabRequestOptions,\n  GitLabIntegrationConfig,\n} from '@backstage/integration';\nimport { Logger } from 'winston';\n\nexport type ListOptions = {\n  [key: string]: string | number | boolean | undefined;\n  group?: string;\n  per_page?: number | undefined;\n  page?: number | undefined;\n};\n\nexport type PagedResponse<T> = {\n  items: T[];\n  nextPage?: number;\n};\n\nexport class GitLabClient {\n  private readonly config: GitLabIntegrationConfig;\n  private readonly logger: Logger;\n\n  constructor(options: { config: GitLabIntegrationConfig; logger: Logger }) {\n    this.config = options.config;\n    this.logger = options.logger;\n  }\n\n  /**\n   * Indicates whether the client is for a SaaS or self managed GitLab instance.\n   */\n  isSelfManaged(): boolean {\n    return this.config.host !== 'gitlab.com';\n  }\n\n  async listProjects(options?: ListOptions): Promise<PagedResponse<any>> {\n    if (options?.group) {\n      return this.pagedRequest(\n        `/groups/${encodeURIComponent(options?.group)}/projects`,\n        {\n          ...options,\n          include_subgroups: true,\n        },\n      );\n    }\n\n    return this.pagedRequest(`/projects`, options);\n  }\n\n  async hasFile(\n    projectPath: string,\n    branch: string,\n    filePath: string,\n  ): Promise<boolean> {\n    const endpoint: string = `/projects/${encodeURIComponent(\n      projectPath,\n    )}/repository/files/${encodeURIComponent(filePath)}`;\n    const request = new URL(`${this.config.apiBaseUrl}${endpoint}`);\n    request.searchParams.append('ref', branch);\n\n    const response = await fetch(request.toString(), {\n      headers: getGitLabRequestOptions(this.config).headers,\n      method: 'HEAD',\n    });\n\n    if (!response.ok) {\n      if (response.status >= 500) {\n        this.logger.debug(\n          `Unexpected response when fetching ${request.toString()}. Expected 200 but got ${\n            response.status\n          } - ${response.statusText}`,\n        );\n      }\n      return false;\n    }\n\n    return true;\n  }\n\n  /**\n   * Performs a request against a given paginated GitLab endpoint.\n   *\n   * This method may be used to perform authenticated REST calls against any\n   * paginated GitLab endpoint which uses X-NEXT-PAGE headers. The return value\n   * can be be used with the {@link paginated} async-generator function to yield\n   * each item from the paged request.\n   *\n   * @see {@link paginated}\n   * @param endpoint - The request endpoint, e.g. /projects.\n   * @param options - Request queryString options which may also include page variables.\n   */\n  async pagedRequest<T = any>(\n    endpoint: string,\n    options?: ListOptions,\n  ): Promise<PagedResponse<T>> {\n    const request = new URL(`${this.config.apiBaseUrl}${endpoint}`);\n    for (const key in options) {\n      if (options[key]) {\n        request.searchParams.append(key, options[key]!.toString());\n      }\n    }\n\n    this.logger.debug(`Fetching: ${request.toString()}`);\n    const response = await fetch(\n      request.toString(),\n      getGitLabRequestOptions(this.config),\n    );\n    if (!response.ok) {\n      throw new Error(\n        `Unexpected response when fetching ${request.toString()}. Expected 200 but got ${\n          response.status\n        } - ${response.statusText}`,\n      );\n    }\n    return response.json().then(items => {\n      const nextPage = response.headers.get('x-next-page');\n\n      return {\n        items,\n        nextPage: nextPage ? Number(nextPage) : null,\n      } as PagedResponse<any>;\n    });\n  }\n}\n\n/**\n * Advances through each page and provides each item from a paginated request.\n *\n * The async generator function yields each item from repeated calls to the\n * provided request function. The generator walks through each available page by\n * setting the page key in the options passed into the request function and\n * making repeated calls until there are no more pages.\n *\n * @see {@link pagedRequest}\n * @param request - Function which returns a PagedResponse to walk through.\n * @param options - Initial ListOptions for the request function.\n */\nexport async function* paginated<T = any>(\n  request: (options: ListOptions) => Promise<PagedResponse<T>>,\n  options: ListOptions,\n) {\n  let res;\n  do {\n    res = await request(options);\n    options.page = res.nextPage;\n    for (const item of res.items) {\n      yield item;\n    }\n  } while (res.nextPage);\n}\n","/*\n * Copyright 2021 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  CacheClient,\n  CacheManager,\n  PluginCacheManager,\n} from '@backstage/backend-common';\nimport { Config } from '@backstage/config';\nimport {\n  ScmIntegrationRegistry,\n  ScmIntegrations,\n} from '@backstage/integration';\nimport {\n  CatalogProcessor,\n  CatalogProcessorEmit,\n  LocationSpec,\n  processingResult,\n} from '@backstage/plugin-catalog-backend';\nimport { Logger } from 'winston';\nimport { GitLabClient, GitLabProject, paginated } from './lib';\n\n/**\n * Extracts repositories out of an GitLab instance.\n * @public\n */\nexport class GitLabDiscoveryProcessor implements CatalogProcessor {\n  private readonly integrations: ScmIntegrationRegistry;\n  private readonly logger: Logger;\n  private readonly cache: CacheClient;\n  private readonly skipReposWithoutExactFileMatch: boolean;\n\n  static fromConfig(\n    config: Config,\n    options: { logger: Logger; skipReposWithoutExactFileMatch?: boolean },\n  ): GitLabDiscoveryProcessor {\n    const integrations = ScmIntegrations.fromConfig(config);\n    const pluginCache =\n      CacheManager.fromConfig(config).forPlugin('gitlab-discovery');\n\n    return new GitLabDiscoveryProcessor({\n      ...options,\n      integrations,\n      pluginCache,\n    });\n  }\n\n  private constructor(options: {\n    integrations: ScmIntegrationRegistry;\n    pluginCache: PluginCacheManager;\n    logger: Logger;\n    skipReposWithoutExactFileMatch?: boolean;\n  }) {\n    this.integrations = options.integrations;\n    this.cache = options.pluginCache.getClient();\n    this.logger = options.logger;\n    this.skipReposWithoutExactFileMatch =\n      options.skipReposWithoutExactFileMatch || false;\n  }\n\n  getProcessorName(): string {\n    return 'GitLabDiscoveryProcessor';\n  }\n\n  async readLocation(\n    location: LocationSpec,\n    _optional: boolean,\n    emit: CatalogProcessorEmit,\n  ): Promise<boolean> {\n    if (location.type !== 'gitlab-discovery') {\n      return false;\n    }\n\n    const { group, host, branch, catalogPath } = parseUrl(location.target);\n\n    const integration = this.integrations.gitlab.byUrl(`https://${host}`);\n    if (!integration) {\n      throw new Error(\n        `There is no GitLab integration that matches ${host}. Please add a configuration entry for it under integrations.gitlab`,\n      );\n    }\n\n    const client = new GitLabClient({\n      config: integration.config,\n      logger: this.logger,\n    });\n    const startTimestamp = Date.now();\n    this.logger.debug(`Reading GitLab projects from ${location.target}`);\n\n    const projects = paginated(options => client.listProjects(options), {\n      group,\n      last_activity_after: await this.updateLastActivity(),\n      page: 1,\n    });\n\n    const res: Result = {\n      scanned: 0,\n      matches: [],\n    };\n    for await (const project of projects) {\n      res.scanned++;\n\n      if (project.archived) {\n        continue;\n      }\n\n      if (branch === '*' && project.default_branch === undefined) {\n        continue;\n      }\n\n      if (this.skipReposWithoutExactFileMatch) {\n        const project_branch = branch === '*' ? project.default_branch : branch;\n\n        const projectHasFile: boolean = await client.hasFile(\n          project.path_with_namespace,\n          project_branch,\n          catalogPath,\n        );\n\n        if (!projectHasFile) {\n          continue;\n        }\n      }\n\n      res.matches.push(project);\n    }\n\n    for (const project of res.matches) {\n      const project_branch = branch === '*' ? project.default_branch : branch;\n\n      emit(\n        processingResult.location({\n          type: 'url',\n          // The format expected by the GitLabUrlReader:\n          // https://gitlab.com/groupA/teams/teamA/subgroupA/repoA/-/blob/branch/filepath\n          //\n          // This unfortunately will trigger another API call in `getGitLabFileFetchUrl` to get the project ID.\n          // The alternative is using the `buildRawUrl` function, which does not support subgroups, so providing a raw\n          // URL here won't work either.\n          target: `${project.web_url}/-/blob/${project_branch}/${catalogPath}`,\n          presence: 'optional',\n        }),\n      );\n    }\n\n    const duration = ((Date.now() - startTimestamp) / 1000).toFixed(1);\n    this.logger.debug(\n      `Read ${res.scanned} GitLab repositories in ${duration} seconds`,\n    );\n\n    return true;\n  }\n\n  private async updateLastActivity(): Promise<string | undefined> {\n    const cacheKey = `processors/${this.getProcessorName()}/last-activity`;\n    const lastActivity = await this.cache.get(cacheKey);\n    await this.cache.set(cacheKey, new Date().toISOString());\n    return lastActivity as string | undefined;\n  }\n}\n\ntype Result = {\n  scanned: number;\n  matches: GitLabProject[];\n};\n\n/*\n * Helpers\n */\n\nexport function parseUrl(urlString: string): {\n  group?: string;\n  host: string;\n  branch: string;\n  catalogPath: string;\n} {\n  const url = new URL(urlString);\n  const path = url.pathname.substr(1).split('/');\n\n  // (/group/subgroup)/blob/branch|*/filepath\n  const blobIndex = path.findIndex(p => p === 'blob');\n  if (blobIndex !== -1 && path.length > blobIndex + 2) {\n    const group =\n      blobIndex > 0 ? path.slice(0, blobIndex).join('/') : undefined;\n\n    return {\n      group,\n      host: url.host,\n      branch: decodeURIComponent(path[blobIndex + 1]),\n      catalogPath: decodeURIComponent(path.slice(blobIndex + 2).join('/')),\n    };\n  }\n\n  throw new Error(`Failed to parse ${urlString}`);\n}\n"],"names":["fetch","getGitLabRequestOptions","ScmIntegrations","CacheManager","processingResult"],"mappings":"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"}