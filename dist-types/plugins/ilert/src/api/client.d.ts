import { AlertSource, EscalationPolicy, Incident, IncidentAction, IncidentResponder, OnCall, Schedule, UptimeMonitor, User } from '../types';
import { ILertApi, GetIncidentsOpts, GetIncidentsCountOpts, Options, EventRequest } from './types';
import { ConfigApi, DiscoveryApi } from '@backstage/core-plugin-api';
export declare const ilertApiRef: import("@backstage/core-plugin-api").ApiRef<ILertApi>;
export declare class ILertClient implements ILertApi {
    private readonly discoveryApi;
    private readonly proxyPath;
    private readonly baseUrl;
    static fromConfig(configApi: ConfigApi, discoveryApi: DiscoveryApi): ILertClient;
    constructor(opts: Options);
    private fetch;
    fetchIncidents(opts?: GetIncidentsOpts): Promise<Incident[]>;
    fetchIncidentsCount(opts?: GetIncidentsCountOpts): Promise<number>;
    fetchIncident(id: number): Promise<Incident>;
    fetchIncidentResponders(incident: Incident): Promise<IncidentResponder[]>;
    fetchIncidentActions(incident: Incident): Promise<IncidentAction[]>;
    acceptIncident(incident: Incident, userName: string): Promise<Incident>;
    resolveIncident(incident: Incident, userName: string): Promise<Incident>;
    assignIncident(incident: Incident, responder: IncidentResponder): Promise<Incident>;
    triggerIncidentAction(incident: Incident, action: IncidentAction): Promise<void>;
    createIncident(eventRequest: EventRequest): Promise<boolean>;
    fetchUptimeMonitors(): Promise<UptimeMonitor[]>;
    fetchUptimeMonitor(id: number): Promise<UptimeMonitor>;
    pauseUptimeMonitor(uptimeMonitor: UptimeMonitor): Promise<UptimeMonitor>;
    resumeUptimeMonitor(uptimeMonitor: UptimeMonitor): Promise<UptimeMonitor>;
    fetchAlertSources(): Promise<AlertSource[]>;
    fetchAlertSource(idOrIntegrationKey: number | string): Promise<AlertSource>;
    fetchAlertSourceOnCalls(alertSource: AlertSource): Promise<OnCall[]>;
    enableAlertSource(alertSource: AlertSource): Promise<AlertSource>;
    disableAlertSource(alertSource: AlertSource): Promise<AlertSource>;
    addImmediateMaintenance(alertSourceId: number, minutes: number): Promise<void>;
    fetchOnCallSchedules(): Promise<Schedule[]>;
    fetchUsers(): Promise<User[]>;
    overrideShift(scheduleId: number, userId: number, start: string, end: string): Promise<Schedule>;
    getIncidentDetailsURL(incident: Incident): string;
    getAlertSourceDetailsURL(alertSource: AlertSource | null): string;
    getEscalationPolicyDetailsURL(escalationPolicy: EscalationPolicy): string;
    getUptimeMonitorDetailsURL(uptimeMonitor: UptimeMonitor): string;
    getScheduleDetailsURL(schedule: Schedule): string;
    getUserPhoneNumber(user: User | null): string;
    getUserInitials(user: User | null): string;
    private apiUrl;
}
