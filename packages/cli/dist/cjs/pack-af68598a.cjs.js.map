{"version":3,"file":"pack-af68598a.cjs.js","sources":["../../src/commands/pack.ts"],"sourcesContent":["/*\n * Copyright 2020 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport fs from 'fs-extra';\nimport { paths } from '../lib/paths';\nimport { join as joinPath } from 'path';\n\nconst SKIPPED_KEYS = ['access', 'registry', 'tag', 'alphaTypes', 'betaTypes'];\n\nconst PKG_PATH = 'package.json';\nconst PKG_BACKUP_PATH = 'package.json-prepack';\n\nfunction resolveEntrypoint(pkg: any, name: string) {\n  const targetEntry = pkg.publishConfig[name] || pkg[name];\n  return targetEntry && joinPath('..', targetEntry);\n}\n\n// Writes e.g. alpha/package.json\nasync function writeReleaseStageEntrypoint(pkg: any, stage: 'alpha' | 'beta') {\n  await fs.ensureDir(paths.resolveTarget(stage));\n  await fs.writeJson(\n    paths.resolveTarget(stage, PKG_PATH),\n    {\n      name: pkg.name,\n      version: pkg.version,\n      main: resolveEntrypoint(pkg, 'main'),\n      module: resolveEntrypoint(pkg, 'module'),\n      browser: resolveEntrypoint(pkg, 'browser'),\n      types: joinPath('..', pkg.publishConfig[`${stage}Types`]),\n    },\n    { encoding: 'utf8', spaces: 2 },\n  );\n}\n\nexport const pre = async () => {\n  const pkgPath = paths.resolveTarget(PKG_PATH);\n\n  const pkgContent = await fs.readFile(pkgPath, 'utf8');\n  const pkg = JSON.parse(pkgContent);\n  await fs.writeFile(PKG_BACKUP_PATH, pkgContent);\n\n  const publishConfig = pkg.publishConfig ?? {};\n  for (const key of Object.keys(publishConfig)) {\n    if (!SKIPPED_KEYS.includes(key)) {\n      pkg[key] = publishConfig[key];\n    }\n  }\n  await fs.writeJson(pkgPath, pkg, { encoding: 'utf8', spaces: 2 });\n\n  if (publishConfig.alphaTypes) {\n    await writeReleaseStageEntrypoint(pkg, 'alpha');\n  }\n  if (publishConfig.betaTypes) {\n    await writeReleaseStageEntrypoint(pkg, 'beta');\n  }\n};\n\nexport const post = async () => {\n  // postpack isn't called by yarn right now, so it needs to be called manually\n  try {\n    await fs.move(PKG_BACKUP_PATH, PKG_PATH, { overwrite: true });\n\n    // Check if we're shipping types for other release stages, clean up in that case\n    const pkg = await fs.readJson(PKG_PATH);\n    if (pkg.publishConfig?.alphaTypes) {\n      await fs.remove(paths.resolveTarget('alpha'));\n    }\n    if (pkg.publishConfig?.betaTypes) {\n      await fs.remove(paths.resolveTarget('beta'));\n    }\n  } catch (error) {\n    console.warn(\n      `Failed to restore package.json during postpack, ${error}. ` +\n        'Your package will be fine but you may have ended up with some garbage in the repo.',\n    );\n  }\n};\n"],"names":["joinPath","fs","paths"],"mappings":"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"}