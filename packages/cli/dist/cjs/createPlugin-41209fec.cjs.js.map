{"version":3,"file":"createPlugin-41209fec.cjs.js","sources":["../../src/commands/create-plugin/createPlugin.ts"],"sourcesContent":["/*\n * Copyright 2020 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport fs from 'fs-extra';\nimport { promisify } from 'util';\nimport chalk from 'chalk';\nimport inquirer, { Answers, Question } from 'inquirer';\nimport { exec as execCb } from 'child_process';\nimport { resolve as resolvePath, join as joinPath } from 'path';\nimport camelCase from 'lodash/camelCase';\nimport upperFirst from 'lodash/upperFirst';\nimport os from 'os';\nimport { OptionValues } from 'commander';\nimport { assertError } from '@backstage/errors';\nimport {\n  parseOwnerIds,\n  addCodeownersEntry,\n  getCodeownersFilePath,\n} from '../../lib/codeowners';\nimport { paths } from '../../lib/paths';\nimport { Task, templatingTask } from '../../lib/tasks';\nimport { Lockfile } from '../../lib/versioning';\nimport { createPackageVersionProvider } from '../../lib/version';\n\nconst exec = promisify(execCb);\n\nasync function checkExists(destination: string) {\n  await Task.forItem('checking', destination, async () => {\n    if (await fs.pathExists(destination)) {\n      const existing = chalk.cyan(\n        destination.replace(`${paths.targetRoot}/`, ''),\n      );\n      throw new Error(\n        `A plugin with the same name already exists: ${existing}\\nPlease try again with a different plugin ID`,\n      );\n    }\n  });\n}\n\nconst sortObjectByKeys = (obj: { [name in string]: string }) => {\n  return Object.keys(obj)\n    .sort()\n    .reduce((result, key: string) => {\n      result[key] = obj[key];\n      return result;\n    }, {} as { [name in string]: string });\n};\n\nexport const capitalize = (str: string): string =>\n  str.charAt(0).toUpperCase() + str.slice(1);\n\nexport const addExportStatement = async (\n  file: string,\n  exportStatement: string,\n) => {\n  const newContents = fs\n    .readFileSync(file, 'utf8')\n    .split('\\n')\n    .filter(Boolean) // get rid of empty lines\n    .concat([exportStatement])\n    .concat(['']) // newline at end of file\n    .join('\\n');\n\n  await fs.writeFile(file, newContents, 'utf8');\n};\n\nexport async function addPluginDependencyToApp(\n  rootDir: string,\n  pluginPackage: string,\n  versionStr: string,\n) {\n  const packageFilePath = 'packages/app/package.json';\n  const packageFile = resolvePath(rootDir, packageFilePath);\n\n  await Task.forItem('processing', packageFilePath, async () => {\n    const packageFileContent = await fs.readFile(packageFile, 'utf-8');\n    const packageFileJson = JSON.parse(packageFileContent);\n    const dependencies = packageFileJson.dependencies;\n\n    if (dependencies[pluginPackage]) {\n      throw new Error(\n        `Plugin ${pluginPackage} already exists in ${packageFile}`,\n      );\n    }\n\n    dependencies[pluginPackage] = `^${versionStr}`;\n    packageFileJson.dependencies = sortObjectByKeys(dependencies);\n    const newContents = `${JSON.stringify(packageFileJson, null, 2)}\\n`;\n\n    await fs.writeFile(packageFile, newContents, 'utf-8').catch(error => {\n      throw new Error(\n        `Failed to add plugin as dependency to app: ${packageFile}: ${error.message}`,\n      );\n    });\n  });\n}\n\nexport async function addPluginExtensionToApp(\n  pluginId: string,\n  extensionName: string,\n  pluginPackage: string,\n) {\n  const pluginsFilePath = paths.resolveTargetRoot('packages/app/src/App.tsx');\n  if (!(await fs.pathExists(pluginsFilePath))) {\n    return;\n  }\n\n  await Task.forItem('processing', pluginsFilePath, async () => {\n    const content = await fs.readFile(pluginsFilePath, 'utf8');\n    const revLines = content.split('\\n').reverse();\n\n    const lastImportIndex = revLines.findIndex(line =>\n      line.match(/ from (\"|').*(\"|')/),\n    );\n    const lastRouteIndex = revLines.findIndex(line =>\n      line.match(/<\\/FlatRoutes/),\n    );\n\n    if (lastImportIndex !== -1 && lastRouteIndex !== -1) {\n      revLines.splice(\n        lastImportIndex,\n        0,\n        `import { ${extensionName} } from '${pluginPackage}';`,\n      );\n      const [indentation] = revLines[lastRouteIndex + 1].match(/^\\s*/) ?? [];\n      revLines.splice(\n        lastRouteIndex + 1,\n        0,\n        `${indentation}<Route path=\"/${pluginId}\" element={<${extensionName} />}/>`,\n      );\n\n      const newContent = revLines.reverse().join('\\n');\n      await fs.writeFile(pluginsFilePath, newContent, 'utf8');\n    }\n  });\n}\n\nasync function cleanUp(tempDir: string) {\n  await Task.forItem('remove', 'temporary directory', async () => {\n    await fs.remove(tempDir);\n  });\n}\n\nasync function buildPlugin(pluginFolder: string) {\n  const commands = [\n    'yarn install',\n    'yarn lint --fix',\n    'yarn tsc',\n    'yarn build',\n  ];\n  for (const command of commands) {\n    try {\n      await Task.forItem('executing', command, async () => {\n        process.chdir(pluginFolder);\n        await exec(command);\n      }).catch(error => {\n        process.stdout.write(error.stderr);\n        process.stdout.write(error.stdout);\n        throw new Error(\n          `Warning: Could not execute command ${chalk.cyan(command)}`,\n        );\n      });\n    } catch (error) {\n      assertError(error);\n      Task.error(error.message);\n      break;\n    }\n  }\n}\n\nexport async function movePlugin(\n  tempDir: string,\n  destination: string,\n  id: string,\n) {\n  await Task.forItem('moving', id, async () => {\n    await fs.move(tempDir, destination).catch(error => {\n      throw new Error(\n        `Failed to move plugin from ${tempDir} to ${destination}: ${error.message}`,\n      );\n    });\n  });\n}\n\nexport default async (opts: OptionValues) => {\n  const codeownersPath = await getCodeownersFilePath(paths.targetRoot);\n\n  const questions: Question[] = [\n    {\n      type: 'input',\n      name: 'id',\n      message: chalk.blue('Enter an ID for the plugin [required]'),\n      validate: (value: any) => {\n        if (!value) {\n          return chalk.red('Please enter an ID for the plugin');\n        } else if (!/^[a-z0-9]+(-[a-z0-9]+)*$/.test(value)) {\n          return chalk.red(\n            'Plugin IDs must be lowercase and contain only letters, digits, and dashes.',\n          );\n        }\n        return true;\n      },\n    },\n  ];\n\n  if (codeownersPath) {\n    questions.push({\n      type: 'input',\n      name: 'owner',\n      message: chalk.blue(\n        'Enter the owner(s) of the plugin. If specified, this will be added to CODEOWNERS for the plugin path. [optional]',\n      ),\n      validate: (value: any) => {\n        if (!value) {\n          return true;\n        }\n\n        const ownerIds = parseOwnerIds(value);\n        if (!ownerIds) {\n          return chalk.red(\n            'The owner must be a space separated list of team names (e.g. @org/team-name), usernames (e.g. @username), or the email addresses of users (e.g. user@example.com).',\n          );\n        }\n\n        return true;\n      },\n    });\n  }\n\n  const answers: Answers = await inquirer.prompt(questions);\n  const pluginId =\n    opts.backend && !answers.id.endsWith('-backend')\n      ? `${answers.id}-backend`\n      : answers.id;\n\n  const name = opts.scope\n    ? `@${opts.scope.replace(/^@/, '')}/plugin-${pluginId}`\n    : `plugin-${pluginId}`;\n  const pluginVar = `${camelCase(answers.id)}Plugin`;\n  const extensionName = `${upperFirst(camelCase(answers.id))}Page`;\n  const npmRegistry = opts.npmRegistry && opts.scope ? opts.npmRegistry : '';\n  const privatePackage = opts.private === false ? false : true;\n  const isMonoRepo = await fs.pathExists(paths.resolveTargetRoot('lerna.json'));\n  const appPackage = paths.resolveTargetRoot('packages/app');\n  const templateDir = paths.resolveOwn(\n    opts.backend\n      ? 'templates/default-backend-plugin'\n      : 'templates/default-plugin',\n  );\n  const pluginDir = isMonoRepo\n    ? paths.resolveTargetRoot('plugins', pluginId)\n    : paths.resolveTargetRoot(pluginId);\n  const { version: pluginVersion } = isMonoRepo\n    ? await fs.readJson(paths.resolveTargetRoot('lerna.json'))\n    : { version: '0.1.0' };\n\n  let lockfile: Lockfile | undefined;\n  try {\n    lockfile = await Lockfile.load(paths.resolveTargetRoot('yarn.lock'));\n  } catch (error) {\n    console.warn(`No yarn.lock available, ${error}`);\n  }\n\n  Task.log();\n  Task.log('Creating the plugin...');\n\n  Task.section('Checking if the plugin ID is available');\n  await checkExists(pluginDir);\n\n  Task.section('Creating a temporary plugin directory');\n  const tempDir = await fs.mkdtemp(\n    joinPath(os.tmpdir(), `backstage-plugin-${pluginId}`),\n  );\n\n  try {\n    Task.section('Preparing files');\n\n    await templatingTask(\n      templateDir,\n      tempDir,\n      {\n        ...answers,\n        pluginVar,\n        pluginVersion,\n        extensionName,\n        name,\n        privatePackage,\n        npmRegistry,\n      },\n      createPackageVersionProvider(lockfile),\n    );\n\n    Task.section('Moving to final location');\n    await movePlugin(tempDir, pluginDir, pluginId);\n\n    Task.section('Building the plugin');\n    await buildPlugin(pluginDir);\n\n    if ((await fs.pathExists(appPackage)) && !opts.backend) {\n      Task.section('Adding plugin as dependency in app');\n      await addPluginDependencyToApp(paths.targetRoot, name, pluginVersion);\n\n      Task.section('Import plugin in app');\n      await addPluginExtensionToApp(pluginId, extensionName, name);\n    }\n\n    if (answers.owner) {\n      await addCodeownersEntry(`/plugins/${pluginId}`, answers.owner);\n    }\n\n    Task.log();\n    Task.log(`🥇  Successfully created ${chalk.cyan(`${name}`)}`);\n    Task.log();\n    Task.exit();\n  } catch (error) {\n    assertError(error);\n    Task.error(error.message);\n\n    Task.log('It seems that something went wrong when creating the plugin 🤔');\n    Task.log('We are going to clean up, and then you can try again.');\n\n    Task.section('Cleanup');\n    await cleanUp(tempDir);\n    Task.error('🔥  Failed to create plugin!');\n    Task.exit(1);\n  }\n};\n"],"names":["promisify","execCb","Task","fs","chalk","paths","resolvePath","assertError","getCodeownersFilePath","parseOwnerIds","inquirer","camelCase","upperFirst","Lockfile","joinPath","os","templatingTask","createPackageVersionProvider","addCodeownersEntry"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAmBA,MAAM,IAAI,GAAGA,cAAS,CAACC,kBAAM,CAAC,CAAC;AAC/B,eAAe,WAAW,CAAC,WAAW,EAAE;AACxC,EAAE,MAAMC,UAAI,CAAC,OAAO,CAAC,UAAU,EAAE,WAAW,EAAE,YAAY;AAC1D,IAAI,IAAI,MAAMC,sBAAE,CAAC,UAAU,CAAC,WAAW,CAAC,EAAE;AAC1C,MAAM,MAAM,QAAQ,GAAGC,yBAAK,CAAC,IAAI,CAAC,WAAW,CAAC,OAAO,CAAC,CAAC,EAAEC,WAAK,CAAC,UAAU,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC;AACnF,MAAM,MAAM,IAAI,KAAK,CAAC,CAAC,4CAA4C,EAAE,QAAQ,CAAC;AAC9E,2CAA2C,CAAC,CAAC,CAAC;AAC9C,KAAK;AACL,GAAG,CAAC,CAAC;AACL,CAAC;AACD,MAAM,gBAAgB,GAAG,CAAC,GAAG,KAAK;AAClC,EAAE,OAAO,MAAM,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,IAAI,EAAE,CAAC,MAAM,CAAC,CAAC,MAAM,EAAE,GAAG,KAAK;AACzD,IAAI,MAAM,CAAC,GAAG,CAAC,GAAG,GAAG,CAAC,GAAG,CAAC,CAAC;AAC3B,IAAI,OAAO,MAAM,CAAC;AAClB,GAAG,EAAE,EAAE,CAAC,CAAC;AACT,CAAC,CAAC;AACU,MAAC,UAAU,GAAG,CAAC,GAAG,KAAK,GAAG,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,WAAW,EAAE,GAAG,GAAG,CAAC,KAAK,CAAC,CAAC,EAAE;AAClE,MAAC,kBAAkB,GAAG,OAAO,IAAI,EAAE,eAAe,KAAK;AACnE,EAAE,MAAM,WAAW,GAAGF,sBAAE,CAAC,YAAY,CAAC,IAAI,EAAE,MAAM,CAAC,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC,MAAM,CAAC,CAAC,eAAe,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;AAClI,EAAE,MAAMA,sBAAE,CAAC,SAAS,CAAC,IAAI,EAAE,WAAW,EAAE,MAAM,CAAC,CAAC;AAChD,EAAE;AACK,eAAe,wBAAwB,CAAC,OAAO,EAAE,aAAa,EAAE,UAAU,EAAE;AACnF,EAAE,MAAM,eAAe,GAAG,2BAA2B,CAAC;AACtD,EAAE,MAAM,WAAW,GAAGG,YAAW,CAAC,OAAO,EAAE,eAAe,CAAC,CAAC;AAC5D,EAAE,MAAMJ,UAAI,CAAC,OAAO,CAAC,YAAY,EAAE,eAAe,EAAE,YAAY;AAChE,IAAI,MAAM,kBAAkB,GAAG,MAAMC,sBAAE,CAAC,QAAQ,CAAC,WAAW,EAAE,OAAO,CAAC,CAAC;AACvE,IAAI,MAAM,eAAe,GAAG,IAAI,CAAC,KAAK,CAAC,kBAAkB,CAAC,CAAC;AAC3D,IAAI,MAAM,YAAY,GAAG,eAAe,CAAC,YAAY,CAAC;AACtD,IAAI,IAAI,YAAY,CAAC,aAAa,CAAC,EAAE;AACrC,MAAM,MAAM,IAAI,KAAK,CAAC,CAAC,OAAO,EAAE,aAAa,CAAC,mBAAmB,EAAE,WAAW,CAAC,CAAC,CAAC,CAAC;AAClF,KAAK;AACL,IAAI,YAAY,CAAC,aAAa,CAAC,GAAG,CAAC,CAAC,EAAE,UAAU,CAAC,CAAC,CAAC;AACnD,IAAI,eAAe,CAAC,YAAY,GAAG,gBAAgB,CAAC,YAAY,CAAC,CAAC;AAClE,IAAI,MAAM,WAAW,GAAG,CAAC,EAAE,IAAI,CAAC,SAAS,CAAC,eAAe,EAAE,IAAI,EAAE,CAAC,CAAC,CAAC;AACpE,CAAC,CAAC;AACF,IAAI,MAAMA,sBAAE,CAAC,SAAS,CAAC,WAAW,EAAE,WAAW,EAAE,OAAO,CAAC,CAAC,KAAK,CAAC,CAAC,KAAK,KAAK;AAC3E,MAAM,MAAM,IAAI,KAAK,CAAC,CAAC,2CAA2C,EAAE,WAAW,CAAC,EAAE,EAAE,KAAK,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC;AACrG,KAAK,CAAC,CAAC;AACP,GAAG,CAAC,CAAC;AACL,CAAC;AACM,eAAe,uBAAuB,CAAC,QAAQ,EAAE,aAAa,EAAE,aAAa,EAAE;AACtF,EAAE,MAAM,eAAe,GAAGE,WAAK,CAAC,iBAAiB,CAAC,0BAA0B,CAAC,CAAC;AAC9E,EAAE,IAAI,CAAC,MAAMF,sBAAE,CAAC,UAAU,CAAC,eAAe,CAAC,EAAE;AAC7C,IAAI,OAAO;AACX,GAAG;AACH,EAAE,MAAMD,UAAI,CAAC,OAAO,CAAC,YAAY,EAAE,eAAe,EAAE,YAAY;AAChE,IAAI,IAAI,EAAE,CAAC;AACX,IAAI,MAAM,OAAO,GAAG,MAAMC,sBAAE,CAAC,QAAQ,CAAC,eAAe,EAAE,MAAM,CAAC,CAAC;AAC/D,IAAI,MAAM,QAAQ,GAAG,OAAO,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC,OAAO,EAAE,CAAC;AACnD,IAAI,MAAM,eAAe,GAAG,QAAQ,CAAC,SAAS,CAAC,CAAC,IAAI,KAAK,IAAI,CAAC,KAAK,CAAC,oBAAoB,CAAC,CAAC,CAAC;AAC3F,IAAI,MAAM,cAAc,GAAG,QAAQ,CAAC,SAAS,CAAC,CAAC,IAAI,KAAK,IAAI,CAAC,KAAK,CAAC,eAAe,CAAC,CAAC,CAAC;AACrF,IAAI,IAAI,eAAe,KAAK,CAAC,CAAC,IAAI,cAAc,KAAK,CAAC,CAAC,EAAE;AACzD,MAAM,QAAQ,CAAC,MAAM,CAAC,eAAe,EAAE,CAAC,EAAE,CAAC,SAAS,EAAE,aAAa,CAAC,SAAS,EAAE,aAAa,CAAC,EAAE,CAAC,CAAC,CAAC;AAClG,MAAM,MAAM,CAAC,WAAW,CAAC,GAAG,CAAC,EAAE,GAAG,QAAQ,CAAC,cAAc,GAAG,CAAC,CAAC,CAAC,KAAK,CAAC,MAAM,CAAC,KAAK,IAAI,GAAG,EAAE,GAAG,EAAE,CAAC;AAChG,MAAM,QAAQ,CAAC,MAAM,CAAC,cAAc,GAAG,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,WAAW,CAAC,cAAc,EAAE,QAAQ,CAAC,YAAY,EAAE,aAAa,CAAC,MAAM,CAAC,CAAC,CAAC;AAC1H,MAAM,MAAM,UAAU,GAAG,QAAQ,CAAC,OAAO,EAAE,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;AACvD,MAAM,MAAMA,sBAAE,CAAC,SAAS,CAAC,eAAe,EAAE,UAAU,EAAE,MAAM,CAAC,CAAC;AAC9D,KAAK;AACL,GAAG,CAAC,CAAC;AACL,CAAC;AACD,eAAe,OAAO,CAAC,OAAO,EAAE;AAChC,EAAE,MAAMD,UAAI,CAAC,OAAO,CAAC,QAAQ,EAAE,qBAAqB,EAAE,YAAY;AAClE,IAAI,MAAMC,sBAAE,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC;AAC7B,GAAG,CAAC,CAAC;AACL,CAAC;AACD,eAAe,WAAW,CAAC,YAAY,EAAE;AACzC,EAAE,MAAM,QAAQ,GAAG;AACnB,IAAI,cAAc;AAClB,IAAI,iBAAiB;AACrB,IAAI,UAAU;AACd,IAAI,YAAY;AAChB,GAAG,CAAC;AACJ,EAAE,KAAK,MAAM,OAAO,IAAI,QAAQ,EAAE;AAClC,IAAI,IAAI;AACR,MAAM,MAAMD,UAAI,CAAC,OAAO,CAAC,WAAW,EAAE,OAAO,EAAE,YAAY;AAC3D,QAAQ,OAAO,CAAC,KAAK,CAAC,YAAY,CAAC,CAAC;AACpC,QAAQ,MAAM,IAAI,CAAC,OAAO,CAAC,CAAC;AAC5B,OAAO,CAAC,CAAC,KAAK,CAAC,CAAC,KAAK,KAAK;AAC1B,QAAQ,OAAO,CAAC,MAAM,CAAC,KAAK,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC;AAC3C,QAAQ,OAAO,CAAC,MAAM,CAAC,KAAK,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC;AAC3C,QAAQ,MAAM,IAAI,KAAK,CAAC,CAAC,mCAAmC,EAAEE,yBAAK,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,CAAC;AACrF,OAAO,CAAC,CAAC;AACT,KAAK,CAAC,OAAO,KAAK,EAAE;AACpB,MAAMG,kBAAW,CAAC,KAAK,CAAC,CAAC;AACzB,MAAML,UAAI,CAAC,KAAK,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC;AAChC,MAAM,MAAM;AACZ,KAAK;AACL,GAAG;AACH,CAAC;AACM,eAAe,UAAU,CAAC,OAAO,EAAE,WAAW,EAAE,EAAE,EAAE;AAC3D,EAAE,MAAMA,UAAI,CAAC,OAAO,CAAC,QAAQ,EAAE,EAAE,EAAE,YAAY;AAC/C,IAAI,MAAMC,sBAAE,CAAC,IAAI,CAAC,OAAO,EAAE,WAAW,CAAC,CAAC,KAAK,CAAC,CAAC,KAAK,KAAK;AACzD,MAAM,MAAM,IAAI,KAAK,CAAC,CAAC,2BAA2B,EAAE,OAAO,CAAC,IAAI,EAAE,WAAW,CAAC,EAAE,EAAE,KAAK,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC;AACnG,KAAK,CAAC,CAAC;AACP,GAAG,CAAC,CAAC;AACL,CAAC;AACD,mBAAe,OAAO,IAAI,KAAK;AAC/B,EAAE,MAAM,cAAc,GAAG,MAAMK,2BAAqB,CAACH,WAAK,CAAC,UAAU,CAAC,CAAC;AACvE,EAAE,MAAM,SAAS,GAAG;AACpB,IAAI;AACJ,MAAM,IAAI,EAAE,OAAO;AACnB,MAAM,IAAI,EAAE,IAAI;AAChB,MAAM,OAAO,EAAED,yBAAK,CAAC,IAAI,CAAC,uCAAuC,CAAC;AAClE,MAAM,QAAQ,EAAE,CAAC,KAAK,KAAK;AAC3B,QAAQ,IAAI,CAAC,KAAK,EAAE;AACpB,UAAU,OAAOA,yBAAK,CAAC,GAAG,CAAC,mCAAmC,CAAC,CAAC;AAChE,SAAS,MAAM,IAAI,CAAC,0BAA0B,CAAC,IAAI,CAAC,KAAK,CAAC,EAAE;AAC5D,UAAU,OAAOA,yBAAK,CAAC,GAAG,CAAC,4EAA4E,CAAC,CAAC;AACzG,SAAS;AACT,QAAQ,OAAO,IAAI,CAAC;AACpB,OAAO;AACP,KAAK;AACL,GAAG,CAAC;AACJ,EAAE,IAAI,cAAc,EAAE;AACtB,IAAI,SAAS,CAAC,IAAI,CAAC;AACnB,MAAM,IAAI,EAAE,OAAO;AACnB,MAAM,IAAI,EAAE,OAAO;AACnB,MAAM,OAAO,EAAEA,yBAAK,CAAC,IAAI,CAAC,kHAAkH,CAAC;AAC7I,MAAM,QAAQ,EAAE,CAAC,KAAK,KAAK;AAC3B,QAAQ,IAAI,CAAC,KAAK,EAAE;AACpB,UAAU,OAAO,IAAI,CAAC;AACtB,SAAS;AACT,QAAQ,MAAM,QAAQ,GAAGK,mBAAa,CAAC,KAAK,CAAC,CAAC;AAC9C,QAAQ,IAAI,CAAC,QAAQ,EAAE;AACvB,UAAU,OAAOL,yBAAK,CAAC,GAAG,CAAC,oKAAoK,CAAC,CAAC;AACjM,SAAS;AACT,QAAQ,OAAO,IAAI,CAAC;AACpB,OAAO;AACP,KAAK,CAAC,CAAC;AACP,GAAG;AACH,EAAE,MAAM,OAAO,GAAG,MAAMM,4BAAQ,CAAC,MAAM,CAAC,SAAS,CAAC,CAAC;AACnD,EAAE,MAAM,QAAQ,GAAG,IAAI,CAAC,OAAO,IAAI,CAAC,OAAO,CAAC,EAAE,CAAC,QAAQ,CAAC,UAAU,CAAC,GAAG,CAAC,EAAE,OAAO,CAAC,EAAE,CAAC,QAAQ,CAAC,GAAG,OAAO,CAAC,EAAE,CAAC;AAC3G,EAAE,MAAM,IAAI,GAAG,IAAI,CAAC,KAAK,GAAG,CAAC,CAAC,EAAE,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,IAAI,EAAE,EAAE,CAAC,CAAC,QAAQ,EAAE,QAAQ,CAAC,CAAC,GAAG,CAAC,OAAO,EAAE,QAAQ,CAAC,CAAC,CAAC;AACzG,EAAE,MAAM,SAAS,GAAG,CAAC,EAAEC,6BAAS,CAAC,OAAO,CAAC,EAAE,CAAC,CAAC,MAAM,CAAC,CAAC;AACrD,EAAE,MAAM,aAAa,GAAG,CAAC,EAAEC,8BAAU,CAACD,6BAAS,CAAC,OAAO,CAAC,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC;AACnE,EAAE,MAAM,WAAW,GAAG,IAAI,CAAC,WAAW,IAAI,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC,WAAW,GAAG,EAAE,CAAC;AAC7E,EAAE,MAAM,cAAc,GAAG,IAAI,CAAC,OAAO,KAAK,KAAK,GAAG,KAAK,GAAG,IAAI,CAAC;AAC/D,EAAE,MAAM,UAAU,GAAG,MAAMR,sBAAE,CAAC,UAAU,CAACE,WAAK,CAAC,iBAAiB,CAAC,YAAY,CAAC,CAAC,CAAC;AAChF,EAAE,MAAM,UAAU,GAAGA,WAAK,CAAC,iBAAiB,CAAC,cAAc,CAAC,CAAC;AAC7D,EAAE,MAAM,WAAW,GAAGA,WAAK,CAAC,UAAU,CAAC,IAAI,CAAC,OAAO,GAAG,kCAAkC,GAAG,0BAA0B,CAAC,CAAC;AACvH,EAAE,MAAM,SAAS,GAAG,UAAU,GAAGA,WAAK,CAAC,iBAAiB,CAAC,SAAS,EAAE,QAAQ,CAAC,GAAGA,WAAK,CAAC,iBAAiB,CAAC,QAAQ,CAAC,CAAC;AAClH,EAAE,MAAM,EAAE,OAAO,EAAE,aAAa,EAAE,GAAG,UAAU,GAAG,MAAMF,sBAAE,CAAC,QAAQ,CAACE,WAAK,CAAC,iBAAiB,CAAC,YAAY,CAAC,CAAC,GAAG,EAAE,OAAO,EAAE,OAAO,EAAE,CAAC;AAClI,EAAE,IAAI,QAAQ,CAAC;AACf,EAAE,IAAI;AACN,IAAI,QAAQ,GAAG,MAAMQ,iBAAQ,CAAC,IAAI,CAACR,WAAK,CAAC,iBAAiB,CAAC,WAAW,CAAC,CAAC,CAAC;AACzE,GAAG,CAAC,OAAO,KAAK,EAAE;AAClB,IAAI,OAAO,CAAC,IAAI,CAAC,CAAC,wBAAwB,EAAE,KAAK,CAAC,CAAC,CAAC,CAAC;AACrD,GAAG;AACH,EAAEH,UAAI,CAAC,GAAG,EAAE,CAAC;AACb,EAAEA,UAAI,CAAC,GAAG,CAAC,wBAAwB,CAAC,CAAC;AACrC,EAAEA,UAAI,CAAC,OAAO,CAAC,wCAAwC,CAAC,CAAC;AACzD,EAAE,MAAM,WAAW,CAAC,SAAS,CAAC,CAAC;AAC/B,EAAEA,UAAI,CAAC,OAAO,CAAC,uCAAuC,CAAC,CAAC;AACxD,EAAE,MAAM,OAAO,GAAG,MAAMC,sBAAE,CAAC,OAAO,CAACW,SAAQ,CAACC,sBAAE,CAAC,MAAM,EAAE,EAAE,CAAC,iBAAiB,EAAE,QAAQ,CAAC,CAAC,CAAC,CAAC,CAAC;AAC1F,EAAE,IAAI;AACN,IAAIb,UAAI,CAAC,OAAO,CAAC,iBAAiB,CAAC,CAAC;AACpC,IAAI,MAAMc,oBAAc,CAAC,WAAW,EAAE,OAAO,EAAE;AAC/C,MAAM,GAAG,OAAO;AAChB,MAAM,SAAS;AACf,MAAM,aAAa;AACnB,MAAM,aAAa;AACnB,MAAM,IAAI;AACV,MAAM,cAAc;AACpB,MAAM,WAAW;AACjB,KAAK,EAAEC,kCAA4B,CAAC,QAAQ,CAAC,CAAC,CAAC;AAC/C,IAAIf,UAAI,CAAC,OAAO,CAAC,0BAA0B,CAAC,CAAC;AAC7C,IAAI,MAAM,UAAU,CAAC,OAAO,EAAE,SAAS,EAAE,QAAQ,CAAC,CAAC;AACnD,IAAIA,UAAI,CAAC,OAAO,CAAC,qBAAqB,CAAC,CAAC;AACxC,IAAI,MAAM,WAAW,CAAC,SAAS,CAAC,CAAC;AACjC,IAAI,IAAI,MAAMC,sBAAE,CAAC,UAAU,CAAC,UAAU,CAAC,IAAI,CAAC,IAAI,CAAC,OAAO,EAAE;AAC1D,MAAMD,UAAI,CAAC,OAAO,CAAC,oCAAoC,CAAC,CAAC;AACzD,MAAM,MAAM,wBAAwB,CAACG,WAAK,CAAC,UAAU,EAAE,IAAI,EAAE,aAAa,CAAC,CAAC;AAC5E,MAAMH,UAAI,CAAC,OAAO,CAAC,sBAAsB,CAAC,CAAC;AAC3C,MAAM,MAAM,uBAAuB,CAAC,QAAQ,EAAE,aAAa,EAAE,IAAI,CAAC,CAAC;AACnE,KAAK;AACL,IAAI,IAAI,OAAO,CAAC,KAAK,EAAE;AACvB,MAAM,MAAMgB,wBAAkB,CAAC,CAAC,SAAS,EAAE,QAAQ,CAAC,CAAC,EAAE,OAAO,CAAC,KAAK,CAAC,CAAC;AACtE,KAAK;AACL,IAAIhB,UAAI,CAAC,GAAG,EAAE,CAAC;AACf,IAAIA,UAAI,CAAC,GAAG,CAAC,CAAC,gCAAgC,EAAEE,yBAAK,CAAC,IAAI,CAAC,CAAC,EAAE,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACzE,IAAIF,UAAI,CAAC,GAAG,EAAE,CAAC;AACf,IAAIA,UAAI,CAAC,IAAI,EAAE,CAAC;AAChB,GAAG,CAAC,OAAO,KAAK,EAAE;AAClB,IAAIK,kBAAW,CAAC,KAAK,CAAC,CAAC;AACvB,IAAIL,UAAI,CAAC,KAAK,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC;AAC9B,IAAIA,UAAI,CAAC,GAAG,CAAC,uEAAuE,CAAC,CAAC;AACtF,IAAIA,UAAI,CAAC,GAAG,CAAC,uDAAuD,CAAC,CAAC;AACtE,IAAIA,UAAI,CAAC,OAAO,CAAC,SAAS,CAAC,CAAC;AAC5B,IAAI,MAAM,OAAO,CAAC,OAAO,CAAC,CAAC;AAC3B,IAAIA,UAAI,CAAC,KAAK,CAAC,qCAAqC,CAAC,CAAC;AACtD,IAAIA,UAAI,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;AACjB,GAAG;AACH,CAAC;;;;;;;;;"}