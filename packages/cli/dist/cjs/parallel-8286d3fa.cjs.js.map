{"version":3,"file":"parallel-8286d3fa.cjs.js","sources":["../../src/lib/parallel.ts"],"sourcesContent":["/*\n * Copyright 2020 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport os from 'os';\nimport { ErrorLike } from '@backstage/errors';\nimport { Worker } from 'worker_threads';\n\nconst defaultParallelism = Math.ceil(os.cpus().length / 2);\n\nconst PARALLEL_ENV_VAR = 'BACKSTAGE_CLI_BUILD_PARALLEL';\n\nexport type ParallelismOption = boolean | string | number | null | undefined;\n\nexport function parseParallelismOption(parallel: ParallelismOption): number {\n  if (parallel === undefined || parallel === null) {\n    return defaultParallelism;\n  } else if (typeof parallel === 'boolean') {\n    return parallel ? defaultParallelism : 1;\n  } else if (typeof parallel === 'number' && Number.isInteger(parallel)) {\n    if (parallel < 1) {\n      return 1;\n    }\n    return parallel;\n  } else if (typeof parallel === 'string') {\n    if (parallel === 'true') {\n      return parseParallelismOption(true);\n    } else if (parallel === 'false') {\n      return parseParallelismOption(false);\n    }\n    const parsed = Number(parallel);\n    if (Number.isInteger(parsed)) {\n      return parseParallelismOption(parsed);\n    }\n  }\n\n  throw Error(\n    `Parallel option value '${parallel}' is not a boolean or integer`,\n  );\n}\n\nexport function getEnvironmentParallelism() {\n  return parseParallelismOption(process.env[PARALLEL_ENV_VAR]);\n}\n\ntype ParallelWorkerOptions<TItem> = {\n  /**\n   * Decides the number of parallel workers by multiplying\n   * this with the configured parallelism, which defaults to 4.\n   *\n   * Defaults to 1.\n   */\n  parallelismFactor?: number;\n  parallelismSetting?: ParallelismOption;\n  items: Iterable<TItem>;\n  worker: (item: TItem) => Promise<void>;\n};\n\nexport async function runParallelWorkers<TItem>(\n  options: ParallelWorkerOptions<TItem>,\n) {\n  const { parallelismFactor = 1, parallelismSetting, items, worker } = options;\n  const parallelism = parallelismSetting\n    ? parseParallelismOption(parallelismSetting)\n    : getEnvironmentParallelism();\n\n  const sharedIterator = items[Symbol.iterator]();\n  const sharedIterable = {\n    [Symbol.iterator]: () => sharedIterator,\n  };\n\n  const workerCount = Math.max(Math.floor(parallelismFactor * parallelism), 1);\n  return Promise.all(\n    Array(workerCount)\n      .fill(0)\n      .map(async () => {\n        for (const value of sharedIterable) {\n          await worker(value);\n        }\n      }),\n  );\n}\n\ntype WorkerThreadMessage =\n  | {\n      type: 'done';\n    }\n  | {\n      type: 'item';\n      index: number;\n      item: unknown;\n    }\n  | {\n      type: 'start';\n    }\n  | {\n      type: 'result';\n      index: number;\n      result: unknown;\n    }\n  | {\n      type: 'error';\n      error: ErrorLike;\n    }\n  | {\n      type: 'message';\n      message: unknown;\n    };\n\nexport type WorkerQueueThreadsOptions<TItem, TResult, TData> = {\n  /** The items to process */\n  items: Iterable<TItem>;\n  /**\n   * A function that will be called within each worker thread at startup,\n   * which should return the worker function that will be called for each item.\n   *\n   * This function must be defined as an arrow function or using the\n   * function keyword, and must be entirely self contained, not referencing\n   * any variables outside of its scope. This is because the function source\n   * is stringified and evaluated in the worker thread.\n   *\n   * To pass data to the worker, use the `workerData` option and `items`, but\n   * note that they are both copied by value into the worker thread, except for\n   * types that are explicitly shareable across threads, such as `SharedArrayBuffer`.\n   */\n  workerFactory: (\n    data: TData,\n  ) =>\n    | ((item: TItem) => Promise<TResult>)\n    | Promise<(item: TItem) => Promise<TResult>>;\n  /** Data supplied to each worker factory */\n  workerData?: TData;\n  /** Number of threads, defaults to half of the number of available CPUs */\n  threadCount?: number;\n};\n\n/**\n * Spawns one or more worker threads using the `worker_threads` module.\n * Each thread processes one item at a time from the provided `options.items`.\n */\nexport async function runWorkerQueueThreads<TItem, TResult, TData>(\n  options: WorkerQueueThreadsOptions<TItem, TResult, TData>,\n): Promise<TResult[]> {\n  const items = Array.from(options.items);\n  const {\n    workerFactory,\n    workerData,\n    threadCount = Math.min(getEnvironmentParallelism(), items.length),\n  } = options;\n\n  const iterator = items[Symbol.iterator]();\n  const results = new Array<TResult>();\n  let itemIndex = 0;\n\n  await Promise.all(\n    Array(threadCount)\n      .fill(0)\n      .map(async () => {\n        const thread = new Worker(`(${workerQueueThread})(${workerFactory})`, {\n          eval: true,\n          workerData,\n        });\n\n        return new Promise<void>((resolve, reject) => {\n          thread.on('message', (message: WorkerThreadMessage) => {\n            if (message.type === 'start' || message.type === 'result') {\n              if (message.type === 'result') {\n                results[message.index] = message.result as TResult;\n              }\n              const { value, done } = iterator.next();\n              if (done) {\n                thread.postMessage({ type: 'done' });\n              } else {\n                thread.postMessage({\n                  type: 'item',\n                  index: itemIndex,\n                  item: value,\n                });\n                itemIndex += 1;\n              }\n            } else if (message.type === 'error') {\n              const error = new Error(message.error.message);\n              error.name = message.error.name;\n              error.stack = message.error.stack;\n              reject(error);\n            }\n          });\n\n          thread.on('error', reject);\n          thread.on('exit', (code: number) => {\n            if (code !== 0) {\n              reject(new Error(`Worker thread exited with code ${code}`));\n            } else {\n              resolve();\n            }\n          });\n        });\n      }),\n  );\n\n  return results;\n}\n\n/* istanbul ignore next */\nfunction workerQueueThread(\n  workerFuncFactory: (\n    data: unknown,\n  ) => Promise<(item: unknown) => Promise<unknown>>,\n) {\n  const { parentPort, workerData } = require('worker_threads');\n\n  Promise.resolve()\n    .then(() => workerFuncFactory(workerData))\n    .then(\n      workerFunc => {\n        parentPort.on('message', async (message: WorkerThreadMessage) => {\n          if (message.type === 'done') {\n            parentPort.close();\n            return;\n          }\n          if (message.type === 'item') {\n            try {\n              const result = await workerFunc(message.item);\n              parentPort.postMessage({\n                type: 'result',\n                index: message.index,\n                result,\n              });\n            } catch (error) {\n              parentPort.postMessage({ type: 'error', error });\n            }\n          }\n        });\n\n        parentPort.postMessage({ type: 'start' });\n      },\n      error => parentPort.postMessage({ type: 'error', error }),\n    );\n}\n\nexport type WorkerThreadsOptions<TResult, TData, TMessage> = {\n  /**\n   * A function that is called by each worker thread to produce a result.\n   *\n   * This function must be defined as an arrow function or using the\n   * function keyword, and must be entirely self contained, not referencing\n   * any variables outside of its scope. This is because the function source\n   * is stringified and evaluated in the worker thread.\n   *\n   * To pass data to the worker, use the `workerData` option, but\n   * note that they are both copied by value into the worker thread, except for\n   * types that are explicitly shareable across threads, such as `SharedArrayBuffer`.\n   */\n  worker: (\n    data: TData,\n    sendMessage: (message: TMessage) => void,\n  ) => Promise<TResult>;\n  /** Data supplied to each worker */\n  workerData?: TData;\n  /** Number of threads, defaults to 1 */\n  threadCount?: number;\n  /** An optional handler for messages posted from the worker thread */\n  onMessage?: (message: TMessage) => void;\n};\n\n/**\n * Spawns one or more worker threads using the `worker_threads` module.\n */\nexport async function runWorkerThreads<TResult, TData, TMessage>(\n  options: WorkerThreadsOptions<TResult, TData, TMessage>,\n): Promise<TResult[]> {\n  const { worker, workerData, threadCount = 1, onMessage } = options;\n\n  return Promise.all(\n    Array(threadCount)\n      .fill(0)\n      .map(async () => {\n        const thread = new Worker(`(${workerThread})(${worker})`, {\n          eval: true,\n          workerData,\n        });\n\n        return new Promise<TResult>((resolve, reject) => {\n          thread.on('message', (message: WorkerThreadMessage) => {\n            if (message.type === 'result') {\n              resolve(message.result as TResult);\n            } else if (message.type === 'error') {\n              reject(message.error);\n            } else if (message.type === 'message') {\n              onMessage?.(message.message as TMessage);\n            }\n          });\n\n          thread.on('error', reject);\n          thread.on('exit', (code: number) => {\n            reject(\n              new Error(`Unexpected worker thread exit with code ${code}`),\n            );\n          });\n        });\n      }),\n  );\n}\n\n/* istanbul ignore next */\nfunction workerThread(\n  workerFunc: (\n    data: unknown,\n    sendMessage: (message: unknown) => void,\n  ) => Promise<unknown>,\n) {\n  const { parentPort, workerData } = require('worker_threads');\n\n  const sendMessage = (message: unknown) => {\n    parentPort.postMessage({ type: 'message', message });\n  };\n\n  workerFunc(workerData, sendMessage).then(\n    result => {\n      parentPort.postMessage({\n        type: 'result',\n        index: 0,\n        result,\n      });\n    },\n    error => {\n      parentPort.postMessage({ type: 'error', error });\n    },\n  );\n}\n"],"names":["os","Worker"],"mappings":"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"}