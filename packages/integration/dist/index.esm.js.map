{"version":3,"file":"index.esm.js","sources":["../src/helpers.ts","../src/awsS3/config.ts","../src/awsS3/AwsS3Integration.ts","../src/azure/AzureUrl.ts","../src/azure/config.ts","../src/azure/AzureIntegration.ts","../src/azure/core.ts","../src/bitbucket/config.ts","../src/bitbucket/BitbucketIntegration.ts","../src/bitbucket/core.ts","../src/bitbucketCloud/config.ts","../src/bitbucketCloud/BitbucketCloudIntegration.ts","../src/bitbucketCloud/core.ts","../src/bitbucketServer/config.ts","../src/bitbucketServer/BitbucketServerIntegration.ts","../src/bitbucketServer/core.ts","../src/gerrit/config.ts","../src/gerrit/core.ts","../src/gerrit/GerritIntegration.ts","../src/github/config.ts","../src/github/core.ts","../src/github/SingleInstanceGithubCredentialsProvider.ts","../src/github/DefaultGithubCredentialsProvider.ts","../src/github/GitHubIntegration.ts","../src/gitlab/config.ts","../src/gitlab/core.ts","../src/gitlab/GitLabIntegration.ts","../src/googleGcs/config.ts","../src/ScmIntegrations.ts"],"sourcesContent":["/*\n * Copyright 2020 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport parseGitUrl from 'git-url-parse';\nimport { trimEnd } from 'lodash';\nimport { ScmIntegration, ScmIntegrationsGroup } from './types';\n\n/** Checks whether the given argument is a valid URL hostname */\nexport function isValidHost(host: string): boolean {\n  const check = new URL('http://example.com');\n  check.host = host;\n  return check.host === host;\n}\n\n/** Checks whether the given argument is a valid URL */\nexport function isValidUrl(url: string): boolean {\n  try {\n    // eslint-disable-next-line no-new\n    new URL(url);\n    return true;\n  } catch {\n    return false;\n  }\n}\n\nexport function basicIntegrations<T extends ScmIntegration>(\n  integrations: T[],\n  getHost: (integration: T) => string,\n): ScmIntegrationsGroup<T> {\n  return {\n    list(): T[] {\n      return integrations;\n    },\n    byUrl(url: string | URL): T | undefined {\n      try {\n        const parsed = typeof url === 'string' ? new URL(url) : url;\n        return integrations.find(i => getHost(i) === parsed.host);\n      } catch {\n        return undefined;\n      }\n    },\n    byHost(host: string): T | undefined {\n      return integrations.find(i => getHost(i) === host);\n    },\n  };\n}\n\n/**\n * Default implementation of {@link ScmIntegration} `resolveUrl`, that only\n * works with URL pathname based providers.\n *\n * @public\n */\nexport function defaultScmResolveUrl(options: {\n  url: string;\n  base: string;\n  lineNumber?: number;\n}): string {\n  const { url, base, lineNumber } = options;\n\n  // If it is a fully qualified URL - then return it verbatim\n  try {\n    // eslint-disable-next-line no-new\n    new URL(url);\n    return url;\n  } catch {\n    // ignore intentionally\n  }\n\n  let updated: URL;\n\n  if (url.startsWith('/')) {\n    // If it is an absolute path, move relative to the repo root\n    const { filepath } = parseGitUrl(base);\n    updated = new URL(base);\n    const repoRootPath = trimEnd(\n      updated.pathname.substring(0, updated.pathname.length - filepath.length),\n      '/',\n    );\n    updated.pathname = `${repoRootPath}${url}`;\n  } else {\n    // For relative URLs, just let the default URL constructor handle the\n    // resolving. Note that this essentially will treat the last segment of the\n    // base as a file - NOT a folder - unless the url ends in a slash.\n    updated = new URL(url, base);\n  }\n\n  updated.search = new URL(base).search;\n  if (lineNumber) {\n    updated.hash = `L${lineNumber}`;\n  }\n  return updated.toString();\n}\n","/*\n * Copyright 2020 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Config } from '@backstage/config';\n\nconst AMAZON_AWS_HOST = 'amazonaws.com';\n\n/**\n * The configuration parameters for a single AWS S3 provider.\n *\n * @public\n */\nexport type AwsS3IntegrationConfig = {\n  /**\n   * Host, derived from endpoint, and defaults to amazonaws.com\n   */\n  host: string;\n\n  /**\n   * (Optional) AWS Endpoint.\n   * The endpoint URI to send requests to. The default endpoint is built from the configured region.\n   * @see https://docs.aws.amazon.com/AWSJavaScriptSDK/latest/AWS/S3.html#constructor-property\n   *\n   * Supports non-AWS providers, e.g. for LocalStack, endpoint may look like http://localhost:4566\n   */\n  endpoint?: string;\n\n  /**\n   * (Optional) Whether to use path style URLs when communicating with S3.\n   * Defaults to false.\n   * This allows providers like LocalStack, Minio and Wasabi (and possibly others) to be used.\n   */\n  s3ForcePathStyle?: boolean;\n\n  /**\n   * (Optional) User access key id\n   */\n  accessKeyId?: string;\n\n  /**\n   * (Optional) User secret access key\n   */\n  secretAccessKey?: string;\n\n  /**\n   * (Optional) ARN of role to be assumed\n   */\n  roleArn?: string;\n\n  /**\n   * (Optional) External ID to use when assuming role\n   */\n  externalId?: string;\n};\n\n/**\n * Reads a single Aws S3 integration config.\n *\n * @param config - The config object of a single integration\n * @public\n */\n\nexport function readAwsS3IntegrationConfig(\n  config: Config,\n): AwsS3IntegrationConfig {\n  const endpoint = config.getOptionalString('endpoint');\n  const s3ForcePathStyle =\n    config.getOptionalBoolean('s3ForcePathStyle') ?? false;\n  let host;\n  let pathname;\n  if (endpoint) {\n    try {\n      const url = new URL(endpoint);\n      host = url.host;\n      pathname = url.pathname;\n    } catch {\n      throw new Error(\n        `invalid awsS3 integration config, endpoint '${endpoint}' is not a valid URL`,\n      );\n    }\n    if (pathname !== '/') {\n      throw new Error(\n        `invalid awsS3 integration config, endpoints cannot contain path, got '${endpoint}'`,\n      );\n    }\n  } else {\n    host = AMAZON_AWS_HOST;\n  }\n\n  const accessKeyId = config.getOptionalString('accessKeyId');\n  const secretAccessKey = config.getOptionalString('secretAccessKey');\n  const roleArn = config.getOptionalString('roleArn');\n  const externalId = config.getOptionalString('externalId');\n\n  return {\n    host,\n    endpoint,\n    s3ForcePathStyle,\n    accessKeyId,\n    secretAccessKey,\n    roleArn,\n    externalId,\n  };\n}\n\n/**\n * Reads a set of AWS S3 integration configs, and inserts some defaults for\n * public Amazon AWS if not specified.\n *\n * @param configs - The config objects of the integrations\n * @public\n */\nexport function readAwsS3IntegrationConfigs(\n  configs: Config[],\n): AwsS3IntegrationConfig[] {\n  // First read all the explicit integrations\n  const result = configs.map(readAwsS3IntegrationConfig);\n\n  // If no explicit amazonaws.com integration was added, put one in the list as\n  // a convenience\n  if (!result.some(c => c.host === AMAZON_AWS_HOST)) {\n    result.push({\n      host: AMAZON_AWS_HOST,\n    });\n  }\n  return result;\n}\n","/*\n * Copyright 2020 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { basicIntegrations, defaultScmResolveUrl } from '../helpers';\nimport { ScmIntegration, ScmIntegrationsFactory } from '../types';\nimport { AwsS3IntegrationConfig, readAwsS3IntegrationConfigs } from './config';\n\n/**\n * Integrates with AWS S3 or compatible solutions.\n *\n * @public\n */\nexport class AwsS3Integration implements ScmIntegration {\n  static factory: ScmIntegrationsFactory<AwsS3Integration> = ({ config }) => {\n    const configs = readAwsS3IntegrationConfigs(\n      config.getOptionalConfigArray('integrations.awsS3') ?? [],\n    );\n    return basicIntegrations(\n      configs.map(c => new AwsS3Integration(c)),\n      i => i.config.host,\n    );\n  };\n\n  get type(): string {\n    return 'awsS3';\n  }\n\n  get title(): string {\n    return this.integrationConfig.host;\n  }\n\n  get config(): AwsS3IntegrationConfig {\n    return this.integrationConfig;\n  }\n\n  constructor(private readonly integrationConfig: AwsS3IntegrationConfig) {}\n\n  resolveUrl(options: {\n    url: string;\n    base: string;\n    lineNumber?: number | undefined;\n  }): string {\n    const resolved = defaultScmResolveUrl(options);\n    return resolved;\n  }\n\n  resolveEditUrl(url: string): string {\n    // TODO: Implement edit URL for awsS3\n    return url;\n  }\n}\n","/*\n * Copyright 2021 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nconst VERSION_PREFIX_GIT_BRANCH = 'GB';\n\nexport class AzureUrl {\n  /**\n   * Parses an azure URL as copied from the browser address bar.\n   *\n   * Throws an error if the URL is not a valid azure repo URL.\n   */\n  static fromRepoUrl(repoUrl: string): AzureUrl {\n    const url = new URL(repoUrl);\n\n    let owner;\n    let project;\n    let repo;\n\n    const parts = url.pathname.split('/').map(part => decodeURIComponent(part));\n    if (parts[2] === '_git') {\n      owner = parts[1];\n      project = repo = parts[3];\n    } else if (parts[3] === '_git') {\n      owner = parts[1];\n      project = parts[2];\n      repo = parts[4];\n    } else if (parts[4] === '_git') {\n      owner = `${parts[1]}/${parts[2]}`;\n      project = parts[3];\n      repo = parts[5];\n    }\n\n    if (!owner || !project || !repo) {\n      throw new Error('Azure URL must point to a git repository');\n    }\n\n    const path = url.searchParams.get('path') ?? undefined;\n\n    let ref;\n    const version = url.searchParams.get('version');\n    if (version) {\n      const prefix = version.slice(0, 2);\n      if (prefix !== 'GB') {\n        throw new Error('Azure URL version must point to a git branch');\n      }\n      ref = version.slice(2);\n    }\n\n    return new AzureUrl(url.origin, owner, project, repo, path, ref);\n  }\n\n  #origin: string;\n  #owner: string;\n  #project: string;\n  #repo: string;\n  #path?: string;\n  #ref?: string;\n\n  private constructor(\n    origin: string,\n    owner: string,\n    project: string,\n    repo: string,\n    path?: string,\n    ref?: string,\n  ) {\n    this.#origin = origin;\n    this.#owner = owner;\n    this.#project = project;\n    this.#repo = repo;\n    this.#path = path;\n    this.#ref = ref;\n  }\n\n  #baseUrl = (...parts: string[]): URL => {\n    const url = new URL(this.#origin);\n    url.pathname = parts.map(part => encodeURIComponent(part)).join('/');\n    return url;\n  };\n\n  /**\n   * Returns a repo URL that can be used to navigate to the resource in azure.\n   *\n   * Throws an error if the URL is not a valid azure repo URL.\n   */\n  toRepoUrl(): string {\n    let url;\n    if (this.#project === this.#repo) {\n      url = this.#baseUrl(this.#owner, '_git', this.#repo);\n    } else {\n      url = this.#baseUrl(this.#owner, this.#project, '_git', this.#repo);\n    }\n\n    if (this.#path) {\n      url.searchParams.set('path', this.#path);\n    }\n    if (this.#ref) {\n      url.searchParams.set('version', VERSION_PREFIX_GIT_BRANCH + this.#ref);\n    }\n\n    return url.toString();\n  }\n\n  /**\n   * Returns the file download URL for this azure resource.\n   *\n   * Throws an error if the URL does not point to a file.\n   */\n  toFileUrl(): string {\n    if (!this.#path) {\n      throw new Error(\n        'Azure URL must point to a specific path to be able to download a file',\n      );\n    }\n\n    const url = this.#baseUrl(\n      this.#owner,\n      this.#project,\n      '_apis',\n      'git',\n      'repositories',\n      this.#repo,\n      'items',\n    );\n    url.searchParams.set('api-version', '6.0');\n    url.searchParams.set('path', this.#path);\n\n    if (this.#ref) {\n      url.searchParams.set('version', this.#ref);\n    }\n\n    return url.toString();\n  }\n\n  /**\n   * Returns the archive download URL for this azure resource.\n   *\n   * Throws an error if the URL does not point to a repo.\n   */\n  toArchiveUrl(): string {\n    const url = this.#baseUrl(\n      this.#owner,\n      this.#project,\n      '_apis',\n      'git',\n      'repositories',\n      this.#repo,\n      'items',\n    );\n    url.searchParams.set('recursionLevel', 'full');\n    url.searchParams.set('download', 'true');\n    url.searchParams.set('api-version', '6.0');\n\n    if (this.#path) {\n      url.searchParams.set('scopePath', this.#path);\n    }\n    if (this.#ref) {\n      url.searchParams.set('version', this.#ref);\n    }\n\n    return url.toString();\n  }\n\n  /**\n   * Returns the API url for fetching commits from a branch for this azure resource.\n   *\n   * Throws an error if the URL does not point to a commit.\n   */\n  toCommitsUrl(): string {\n    const url = this.#baseUrl(\n      this.#owner,\n      this.#project,\n      '_apis',\n      'git',\n      'repositories',\n      this.#repo,\n      'commits',\n    );\n    url.searchParams.set('api-version', '6.0');\n\n    if (this.#ref) {\n      url.searchParams.set('searchCriteria.itemVersion.version', this.#ref);\n    }\n\n    return url.toString();\n  }\n\n  /**\n   * Returns the name of the owner, a user or an organization.\n   */\n  getOwner(): string {\n    return this.#owner;\n  }\n\n  /**\n   * Returns the name of the project.\n   */\n  getProject(): string {\n    return this.#project;\n  }\n\n  /**\n   * Returns the name of the repo.\n   */\n  getRepo(): string {\n    return this.#repo;\n  }\n\n  /**\n   * Returns the file path within the repo if the URL contains one.\n   */\n  getPath(): string | undefined {\n    return this.#path;\n  }\n\n  /**\n   * Returns the git ref in the repo if the URL contains one.\n   */\n  getRef(): string | undefined {\n    return this.#ref;\n  }\n}\n","/*\n * Copyright 2020 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Config } from '@backstage/config';\nimport { isValidHost } from '../helpers';\n\nconst AZURE_HOST = 'dev.azure.com';\n\n/**\n * The configuration parameters for a single Azure provider.\n *\n * @public\n */\nexport type AzureIntegrationConfig = {\n  /**\n   * The host of the target that this matches on, e.g. \"dev.azure.com\".\n   *\n   * Currently only \"dev.azure.com\" is supported.\n   */\n  host: string;\n\n  /**\n   * The authorization token to use for requests.\n   *\n   * If no token is specified, anonymous access is used.\n   */\n  token?: string;\n};\n\n/**\n * Reads a single Azure integration config.\n *\n * @param config - The config object of a single integration\n * @public\n */\nexport function readAzureIntegrationConfig(\n  config: Config,\n): AzureIntegrationConfig {\n  const host = config.getOptionalString('host') ?? AZURE_HOST;\n  const token = config.getOptionalString('token');\n\n  if (!isValidHost(host)) {\n    throw new Error(\n      `Invalid Azure integration config, '${host}' is not a valid host`,\n    );\n  }\n\n  return { host, token };\n}\n\n/**\n * Reads a set of Azure integration configs, and inserts some defaults for\n * public Azure if not specified.\n *\n * @param configs - All of the integration config objects\n * @public\n */\nexport function readAzureIntegrationConfigs(\n  configs: Config[],\n): AzureIntegrationConfig[] {\n  // First read all the explicit integrations\n  const result = configs.map(readAzureIntegrationConfig);\n\n  // If no explicit dev.azure.com integration was added, put one in the list as\n  // a convenience\n  if (!result.some(c => c.host === AZURE_HOST)) {\n    result.push({ host: AZURE_HOST });\n  }\n\n  return result;\n}\n","/*\n * Copyright 2020 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { basicIntegrations, isValidUrl } from '../helpers';\nimport { ScmIntegration, ScmIntegrationsFactory } from '../types';\nimport { AzureUrl } from './AzureUrl';\nimport { AzureIntegrationConfig, readAzureIntegrationConfigs } from './config';\n\n/**\n * Microsoft Azure based integration.\n *\n * @public\n */\nexport class AzureIntegration implements ScmIntegration {\n  static factory: ScmIntegrationsFactory<AzureIntegration> = ({ config }) => {\n    const configs = readAzureIntegrationConfigs(\n      config.getOptionalConfigArray('integrations.azure') ?? [],\n    );\n    return basicIntegrations(\n      configs.map(c => new AzureIntegration(c)),\n      i => i.config.host,\n    );\n  };\n\n  constructor(private readonly integrationConfig: AzureIntegrationConfig) {}\n\n  get type(): string {\n    return 'azure';\n  }\n\n  get title(): string {\n    return this.integrationConfig.host;\n  }\n\n  get config(): AzureIntegrationConfig {\n    return this.integrationConfig;\n  }\n\n  /*\n   * Azure repo URLs on the form with a `path` query param are treated specially.\n   *\n   * Example base URL: https://dev.azure.com/organization/project/_git/repository?path=%2Fcatalog-info.yaml\n   */\n  resolveUrl(options: {\n    url: string;\n    base: string;\n    lineNumber?: number;\n  }): string {\n    const { url, base } = options;\n\n    // If we can parse the url, it is absolute - then return it verbatim\n    if (isValidUrl(url)) {\n      return url;\n    }\n\n    try {\n      const azureUrl = AzureUrl.fromRepoUrl(base);\n      const newUrl = new URL(base);\n\n      // We lean on the URL path resolution logic to resolve the path param\n      const mockBaseUrl = new URL(`https://a.com${azureUrl.getPath() ?? ''}`);\n      const updatedPath = new URL(url, mockBaseUrl).pathname;\n      newUrl.searchParams.set('path', updatedPath);\n\n      if (options.lineNumber) {\n        newUrl.searchParams.set('line', String(options.lineNumber));\n        newUrl.searchParams.set('lineEnd', String(options.lineNumber + 1));\n        newUrl.searchParams.set('lineStartColumn', '1');\n        newUrl.searchParams.set('lineEndColumn', '1');\n      }\n\n      return newUrl.toString();\n    } catch {\n      // If not an actual file path within a repo, treat the URL as raw\n      return new URL(url, base).toString();\n    }\n  }\n\n  resolveEditUrl(url: string): string {\n    // TODO: Implement edit URL for Azure, fallback to view url as I don't know\n    // how azure works.\n    return url;\n  }\n}\n","/*\n * Copyright 2020 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { AzureUrl } from './AzureUrl';\nimport { AzureIntegrationConfig } from './config';\n\n/**\n * Given a URL pointing to a file on a provider, returns a URL that is suitable\n * for fetching the contents of the data.\n *\n * @remarks\n *\n * Converts\n * - from: `https://dev.azure.com/{organization}/{project}/_git/reponame?path={path}&version=GB{commitOrBranch}&_a=contents`\n * - to:   `https://dev.azure.com/{organization}/{project}/_apis/git/repositories/reponame/items?path={path}&version={commitOrBranch}`\n *\n * @param url - A URL pointing to a file\n * @public\n */\nexport function getAzureFileFetchUrl(url: string): string {\n  return AzureUrl.fromRepoUrl(url).toFileUrl();\n}\n\n/**\n * Given a URL pointing to a path on a provider, returns a URL that is suitable\n * for downloading the subtree.\n *\n * @param url - A URL pointing to a path\n * @public\n */\nexport function getAzureDownloadUrl(url: string): string {\n  return AzureUrl.fromRepoUrl(url).toArchiveUrl();\n}\n\n/**\n * Given a URL, return the API URL to fetch commits on the branch.\n *\n * @param url - A URL pointing to a repository or a sub-path\n * @public\n */\nexport function getAzureCommitsUrl(url: string): string {\n  return AzureUrl.fromRepoUrl(url).toCommitsUrl();\n}\n\n/**\n * Gets the request options necessary to make requests to a given provider.\n *\n * @param config - The relevant provider config\n * @public\n */\nexport function getAzureRequestOptions(\n  config: AzureIntegrationConfig,\n  additionalHeaders?: Record<string, string>,\n): { headers: Record<string, string> } {\n  const headers: Record<string, string> = additionalHeaders\n    ? { ...additionalHeaders }\n    : {};\n\n  if (config.token) {\n    const buffer = Buffer.from(`:${config.token}`, 'utf8');\n    headers.Authorization = `Basic ${buffer.toString('base64')}`;\n  }\n\n  return { headers };\n}\n","/*\n * Copyright 2020 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Config } from '@backstage/config';\nimport { trimEnd } from 'lodash';\nimport { isValidHost } from '../helpers';\n\nconst BITBUCKET_HOST = 'bitbucket.org';\nconst BITBUCKET_API_BASE_URL = 'https://api.bitbucket.org/2.0';\n\n/**\n * The configuration parameters for a single Bitbucket API provider.\n *\n * @public\n * @deprecated bitbucket integration replaced by integrations bitbucketCloud and bitbucketServer.\n */\nexport type BitbucketIntegrationConfig = {\n  /**\n   * The host of the target that this matches on, e.g. \"bitbucket.org\"\n   */\n  host: string;\n\n  /**\n   * The base URL of the API of this provider, e.g. \"https://api.bitbucket.org/2.0\",\n   * with no trailing slash.\n   *\n   * Values omitted at the optional property at the app-config will be deduced\n   * from the \"host\" value.\n   */\n  apiBaseUrl: string;\n\n  /**\n   * The authorization token to use for requests to a Bitbucket Server provider.\n   *\n   * See https://confluence.atlassian.com/bitbucketserver/personal-access-tokens-939515499.html\n   *\n   * If no token is specified, anonymous access is used.\n   */\n  token?: string;\n\n  /**\n   * The username to use for requests to Bitbucket Cloud (bitbucket.org).\n   */\n  username?: string;\n\n  /**\n   * Authentication with Bitbucket Cloud (bitbucket.org) is done using app passwords.\n   *\n   * See https://support.atlassian.com/bitbucket-cloud/docs/app-passwords/\n   */\n  appPassword?: string;\n};\n\n/**\n * Reads a single Bitbucket integration config.\n *\n * @param config - The config object of a single integration\n * @public\n * @deprecated bitbucket integration replaced by integrations bitbucketCloud and bitbucketServer.\n */\nexport function readBitbucketIntegrationConfig(\n  config: Config,\n): BitbucketIntegrationConfig {\n  const host = config.getOptionalString('host') ?? BITBUCKET_HOST;\n  let apiBaseUrl = config.getOptionalString('apiBaseUrl');\n  const token = config.getOptionalString('token');\n  const username = config.getOptionalString('username');\n  const appPassword = config.getOptionalString('appPassword');\n\n  if (!isValidHost(host)) {\n    throw new Error(\n      `Invalid Bitbucket integration config, '${host}' is not a valid host`,\n    );\n  }\n\n  if (apiBaseUrl) {\n    apiBaseUrl = trimEnd(apiBaseUrl, '/');\n  } else if (host === BITBUCKET_HOST) {\n    apiBaseUrl = BITBUCKET_API_BASE_URL;\n  } else {\n    apiBaseUrl = `https://${host}/rest/api/1.0`;\n  }\n\n  return {\n    host,\n    apiBaseUrl,\n    token,\n    username,\n    appPassword,\n  };\n}\n\n/**\n * Reads a set of Bitbucket integration configs, and inserts some defaults for\n * public Bitbucket if not specified.\n *\n * @param configs - All of the integration config objects\n * @public\n * @deprecated bitbucket integration replaced by integrations bitbucketCloud and bitbucketServer.\n */\nexport function readBitbucketIntegrationConfigs(\n  configs: Config[],\n): BitbucketIntegrationConfig[] {\n  // First read all the explicit integrations\n  const result = configs.map(readBitbucketIntegrationConfig);\n\n  // If no explicit bitbucket.org integration was added, put one in the list as\n  // a convenience\n  if (!result.some(c => c.host === BITBUCKET_HOST)) {\n    result.push({\n      host: BITBUCKET_HOST,\n      apiBaseUrl: BITBUCKET_API_BASE_URL,\n    });\n  }\n\n  return result;\n}\n","/*\n * Copyright 2020 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport parseGitUrl from 'git-url-parse';\nimport { basicIntegrations, defaultScmResolveUrl } from '../helpers';\nimport { ScmIntegration, ScmIntegrationsFactory } from '../types';\nimport {\n  BitbucketIntegrationConfig,\n  readBitbucketIntegrationConfigs,\n} from './config';\n\n/**\n * A Bitbucket based integration.\n *\n * @public\n * @deprecated replaced by the integrations bitbucketCloud and bitbucketServer.\n */\nexport class BitbucketIntegration implements ScmIntegration {\n  static factory: ScmIntegrationsFactory<BitbucketIntegration> = ({\n    config,\n  }) => {\n    const configs = readBitbucketIntegrationConfigs(\n      config.getOptionalConfigArray('integrations.bitbucket') ?? [\n        // if integrations.bitbucket was not used assume the use was migrated to the new configs\n        // and backport for the deprecated integration to be usable for other parts of the system\n        // until these got migrated\n        ...(config.getOptionalConfigArray('integrations.bitbucketCloud') ?? []),\n        ...(config.getOptionalConfigArray('integrations.bitbucketServer') ??\n          []),\n      ],\n    );\n    return basicIntegrations(\n      configs.map(c => new BitbucketIntegration(c)),\n      i => i.config.host,\n    );\n  };\n\n  constructor(private readonly integrationConfig: BitbucketIntegrationConfig) {}\n\n  get type(): string {\n    return 'bitbucket';\n  }\n\n  get title(): string {\n    return this.integrationConfig.host;\n  }\n\n  get config(): BitbucketIntegrationConfig {\n    return this.integrationConfig;\n  }\n\n  resolveUrl(options: {\n    url: string;\n    base: string;\n    lineNumber?: number;\n  }): string {\n    const resolved = defaultScmResolveUrl(options);\n    if (!options.lineNumber) {\n      return resolved;\n    }\n\n    const url = new URL(resolved);\n\n    if (this.integrationConfig.host === 'bitbucket.org') {\n      // Bitbucket Cloud uses the syntax #lines-{start}[:{end}][,...]\n      url.hash = `lines-${options.lineNumber}`;\n    } else {\n      // Bitbucket Server uses the syntax #{start}[-{end}][,...]\n      url.hash = `${options.lineNumber}`;\n    }\n\n    return url.toString();\n  }\n\n  resolveEditUrl(url: string): string {\n    const urlData = parseGitUrl(url);\n    const editUrl = new URL(url);\n\n    editUrl.searchParams.set('mode', 'edit');\n    // TODO: Not sure what spa=0 does, at least bitbucket.org doesn't support it\n    // but this is taken over from the initial implementation.\n    editUrl.searchParams.set('spa', '0');\n    editUrl.searchParams.set('at', urlData.ref);\n    return editUrl.toString();\n  }\n}\n","/*\n * Copyright 2020 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport fetch from 'cross-fetch';\nimport parseGitUrl from 'git-url-parse';\nimport { BitbucketIntegrationConfig } from './config';\n\n/**\n * Given a URL pointing to a path on a provider, returns the default branch.\n *\n * @param url - A URL pointing to a path\n * @param config - The relevant provider config\n * @public\n * @deprecated no longer in use, bitbucket integration replaced by integrations bitbucketCloud and bitbucketServer.\n */\nexport async function getBitbucketDefaultBranch(\n  url: string,\n  config: BitbucketIntegrationConfig,\n): Promise<string> {\n  const { name: repoName, owner: project, resource } = parseGitUrl(url);\n\n  const isHosted = resource === 'bitbucket.org';\n  // Bitbucket Server https://docs.atlassian.com/bitbucket-server/rest/7.9.0/bitbucket-rest.html#idp184\n  let branchUrl = isHosted\n    ? `${config.apiBaseUrl}/repositories/${project}/${repoName}`\n    : `${config.apiBaseUrl}/projects/${project}/repos/${repoName}/default-branch`;\n\n  let response = await fetch(branchUrl, getBitbucketRequestOptions(config));\n\n  if (response.status === 404 && !isHosted) {\n    // First try the new format, and then if it gets specifically a 404 it should try the old format\n    // (to support old  Atlassian Bitbucket v5.11.1 format )\n    branchUrl = `${config.apiBaseUrl}/projects/${project}/repos/${repoName}/branches/default`;\n    response = await fetch(branchUrl, getBitbucketRequestOptions(config));\n  }\n\n  if (!response.ok) {\n    const message = `Failed to retrieve default branch from ${branchUrl}, ${response.status} ${response.statusText}`;\n    throw new Error(message);\n  }\n\n  let defaultBranch;\n  if (isHosted) {\n    const repoInfo = await response.json();\n    defaultBranch = repoInfo.mainbranch.name;\n  } else {\n    const { displayId } = await response.json();\n    defaultBranch = displayId;\n  }\n  if (!defaultBranch) {\n    throw new Error(\n      `Failed to read default branch from ${branchUrl}. ` +\n        `Response ${response.status} ${response.json()}`,\n    );\n  }\n  return defaultBranch;\n}\n\n/**\n * Given a URL pointing to a path on a provider, returns a URL that is suitable\n * for downloading the subtree.\n *\n * @param url - A URL pointing to a path\n * @param config - The relevant provider config\n * @public\n * @deprecated no longer in use, bitbucket integration replaced by integrations bitbucketCloud and bitbucketServer.\n */\nexport async function getBitbucketDownloadUrl(\n  url: string,\n  config: BitbucketIntegrationConfig,\n): Promise<string> {\n  const {\n    name: repoName,\n    owner: project,\n    ref,\n    protocol,\n    resource,\n    filepath,\n  } = parseGitUrl(url);\n\n  const isHosted = resource === 'bitbucket.org';\n\n  let branch = ref;\n  if (!branch) {\n    branch = await getBitbucketDefaultBranch(url, config);\n  }\n  // path will limit the downloaded content\n  // /docs will only download the docs folder and everything below it\n  // /docs/index.md will download the docs folder and everything below it\n  const path = filepath ? `&path=${encodeURIComponent(filepath)}` : '';\n  const archiveUrl = isHosted\n    ? `${protocol}://${resource}/${project}/${repoName}/get/${branch}.tar.gz`\n    : `${config.apiBaseUrl}/projects/${project}/repos/${repoName}/archive?format=tgz&at=${branch}&prefix=${project}-${repoName}${path}`;\n\n  return archiveUrl;\n}\n\n/**\n * Given a URL pointing to a file on a provider, returns a URL that is suitable\n * for fetching the contents of the data.\n *\n * @remarks\n *\n * Converts\n * from: https://bitbucket.org/orgname/reponame/src/master/file.yaml\n * to:   https://api.bitbucket.org/2.0/repositories/orgname/reponame/src/master/file.yaml\n *\n * @param url - A URL pointing to a file\n * @param config - The relevant provider config\n * @public\n * @deprecated no longer in use, bitbucket integration replaced by integrations bitbucketCloud and bitbucketServer.\n */\nexport function getBitbucketFileFetchUrl(\n  url: string,\n  config: BitbucketIntegrationConfig,\n): string {\n  try {\n    const { owner, name, ref, filepathtype, filepath } = parseGitUrl(url);\n    if (\n      !owner ||\n      !name ||\n      (filepathtype !== 'browse' &&\n        filepathtype !== 'raw' &&\n        filepathtype !== 'src')\n    ) {\n      throw new Error('Invalid Bitbucket URL or file path');\n    }\n\n    const pathWithoutSlash = filepath.replace(/^\\//, '');\n\n    if (config.host === 'bitbucket.org') {\n      if (!ref) {\n        throw new Error('Invalid Bitbucket URL or file path');\n      }\n      return `${config.apiBaseUrl}/repositories/${owner}/${name}/src/${ref}/${pathWithoutSlash}`;\n    }\n    return `${config.apiBaseUrl}/projects/${owner}/repos/${name}/raw/${pathWithoutSlash}?at=${ref}`;\n  } catch (e) {\n    throw new Error(`Incorrect URL: ${url}, ${e}`);\n  }\n}\n\n/**\n * Gets the request options necessary to make requests to a given provider.\n *\n * @param config - The relevant provider config\n * @public\n * @deprecated no longer in use, bitbucket integration replaced by integrations bitbucketCloud and bitbucketServer.\n */\nexport function getBitbucketRequestOptions(\n  config: BitbucketIntegrationConfig,\n): { headers: Record<string, string> } {\n  const headers: Record<string, string> = {};\n\n  if (config.token) {\n    headers.Authorization = `Bearer ${config.token}`;\n  } else if (config.username && config.appPassword) {\n    const buffer = Buffer.from(\n      `${config.username}:${config.appPassword}`,\n      'utf8',\n    );\n    headers.Authorization = `Basic ${buffer.toString('base64')}`;\n  }\n\n  return {\n    headers,\n  };\n}\n","/*\n * Copyright 2020 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Config } from '@backstage/config';\n\nconst BITBUCKET_CLOUD_HOST = 'bitbucket.org';\nconst BITBUCKET_CLOUD_API_BASE_URL = 'https://api.bitbucket.org/2.0';\n\n/**\n * The configuration parameters for a single Bitbucket Cloud API provider.\n *\n * @public\n */\nexport type BitbucketCloudIntegrationConfig = {\n  /**\n   * Constant. bitbucket.org\n   */\n  host: string;\n\n  /**\n   * Constant. https://api.bitbucket.org/2.0\n   */\n  apiBaseUrl: string;\n\n  /**\n   * The username to use for requests to Bitbucket Cloud (bitbucket.org).\n   */\n  username?: string;\n\n  /**\n   * Authentication with Bitbucket Cloud (bitbucket.org) is done using app passwords.\n   *\n   * See https://support.atlassian.com/bitbucket-cloud/docs/app-passwords/\n   */\n  appPassword?: string;\n};\n\n/**\n * Reads a single Bitbucket Cloud integration config.\n *\n * @param config - The config object of a single integration\n * @public\n */\nexport function readBitbucketCloudIntegrationConfig(\n  config: Config,\n): BitbucketCloudIntegrationConfig {\n  const host = BITBUCKET_CLOUD_HOST;\n  const apiBaseUrl = BITBUCKET_CLOUD_API_BASE_URL;\n  // If config is provided, we assume authenticated access is desired\n  // (as the anonymous one is provided by default).\n  const username = config.getString('username');\n  const appPassword = config.getString('appPassword');\n\n  return {\n    host,\n    apiBaseUrl,\n    username,\n    appPassword,\n  };\n}\n\n/**\n * Reads a set of Bitbucket Cloud integration configs,\n * and inserts one for public Bitbucket Cloud if none specified.\n *\n * @param configs - All of the integration config objects\n * @public\n */\nexport function readBitbucketCloudIntegrationConfigs(\n  configs: Config[],\n): BitbucketCloudIntegrationConfig[] {\n  // First read all the explicit integrations\n  const result = configs.map(readBitbucketCloudIntegrationConfig);\n\n  // If no explicit bitbucket.org integration was added,\n  // put one in the list as a convenience\n  if (result.length === 0) {\n    result.push({\n      host: BITBUCKET_CLOUD_HOST,\n      apiBaseUrl: BITBUCKET_CLOUD_API_BASE_URL,\n    });\n  }\n\n  return result;\n}\n","/*\n * Copyright 2020 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport parseGitUrl from 'git-url-parse';\nimport { basicIntegrations, defaultScmResolveUrl } from '../helpers';\nimport { ScmIntegration, ScmIntegrationsFactory } from '../types';\nimport {\n  BitbucketCloudIntegrationConfig,\n  readBitbucketCloudIntegrationConfigs,\n} from './config';\n\n/**\n * A Bitbucket Cloud based integration.\n *\n * @public\n */\nexport class BitbucketCloudIntegration implements ScmIntegration {\n  static factory: ScmIntegrationsFactory<BitbucketCloudIntegration> = ({\n    config,\n  }) => {\n    const configs = readBitbucketCloudIntegrationConfigs(\n      config.getOptionalConfigArray('integrations.bitbucketCloud') ?? [],\n    );\n    return basicIntegrations(\n      configs.map(c => new BitbucketCloudIntegration(c)),\n      i => i.config.host,\n    );\n  };\n\n  constructor(\n    private readonly integrationConfig: BitbucketCloudIntegrationConfig,\n  ) {}\n\n  get type(): string {\n    return 'bitbucketCloud';\n  }\n\n  get title(): string {\n    return this.integrationConfig.host;\n  }\n\n  get config(): BitbucketCloudIntegrationConfig {\n    return this.integrationConfig;\n  }\n\n  resolveUrl(options: {\n    url: string;\n    base: string;\n    lineNumber?: number;\n  }): string {\n    const resolved = defaultScmResolveUrl(options);\n\n    // Bitbucket Cloud line numbers use the syntax #lines-42, rather than #L42\n    if (options.lineNumber) {\n      const url = new URL(resolved);\n\n      url.hash = `lines-${options.lineNumber}`;\n      return url.toString();\n    }\n\n    return resolved;\n  }\n\n  resolveEditUrl(url: string): string {\n    const urlData = parseGitUrl(url);\n    const editUrl = new URL(url);\n\n    editUrl.searchParams.set('mode', 'edit');\n    editUrl.searchParams.set('at', urlData.ref);\n    return editUrl.toString();\n  }\n}\n","/*\n * Copyright 2020 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport fetch from 'cross-fetch';\nimport parseGitUrl from 'git-url-parse';\nimport { BitbucketCloudIntegrationConfig } from './config';\n\n/**\n * Given a URL pointing to a path on a provider, returns the default branch.\n *\n * @param url - A URL pointing to a path\n * @param config - The relevant provider config\n * @public\n */\nexport async function getBitbucketCloudDefaultBranch(\n  url: string,\n  config: BitbucketCloudIntegrationConfig,\n): Promise<string> {\n  const { name: repoName, owner: project } = parseGitUrl(url);\n\n  const branchUrl = `${config.apiBaseUrl}/repositories/${project}/${repoName}`;\n  const response = await fetch(\n    branchUrl,\n    getBitbucketCloudRequestOptions(config),\n  );\n\n  if (!response.ok) {\n    const message = `Failed to retrieve default branch from ${branchUrl}, ${response.status} ${response.statusText}`;\n    throw new Error(message);\n  }\n\n  const repoInfo = await response.json();\n  const defaultBranch = repoInfo.mainbranch.name;\n  if (!defaultBranch) {\n    throw new Error(\n      `Failed to read default branch from ${branchUrl}. ` +\n        `Response ${response.status} ${response.json()}`,\n    );\n  }\n  return defaultBranch;\n}\n\n/**\n * Given a URL pointing to a path on a provider, returns a URL that is suitable\n * for downloading the subtree.\n *\n * @param url - A URL pointing to a path\n * @param config - The relevant provider config\n * @public\n */\nexport async function getBitbucketCloudDownloadUrl(\n  url: string,\n  config: BitbucketCloudIntegrationConfig,\n): Promise<string> {\n  const {\n    name: repoName,\n    owner: project,\n    ref,\n    protocol,\n    resource,\n  } = parseGitUrl(url);\n\n  let branch = ref;\n  if (!branch) {\n    branch = await getBitbucketCloudDefaultBranch(url, config);\n  }\n  return `${protocol}://${resource}/${project}/${repoName}/get/${branch}.tar.gz`;\n}\n\n/**\n * Given a URL pointing to a file on a provider, returns a URL that is suitable\n * for fetching the contents of the data.\n *\n * @remarks\n *\n * Converts\n * from: https://bitbucket.org/orgname/reponame/src/master/file.yaml\n * to:   https://api.bitbucket.org/2.0/repositories/orgname/reponame/src/master/file.yaml\n *\n * @param url - A URL pointing to a file\n * @param config - The relevant provider config\n * @public\n */\nexport function getBitbucketCloudFileFetchUrl(\n  url: string,\n  config: BitbucketCloudIntegrationConfig,\n): string {\n  try {\n    const { owner, name, ref, filepathtype, filepath } = parseGitUrl(url);\n    if (!owner || !name || (filepathtype !== 'src' && filepathtype !== 'raw')) {\n      throw new Error('Invalid Bitbucket Cloud URL or file path');\n    }\n\n    const pathWithoutSlash = filepath.replace(/^\\//, '');\n\n    if (!ref) {\n      throw new Error('Invalid Bitbucket Cloud URL or file path');\n    }\n    return `${config.apiBaseUrl}/repositories/${owner}/${name}/src/${ref}/${pathWithoutSlash}`;\n  } catch (e) {\n    throw new Error(`Incorrect URL: ${url}, ${e}`);\n  }\n}\n\n/**\n * Gets the request options necessary to make requests to a given provider.\n *\n * @param config - The relevant provider config\n * @public\n */\nexport function getBitbucketCloudRequestOptions(\n  config: BitbucketCloudIntegrationConfig,\n): { headers: Record<string, string> } {\n  const headers: Record<string, string> = {};\n\n  if (config.username && config.appPassword) {\n    const buffer = Buffer.from(\n      `${config.username}:${config.appPassword}`,\n      'utf8',\n    );\n    headers.Authorization = `Basic ${buffer.toString('base64')}`;\n  }\n\n  return {\n    headers,\n  };\n}\n","/*\n * Copyright 2020 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Config } from '@backstage/config';\nimport { trimEnd } from 'lodash';\nimport { isValidHost } from '../helpers';\n\n/**\n * The configuration parameters for a single Bitbucket Server API provider.\n *\n * @public\n */\nexport type BitbucketServerIntegrationConfig = {\n  /**\n   * The host of the target that this matches on, e.g. \"bitbucket.company.com\"\n   */\n  host: string;\n\n  /**\n   * The base URL of the API of this provider, e.g. \"https://<host>/rest/api/1.0\",\n   * with no trailing slash.\n   *\n   * The API will always be preferred if both its base URL and a token are\n   * present.\n   */\n  apiBaseUrl: string;\n\n  /**\n   * The authorization token to use for requests to a Bitbucket Server provider.\n   *\n   * See https://confluence.atlassian.com/bitbucketserver/personal-access-tokens-939515499.html\n   *\n   * If no token is specified, anonymous access is used.\n   */\n  token?: string;\n};\n\n/**\n * Reads a single Bitbucket Server integration config.\n *\n * @param config - The config object of a single integration\n * @public\n */\nexport function readBitbucketServerIntegrationConfig(\n  config: Config,\n): BitbucketServerIntegrationConfig {\n  const host = config.getString('host');\n  let apiBaseUrl = config.getOptionalString('apiBaseUrl');\n  const token = config.getOptionalString('token');\n\n  if (!isValidHost(host)) {\n    throw new Error(\n      `Invalid Bitbucket Server integration config, '${host}' is not a valid host`,\n    );\n  }\n\n  if (apiBaseUrl) {\n    apiBaseUrl = trimEnd(apiBaseUrl, '/');\n  } else {\n    apiBaseUrl = `https://${host}/rest/api/1.0`;\n  }\n\n  return {\n    host,\n    apiBaseUrl,\n    token,\n  };\n}\n\n/**\n * Reads a set of Bitbucket Server integration configs.\n *\n * @param configs - All of the integration config objects\n * @public\n */\nexport function readBitbucketServerIntegrationConfigs(\n  configs: Config[],\n): BitbucketServerIntegrationConfig[] {\n  // Read all the explicit integrations\n  // No default integration will be added\n  return configs.map(readBitbucketServerIntegrationConfig);\n}\n","/*\n * Copyright 2020 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport parseGitUrl from 'git-url-parse';\nimport { basicIntegrations, defaultScmResolveUrl } from '../helpers';\nimport { ScmIntegration, ScmIntegrationsFactory } from '../types';\nimport {\n  BitbucketServerIntegrationConfig,\n  readBitbucketServerIntegrationConfigs,\n} from './config';\n\n/**\n * A Bitbucket Server based integration.\n *\n * @public\n */\nexport class BitbucketServerIntegration implements ScmIntegration {\n  static factory: ScmIntegrationsFactory<BitbucketServerIntegration> = ({\n    config,\n  }) => {\n    const configs = readBitbucketServerIntegrationConfigs(\n      config.getOptionalConfigArray('integrations.bitbucketServer') ?? [],\n    );\n    return basicIntegrations(\n      configs.map(c => new BitbucketServerIntegration(c)),\n      i => i.config.host,\n    );\n  };\n\n  constructor(\n    private readonly integrationConfig: BitbucketServerIntegrationConfig,\n  ) {}\n\n  get type(): string {\n    return 'bitbucketServer';\n  }\n\n  get title(): string {\n    return this.integrationConfig.host;\n  }\n\n  get config(): BitbucketServerIntegrationConfig {\n    return this.integrationConfig;\n  }\n\n  resolveUrl(options: {\n    url: string;\n    base: string;\n    lineNumber?: number;\n  }): string {\n    const resolved = defaultScmResolveUrl(options);\n\n    // Bitbucket Server line numbers use the syntax #example.txt-42, rather than #L42\n    if (options.lineNumber) {\n      const url = new URL(resolved);\n\n      const filename = url.pathname.split('/').slice(-1)[0];\n      url.hash = `${filename}-${options.lineNumber}`;\n      return url.toString();\n    }\n\n    return resolved;\n  }\n\n  resolveEditUrl(url: string): string {\n    const urlData = parseGitUrl(url);\n    const editUrl = new URL(url);\n\n    editUrl.searchParams.set('mode', 'edit');\n    // TODO: Not sure what spa=0 does, at least bitbucket.org doesn't support it\n    // but this is taken over from the initial implementation.\n    editUrl.searchParams.set('spa', '0');\n    editUrl.searchParams.set('at', urlData.ref);\n    return editUrl.toString();\n  }\n}\n","/*\n * Copyright 2020 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport fetch from 'cross-fetch';\nimport parseGitUrl from 'git-url-parse';\nimport { BitbucketServerIntegrationConfig } from './config';\n\n/**\n * Given a URL pointing to a path on a provider, returns the default branch.\n *\n * @param url - A URL pointing to a path\n * @param config - The relevant provider config\n * @public\n */\nexport async function getBitbucketServerDefaultBranch(\n  url: string,\n  config: BitbucketServerIntegrationConfig,\n): Promise<string> {\n  const { name: repoName, owner: project } = parseGitUrl(url);\n\n  // Bitbucket Server https://docs.atlassian.com/bitbucket-server/rest/7.9.0/bitbucket-rest.html#idp184\n  let branchUrl = `${config.apiBaseUrl}/projects/${project}/repos/${repoName}/default-branch`;\n\n  let response = await fetch(\n    branchUrl,\n    getBitbucketServerRequestOptions(config),\n  );\n\n  if (response.status === 404) {\n    // First try the new format, and then if it gets specifically a 404 it should try the old format\n    // (to support old  Atlassian Bitbucket Server v5.11.1 format )\n    branchUrl = `${config.apiBaseUrl}/projects/${project}/repos/${repoName}/branches/default`;\n    response = await fetch(branchUrl, getBitbucketServerRequestOptions(config));\n  }\n\n  if (!response.ok) {\n    const message = `Failed to retrieve default branch from ${branchUrl}, ${response.status} ${response.statusText}`;\n    throw new Error(message);\n  }\n\n  const { displayId } = await response.json();\n  const defaultBranch = displayId;\n  if (!defaultBranch) {\n    throw new Error(\n      `Failed to read default branch from ${branchUrl}. ` +\n        `Response ${response.status} ${response.json()}`,\n    );\n  }\n  return defaultBranch;\n}\n\n/**\n * Given a URL pointing to a path on a provider, returns a URL that is suitable\n * for downloading the subtree.\n *\n * @param url - A URL pointing to a path\n * @param config - The relevant provider config\n * @public\n */\nexport async function getBitbucketServerDownloadUrl(\n  url: string,\n  config: BitbucketServerIntegrationConfig,\n): Promise<string> {\n  const { name: repoName, owner: project, ref, filepath } = parseGitUrl(url);\n\n  let branch = ref;\n  if (!branch) {\n    branch = await getBitbucketServerDefaultBranch(url, config);\n  }\n  // path will limit the downloaded content\n  // /docs will only download the docs folder and everything below it\n  // /docs/index.md will download the docs folder and everything below it\n  const path = filepath ? `&path=${encodeURIComponent(filepath)}` : '';\n  return `${config.apiBaseUrl}/projects/${project}/repos/${repoName}/archive?format=tgz&at=${branch}&prefix=${project}-${repoName}${path}`;\n}\n\n/**\n * Given a URL pointing to a file on a provider, returns a URL that is suitable\n * for fetching the contents of the data.\n *\n * @remarks\n *\n * Converts\n * from: https://bitbucket.company.com/projectname/reponame/src/main/file.yaml\n * to:   https://bitbucket.company.com/rest/api/1.0/project/projectname/reponame/raw/file.yaml?at=main\n *\n * @param url - A URL pointing to a file\n * @param config - The relevant provider config\n * @public\n */\nexport function getBitbucketServerFileFetchUrl(\n  url: string,\n  config: BitbucketServerIntegrationConfig,\n): string {\n  try {\n    const { owner, name, ref, filepathtype, filepath } = parseGitUrl(url);\n    if (\n      !owner ||\n      !name ||\n      (filepathtype !== 'browse' &&\n        filepathtype !== 'raw' &&\n        filepathtype !== 'src')\n    ) {\n      throw new Error('Invalid Bitbucket Server URL or file path');\n    }\n\n    const pathWithoutSlash = filepath.replace(/^\\//, '');\n    return `${config.apiBaseUrl}/projects/${owner}/repos/${name}/raw/${pathWithoutSlash}?at=${ref}`;\n  } catch (e) {\n    throw new Error(`Incorrect URL: ${url}, ${e}`);\n  }\n}\n\n/**\n * Gets the request options necessary to make requests to a given provider.\n *\n * @param config - The relevant provider config\n * @public\n */\nexport function getBitbucketServerRequestOptions(\n  config: BitbucketServerIntegrationConfig,\n): { headers: Record<string, string> } {\n  const headers: Record<string, string> = {};\n\n  if (config.token) {\n    headers.Authorization = `Bearer ${config.token}`;\n  }\n\n  return {\n    headers,\n  };\n}\n","/*\n * Copyright 2022 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Config } from '@backstage/config';\nimport { trimEnd } from 'lodash';\nimport { isValidHost, isValidUrl } from '../helpers';\n\n/**\n * The configuration parameters for a single Gerrit API provider.\n *\n * @public\n */\nexport type GerritIntegrationConfig = {\n  /**\n   * The host of the target that this matches on, e.g. \"gerrit-review.com\"\n   */\n  host: string;\n\n  /**\n   * The optional base URL of the Gerrit instance. It is assumed that https\n   * is used and that the base path is \"/\" on the host. If that is not the\n   * case set the complete base url to the gerrit instance, e.g.\n   * \"https://gerrit-review.com/gerrit\". This is the url that you would open\n   * in a browser.\n   */\n  baseUrl?: string;\n\n  /**\n   * The optional base url to use for cloning a repository. If not set the\n   * baseUrl will be used.\n   */\n  cloneUrl?: string;\n\n  /**\n   * Optional base url for Gitiles. This is needed for creating a valid\n   * user-friendly url that can be used for browsing the content of the\n   * provider. If not set a default value will be created in the same way\n   * as the \"baseUrl\" option.\n   */\n  gitilesBaseUrl?: string;\n\n  /**\n   * The username to use for requests to gerrit.\n   */\n  username?: string;\n\n  /**\n   * The password or http token to use for authentication.\n   */\n  password?: string;\n};\n\n/**\n * Reads a single Gerrit integration config.\n *\n * @param config - The config object of a single integration\n *\n * @public\n */\nexport function readGerritIntegrationConfig(\n  config: Config,\n): GerritIntegrationConfig {\n  const host = config.getString('host');\n  let baseUrl = config.getOptionalString('baseUrl');\n  let cloneUrl = config.getOptionalString('cloneUrl');\n  let gitilesBaseUrl = config.getOptionalString('gitilesBaseUrl');\n  const username = config.getOptionalString('username');\n  const password = config.getOptionalString('password');\n\n  if (!isValidHost(host)) {\n    throw new Error(\n      `Invalid Gerrit integration config, '${host}' is not a valid host`,\n    );\n  } else if (baseUrl && !isValidUrl(baseUrl)) {\n    throw new Error(\n      `Invalid Gerrit integration config, '${baseUrl}' is not a valid baseUrl`,\n    );\n  } else if (cloneUrl && !isValidUrl(cloneUrl)) {\n    throw new Error(\n      `Invalid Gerrit integration config, '${cloneUrl}' is not a valid cloneUrl`,\n    );\n  } else if (gitilesBaseUrl && !isValidUrl(gitilesBaseUrl)) {\n    throw new Error(\n      `Invalid Gerrit integration config, '${gitilesBaseUrl}' is not a valid gitilesBaseUrl`,\n    );\n  }\n  if (baseUrl) {\n    baseUrl = trimEnd(baseUrl, '/');\n  } else {\n    baseUrl = `https://${host}`;\n  }\n  if (gitilesBaseUrl) {\n    gitilesBaseUrl = trimEnd(gitilesBaseUrl, '/');\n  } else {\n    gitilesBaseUrl = `https://${host}`;\n  }\n  if (cloneUrl) {\n    cloneUrl = trimEnd(cloneUrl, '/');\n  } else {\n    cloneUrl = baseUrl;\n  }\n\n  return {\n    host,\n    baseUrl,\n    cloneUrl,\n    gitilesBaseUrl,\n    username,\n    password,\n  };\n}\n\n/**\n * Reads a set of Gerrit integration configs.\n *\n * @param configs - All of the integration config objects\n *\n * @public\n */\nexport function readGerritIntegrationConfigs(\n  configs: Config[],\n): GerritIntegrationConfig[] {\n  return configs.map(readGerritIntegrationConfig);\n}\n","/*\n * Copyright 2022 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { trimStart } from 'lodash';\nimport { GerritIntegrationConfig } from '.';\n\nconst GERRIT_BODY_PREFIX = \")]}'\";\n\n/**\n * Parse a Gitiles URL and return branch, file path and project.\n *\n * @remarks\n *\n * Gerrit only handles code reviews so it does not have a native way to browse\n * or showing the content of gits. Image if Github only had the \"pull requests\"\n * tab.\n *\n * Any source code browsing is instead handled by optional services outside\n * Gerrit. The url format chosen for the Gerrit url reader is the one used by\n * the Gitiles project. Gerrit will work perfectly with Backstage without\n * having Gitiles installed but there are some places in the Backstage GUI\n * with links to the url used by the url reader. These will not work unless\n * the urls point to an actual Gitiles installation.\n *\n * Gitiles url:\n * https://g.com/optional_path/\\{project\\}/+/refs/heads/\\{branch\\}/\\{filePath\\}\n *\n *\n * @param url - An URL pointing to a file stored in git.\n * @public\n */\n\nexport function parseGerritGitilesUrl(\n  config: GerritIntegrationConfig,\n  url: string,\n): { branch: string; filePath: string; project: string } {\n  const urlPath = url.replace(config.gitilesBaseUrl!, '');\n  const parts = urlPath.split('/').filter(p => !!p);\n\n  const projectEndIndex = parts.indexOf('+');\n\n  if (projectEndIndex <= 0) {\n    throw new Error(`Unable to parse project from url: ${url}`);\n  }\n  const project = trimStart(parts.slice(0, projectEndIndex).join('/'), '/');\n\n  const branchIndex = parts.indexOf('heads');\n  if (branchIndex <= 0) {\n    throw new Error(`Unable to parse branch from url: ${url}`);\n  }\n  const branch = parts[branchIndex + 1];\n  const filePath = parts.slice(branchIndex + 2).join('/');\n\n  return {\n    branch,\n    filePath: filePath === '' ? '/' : filePath,\n    project,\n  };\n}\n\n/**\n * Build a Gerrit Gitiles url that targets a specific path.\n *\n * @param config - A Gerrit provider config.\n * @param project - The name of the git project\n * @param branch - The branch we will target.\n * @param filePath - The absolute file path.\n * @public\n */\nexport function builldGerritGitilesUrl(\n  config: GerritIntegrationConfig,\n  project: string,\n  branch: string,\n  filePath: string,\n): string {\n  return `${\n    config.gitilesBaseUrl\n  }/${project}/+/refs/heads/${branch}/${trimStart(filePath, '/')}`;\n}\n\n/**\n * Return the authentication prefix.\n *\n * @remarks\n *\n * To authenticate with a password the API url must be prefixed with \"/a/\".\n * If no password is set anonymous access (without the prefix) will\n * be used.\n *\n * @param config - A Gerrit provider config.\n * @public\n */\nexport function getAuthenticationPrefix(\n  config: GerritIntegrationConfig,\n): string {\n  return config.password ? '/a/' : '/';\n}\n\n/**\n * Return the url to get branch info from the Gerrit API.\n *\n * @param config - A Gerrit provider config.\n * @param url - An url pointing to a file in git.\n * @public\n */\nexport function getGerritBranchApiUrl(\n  config: GerritIntegrationConfig,\n  url: string,\n) {\n  const { branch, project } = parseGerritGitilesUrl(config, url);\n\n  return `${config.baseUrl}${getAuthenticationPrefix(\n    config,\n  )}projects/${encodeURIComponent(project)}/branches/${branch}`;\n}\n\n/**\n * Return the url to clone the repo that is referenced by the url.\n *\n * @param url - An url pointing to a file in git.\n * @public\n */\nexport function getGerritCloneRepoUrl(\n  config: GerritIntegrationConfig,\n  url: string,\n) {\n  const { project } = parseGerritGitilesUrl(config, url);\n\n  return `${config.cloneUrl}${getAuthenticationPrefix(config)}${project}`;\n}\n\n/**\n * Return the url to fetch the contents of a file using the Gerrit API.\n *\n * @param config - A Gerrit provider config.\n * @param url - An url pointing to a file in git.\n * @public\n */\nexport function getGerritFileContentsApiUrl(\n  config: GerritIntegrationConfig,\n  url: string,\n) {\n  const { branch, filePath, project } = parseGerritGitilesUrl(config, url);\n\n  return `${config.baseUrl}${getAuthenticationPrefix(\n    config,\n  )}projects/${encodeURIComponent(\n    project,\n  )}/branches/${branch}/files/${encodeURIComponent(filePath)}/content`;\n}\n\n/**\n * Return the url to query available projects using the Gerrit API.\n *\n * @param config - A Gerrit provider config.\n * @public\n */\nexport function getGerritProjectsApiUrl(config: GerritIntegrationConfig) {\n  return `${config.baseUrl}${getAuthenticationPrefix(config)}projects/`;\n}\n\n/**\n * Return request headers for a Gerrit provider.\n *\n * @param config - A Gerrit provider config\n * @public\n */\nexport function getGerritRequestOptions(config: GerritIntegrationConfig): {\n  headers?: Record<string, string>;\n} {\n  const headers: Record<string, string> = {};\n\n  if (!config.password) {\n    return headers;\n  }\n  const buffer = Buffer.from(`${config.username}:${config.password}`, 'utf8');\n  headers.Authorization = `Basic ${buffer.toString('base64')}`;\n  return {\n    headers,\n  };\n}\n\n/**\n * Parse the json response from Gerrit and strip the magic prefix.\n *\n * @remarks\n *\n * To prevent against XSSI attacks the JSON response body from Gerrit starts\n * with a magic prefix that must be stripped before it can be fed to a JSON\n * parser.\n *\n * @param response - An API response.\n * @public\n */\nexport async function parseGerritJsonResponse(\n  response: Response,\n): Promise<unknown> {\n  const responseBody = await response.text();\n  if (responseBody.startsWith(GERRIT_BODY_PREFIX)) {\n    try {\n      return JSON.parse(responseBody.slice(GERRIT_BODY_PREFIX.length));\n    } catch (ex) {\n      throw new Error(\n        `Invalid response from Gerrit: ${responseBody.slice(0, 10)} - ${ex}`,\n      );\n    }\n  }\n  throw new Error(\n    `Gerrit JSON body prefix missing. Found: ${responseBody.slice(0, 10)}`,\n  );\n}\n","/*\n * Copyright 2022 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { basicIntegrations } from '../helpers';\nimport { ScmIntegration, ScmIntegrationsFactory } from '../types';\nimport {\n  GerritIntegrationConfig,\n  readGerritIntegrationConfigs,\n} from './config';\nimport { parseGerritGitilesUrl, builldGerritGitilesUrl } from './core';\n\n/**\n * A Gerrit based integration.\n *\n * @public\n */\nexport class GerritIntegration implements ScmIntegration {\n  static factory: ScmIntegrationsFactory<GerritIntegration> = ({ config }) => {\n    const configs = readGerritIntegrationConfigs(\n      config.getOptionalConfigArray('integrations.gerrit') ?? [],\n    );\n    return basicIntegrations(\n      configs.map(c => new GerritIntegration(c)),\n      i => i.config.host,\n    );\n  };\n\n  constructor(private readonly integrationConfig: GerritIntegrationConfig) {}\n\n  get type(): string {\n    return 'gerrit';\n  }\n\n  get title(): string {\n    return this.integrationConfig.host;\n  }\n\n  get config(): GerritIntegrationConfig {\n    return this.integrationConfig;\n  }\n\n  resolveUrl(options: {\n    url: string;\n    base: string;\n    lineNumber?: number;\n  }): string {\n    const { url, base, lineNumber } = options;\n    let updated;\n    if (url.startsWith('/')) {\n      const { branch, project } = parseGerritGitilesUrl(this.config, base);\n      return builldGerritGitilesUrl(this.config, project, branch, url);\n    }\n    if (url) {\n      updated = new URL(url, base);\n    } else {\n      updated = new URL(base);\n    }\n    if (lineNumber) {\n      updated.hash = lineNumber.toString();\n    }\n    return updated.toString();\n  }\n\n  resolveEditUrl(url: string): string {\n    // Not applicable for gerrit.\n    return url;\n  }\n}\n","/*\n * Copyright 2020 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Config } from '@backstage/config';\nimport { trimEnd } from 'lodash';\nimport { isValidHost } from '../helpers';\n\nconst GITHUB_HOST = 'github.com';\nconst GITHUB_API_BASE_URL = 'https://api.github.com';\nconst GITHUB_RAW_BASE_URL = 'https://raw.githubusercontent.com';\n\n/**\n * The configuration parameters for a single GitHub integration.\n *\n * @public\n */\nexport type GitHubIntegrationConfig = {\n  /**\n   * The host of the target that this matches on, e.g. \"github.com\"\n   */\n  host: string;\n\n  /**\n   * The base URL of the API of this provider, e.g. \"https://api.github.com\",\n   * with no trailing slash.\n   *\n   * May be omitted specifically for GitHub; then it will be deduced.\n   *\n   * The API will always be preferred if both its base URL and a token are\n   * present.\n   */\n  apiBaseUrl?: string;\n\n  /**\n   * The base URL of the raw fetch endpoint of this provider, e.g.\n   * \"https://raw.githubusercontent.com\", with no trailing slash.\n   *\n   * May be omitted specifically for GitHub; then it will be deduced.\n   *\n   * The API will always be preferred if both its base URL and a token are\n   * present.\n   */\n  rawBaseUrl?: string;\n\n  /**\n   * The authorization token to use for requests to this provider.\n   *\n   * If no token is specified, anonymous access is used.\n   */\n  token?: string;\n\n  /**\n   * The GitHub Apps configuration to use for requests to this provider.\n   *\n   * If no apps are specified, token or anonymous is used.\n   */\n  apps?: GithubAppConfig[];\n};\n\n/**\n * The configuration parameters for authenticating a GitHub Application.\n *\n * @remarks\n *\n * A GitHub Apps configuration can be generated using the `backstage-cli create-github-app` command.\n *\n * @public\n */\nexport type GithubAppConfig = {\n  /**\n   * Unique app identifier, found at https://github.com/organizations/$org/settings/apps/$AppName\n   */\n  appId: number;\n  /**\n   * The private key is used by the GitHub App integration to authenticate the app.\n   * A private key can be generated from the app at https://github.com/organizations/$org/settings/apps/$AppName\n   */\n  privateKey: string;\n  /**\n   * Webhook secret can be configured at https://github.com/organizations/$org/settings/apps/$AppName\n   */\n  webhookSecret: string;\n  /**\n   * Found at https://github.com/organizations/$org/settings/apps/$AppName\n   */\n  clientId: string;\n  /**\n   * Client secrets can be generated at https://github.com/organizations/$org/settings/apps/$AppName\n   */\n  clientSecret: string;\n  /**\n   * List of installation owners allowed to be used by this GitHub app. The GitHub UI does not provide a way to list the installations.\n   * However you can list the installations with the GitHub API. You can find the list of installations here:\n   * https://api.github.com/app/installations\n   * The relevant documentation for this is here.\n   * https://docs.github.com/en/rest/reference/apps#list-installations-for-the-authenticated-app--code-samples\n   */\n  allowedInstallationOwners?: string[];\n};\n\n/**\n * Reads a single GitHub integration config.\n *\n * @param config - The config object of a single integration\n * @public\n */\nexport function readGitHubIntegrationConfig(\n  config: Config,\n): GitHubIntegrationConfig {\n  const host = config.getOptionalString('host') ?? GITHUB_HOST;\n  let apiBaseUrl = config.getOptionalString('apiBaseUrl');\n  let rawBaseUrl = config.getOptionalString('rawBaseUrl');\n  const token = config.getOptionalString('token');\n  const apps = config.getOptionalConfigArray('apps')?.map(c => ({\n    appId: c.getNumber('appId'),\n    clientId: c.getString('clientId'),\n    clientSecret: c.getString('clientSecret'),\n    webhookSecret: c.getString('webhookSecret'),\n    privateKey: c.getString('privateKey'),\n    allowedInstallationOwners: c.getOptionalStringArray(\n      'allowedInstallationOwners',\n    ),\n  }));\n\n  if (!isValidHost(host)) {\n    throw new Error(\n      `Invalid GitHub integration config, '${host}' is not a valid host`,\n    );\n  }\n\n  if (apiBaseUrl) {\n    apiBaseUrl = trimEnd(apiBaseUrl, '/');\n  } else if (host === GITHUB_HOST) {\n    apiBaseUrl = GITHUB_API_BASE_URL;\n  }\n\n  if (rawBaseUrl) {\n    rawBaseUrl = trimEnd(rawBaseUrl, '/');\n  } else if (host === GITHUB_HOST) {\n    rawBaseUrl = GITHUB_RAW_BASE_URL;\n  }\n\n  return { host, apiBaseUrl, rawBaseUrl, token, apps };\n}\n\n/**\n * Reads a set of GitHub integration configs, and inserts some defaults for\n * public GitHub if not specified.\n *\n * @param configs - All of the integration config objects\n * @public\n */\nexport function readGitHubIntegrationConfigs(\n  configs: Config[],\n): GitHubIntegrationConfig[] {\n  // First read all the explicit integrations\n  const result = configs.map(readGitHubIntegrationConfig);\n\n  // If no explicit github.com integration was added, put one in the list as\n  // a convenience\n  if (!result.some(c => c.host === GITHUB_HOST)) {\n    result.push({\n      host: GITHUB_HOST,\n      apiBaseUrl: GITHUB_API_BASE_URL,\n      rawBaseUrl: GITHUB_RAW_BASE_URL,\n    });\n  }\n\n  return result;\n}\n","/*\n * Copyright 2020 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport parseGitUrl from 'git-url-parse';\nimport { GitHubIntegrationConfig } from './config';\nimport { GithubCredentials } from './types';\n\n/**\n * Given a URL pointing to a file on a provider, returns a URL that is suitable\n * for fetching the contents of the data.\n *\n * @remarks\n *\n * Converts\n * from: https://github.com/a/b/blob/branchname/path/to/c.yaml\n * to:   https://api.github.com/repos/a/b/contents/path/to/c.yaml?ref=branchname\n * or:   https://raw.githubusercontent.com/a/b/branchname/c.yaml\n *\n * @param url - A URL pointing to a file\n * @param config - The relevant provider config\n * @public\n */\nexport function getGitHubFileFetchUrl(\n  url: string,\n  config: GitHubIntegrationConfig,\n  credentials: GithubCredentials,\n): string {\n  try {\n    const { owner, name, ref, filepathtype, filepath } = parseGitUrl(url);\n    if (\n      !owner ||\n      !name ||\n      !ref ||\n      // GitHub is automatically redirecting tree urls to blob urls so it's\n      // fine to pass a tree url.\n      (filepathtype !== 'blob' &&\n        filepathtype !== 'raw' &&\n        filepathtype !== 'tree')\n    ) {\n      throw new Error('Invalid GitHub URL or file path');\n    }\n\n    const pathWithoutSlash = filepath.replace(/^\\//, '');\n    if (chooseEndpoint(config, credentials) === 'api') {\n      return `${config.apiBaseUrl}/repos/${owner}/${name}/contents/${pathWithoutSlash}?ref=${ref}`;\n    }\n    return `${config.rawBaseUrl}/${owner}/${name}/${ref}/${pathWithoutSlash}`;\n  } catch (e) {\n    throw new Error(`Incorrect URL: ${url}, ${e}`);\n  }\n}\n\n/**\n * Gets the request options necessary to make requests to a given provider.\n *\n * @deprecated This function is no longer used internally\n * @param config - The relevant provider config\n * @public\n */\nexport function getGitHubRequestOptions(\n  config: GitHubIntegrationConfig,\n  credentials: GithubCredentials,\n): { headers: Record<string, string> } {\n  const headers: Record<string, string> = {};\n\n  if (chooseEndpoint(config, credentials) === 'api') {\n    headers.Accept = 'application/vnd.github.v3.raw';\n  }\n\n  if (credentials.token) {\n    headers.Authorization = `token ${credentials.token}`;\n  }\n\n  return { headers };\n}\n\nexport function chooseEndpoint(\n  config: GitHubIntegrationConfig,\n  credentials: GithubCredentials,\n): 'api' | 'raw' {\n  if (config.apiBaseUrl && (credentials.token || !config.rawBaseUrl)) {\n    return 'api';\n  }\n  return 'raw';\n}\n","/*\n * Copyright 2021 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport parseGitUrl from 'git-url-parse';\nimport { GithubAppConfig, GitHubIntegrationConfig } from './config';\nimport { createAppAuth } from '@octokit/auth-app';\nimport { Octokit, RestEndpointMethodTypes } from '@octokit/rest';\nimport { DateTime } from 'luxon';\nimport {\n  GithubCredentials,\n  GithubCredentialsProvider,\n  GithubCredentialType,\n} from './types';\n\ntype InstallationData = {\n  installationId: number;\n  suspended: boolean;\n};\n\nclass Cache {\n  private readonly tokenCache = new Map<\n    string,\n    { token: string; expiresAt: DateTime }\n  >();\n\n  async getOrCreateToken(\n    key: string,\n    supplier: () => Promise<{ token: string; expiresAt: DateTime }>,\n  ): Promise<{ accessToken: string }> {\n    const item = this.tokenCache.get(key);\n    if (item && this.isNotExpired(item.expiresAt)) {\n      return { accessToken: item.token };\n    }\n\n    const result = await supplier();\n    this.tokenCache.set(key, result);\n    return { accessToken: result.token };\n  }\n\n  // consider timestamps older than 50 minutes to be expired.\n  private isNotExpired = (date: DateTime) =>\n    date.diff(DateTime.local(), 'minutes').minutes > 50;\n}\n\n/**\n * This accept header is required when calling App APIs in GitHub Enterprise.\n * It has no effect on calls to github.com and can probably be removed entirely\n * once GitHub Apps is out of preview.\n */\nconst HEADERS = {\n  Accept: 'application/vnd.github.machine-man-preview+json',\n};\n\n/**\n * GithubAppManager issues and caches tokens for a specific GitHub App.\n */\nclass GithubAppManager {\n  private readonly appClient: Octokit;\n  private readonly baseUrl?: string;\n  private readonly baseAuthConfig: { appId: number; privateKey: string };\n  private readonly cache = new Cache();\n  private readonly allowedInstallationOwners: string[] | undefined; // undefined allows all installations\n\n  constructor(config: GithubAppConfig, baseUrl?: string) {\n    this.allowedInstallationOwners = config.allowedInstallationOwners;\n    this.baseUrl = baseUrl;\n    this.baseAuthConfig = {\n      appId: config.appId,\n      privateKey: config.privateKey.replace(/\\\\n/gm, '\\n'),\n    };\n    this.appClient = new Octokit({\n      baseUrl,\n      headers: HEADERS,\n      authStrategy: createAppAuth,\n      auth: this.baseAuthConfig,\n    });\n  }\n\n  async getInstallationCredentials(\n    owner: string,\n    repo?: string,\n  ): Promise<{ accessToken: string | undefined }> {\n    const { installationId, suspended } = await this.getInstallationData(owner);\n    if (this.allowedInstallationOwners) {\n      if (!this.allowedInstallationOwners?.includes(owner)) {\n        return { accessToken: undefined }; // An empty token allows anonymous access to public repos\n      }\n    }\n    if (suspended) {\n      throw new Error(`The GitHub application for ${owner} is suspended`);\n    }\n\n    const cacheKey = repo ? `${owner}/${repo}` : owner;\n\n    // Go and grab an access token for the app scoped to a repository if provided, if not use the organisation installation.\n    return this.cache.getOrCreateToken(cacheKey, async () => {\n      const result = await this.appClient.apps.createInstallationAccessToken({\n        installation_id: installationId,\n        headers: HEADERS,\n      });\n      if (repo && result.data.repository_selection === 'selected') {\n        const installationClient = new Octokit({\n          baseUrl: this.baseUrl,\n          auth: result.data.token,\n        });\n        const repos = await installationClient.paginate(\n          installationClient.apps.listReposAccessibleToInstallation,\n        );\n        const hasRepo = repos.some(repository => {\n          return repository.name === repo;\n        });\n        if (!hasRepo) {\n          throw new Error(\n            `The Backstage GitHub application used in the ${owner} organization does not have access to a repository with the name ${repo}`,\n          );\n        }\n      }\n      return {\n        token: result.data.token,\n        expiresAt: DateTime.fromISO(result.data.expires_at),\n      };\n    });\n  }\n\n  getInstallations(): Promise<\n    RestEndpointMethodTypes['apps']['listInstallations']['response']['data']\n  > {\n    return this.appClient.paginate(this.appClient.apps.listInstallations);\n  }\n\n  private async getInstallationData(owner: string): Promise<InstallationData> {\n    const allInstallations = await this.getInstallations();\n    const installation = allInstallations.find(\n      inst =>\n        inst.account?.login?.toLocaleLowerCase('en-US') ===\n        owner.toLocaleLowerCase('en-US'),\n    );\n    if (installation) {\n      return {\n        installationId: installation.id,\n        suspended: Boolean(installation.suspended_by),\n      };\n    }\n    const notFoundError = new Error(\n      `No app installation found for ${owner} in ${this.baseAuthConfig.appId}`,\n    );\n    notFoundError.name = 'NotFoundError';\n    throw notFoundError;\n  }\n}\n\n/**\n * Corresponds to a Github installation which internally could hold several GitHub Apps.\n *\n * @public\n */\nexport class GithubAppCredentialsMux {\n  private readonly apps: GithubAppManager[];\n\n  constructor(config: GitHubIntegrationConfig) {\n    this.apps =\n      config.apps?.map(ac => new GithubAppManager(ac, config.apiBaseUrl)) ?? [];\n  }\n\n  async getAllInstallations(): Promise<\n    RestEndpointMethodTypes['apps']['listInstallations']['response']['data']\n  > {\n    if (!this.apps.length) {\n      return [];\n    }\n\n    const installs = await Promise.all(\n      this.apps.map(app => app.getInstallations()),\n    );\n\n    return installs.flat();\n  }\n\n  async getAppToken(owner: string, repo?: string): Promise<string | undefined> {\n    if (this.apps.length === 0) {\n      return undefined;\n    }\n\n    const results = await Promise.all(\n      this.apps.map(app =>\n        app.getInstallationCredentials(owner, repo).then(\n          credentials => ({ credentials, error: undefined }),\n          error => ({ credentials: undefined, error }),\n        ),\n      ),\n    );\n\n    const result = results.find(resultItem => resultItem.credentials);\n    if (result) {\n      return result.credentials!.accessToken;\n    }\n\n    const errors = results.map(r => r.error);\n    const notNotFoundError = errors.find(err => err.name !== 'NotFoundError');\n    if (notNotFoundError) {\n      throw notNotFoundError;\n    }\n\n    return undefined;\n  }\n}\n\n/**\n * Handles the creation and caching of credentials for GitHub integrations.\n *\n * @public\n * @remarks\n *\n * TODO: Possibly move this to a backend only package so that it's not used in the frontend by mistake\n */\nexport class SingleInstanceGithubCredentialsProvider\n  implements GithubCredentialsProvider\n{\n  static create: (\n    config: GitHubIntegrationConfig,\n  ) => GithubCredentialsProvider = config => {\n    return new SingleInstanceGithubCredentialsProvider(\n      new GithubAppCredentialsMux(config),\n      config.token,\n    );\n  };\n\n  private constructor(\n    private readonly githubAppCredentialsMux: GithubAppCredentialsMux,\n    private readonly token?: string,\n  ) {}\n\n  /**\n   * Returns {@link GithubCredentials} for a given URL.\n   *\n   * @remarks\n   *\n   * Consecutive calls to this method with the same URL will return cached\n   * credentials.\n   *\n   * The shortest lifetime for a token returned is 10 minutes.\n   *\n   * @example\n   * ```ts\n   * const { token, headers } = await getCredentials({\n   *   url: 'github.com/backstage/foobar'\n   * })\n   * ```\n   *\n   * @param opts - The organization or repository URL\n   * @returns A promise of {@link GithubCredentials}.\n   */\n  async getCredentials(opts: { url: string }): Promise<GithubCredentials> {\n    const parsed = parseGitUrl(opts.url);\n\n    const owner = parsed.owner || parsed.name;\n    const repo = parsed.owner ? parsed.name : undefined;\n\n    let type: GithubCredentialType = 'app';\n    let token = await this.githubAppCredentialsMux.getAppToken(owner, repo);\n    if (!token) {\n      type = 'token';\n      token = this.token;\n    }\n\n    return {\n      headers: token ? { Authorization: `Bearer ${token}` } : undefined,\n      token,\n      type,\n    };\n  }\n}\n","/*\n * Copyright 2021 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { GithubCredentials, GithubCredentialsProvider } from './types';\nimport { ScmIntegrationRegistry } from '../registry';\nimport { SingleInstanceGithubCredentialsProvider } from './SingleInstanceGithubCredentialsProvider';\n\n/**\n * Handles the creation and caching of credentials for GitHub integrations.\n *\n * @public\n * @remarks\n *\n * TODO: Possibly move this to a backend only package so that it's not used in the frontend by mistake\n */\nexport class DefaultGithubCredentialsProvider\n  implements GithubCredentialsProvider\n{\n  static fromIntegrations(integrations: ScmIntegrationRegistry) {\n    const credentialsProviders: Map<string, GithubCredentialsProvider> =\n      new Map<string, GithubCredentialsProvider>();\n\n    integrations.github.list().forEach(integration => {\n      const credentialsProvider =\n        SingleInstanceGithubCredentialsProvider.create(integration.config);\n      credentialsProviders.set(integration.config.host, credentialsProvider);\n    });\n    return new DefaultGithubCredentialsProvider(credentialsProviders);\n  }\n\n  private constructor(\n    private readonly providers: Map<string, GithubCredentialsProvider>,\n  ) {}\n\n  /**\n   * Returns {@link GithubCredentials} for a given URL.\n   *\n   * @remarks\n   *\n   * Consecutive calls to this method with the same URL will return cached\n   * credentials.\n   *\n   * The shortest lifetime for a token returned is 10 minutes.\n   *\n   * @example\n   * ```ts\n   * const { token, headers } = await getCredentials({\n   *   url: 'https://github.com/backstage/foobar'\n   * })\n   *\n   * const { token, headers } = await getCredentials({\n   *   url: 'https://github.com/backstage'\n   * })\n   * ```\n   *\n   * @param opts - The organization or repository URL\n   * @returns A promise of {@link GithubCredentials}.\n   */\n  async getCredentials(opts: { url: string }): Promise<GithubCredentials> {\n    const parsed = new URL(opts.url);\n    const provider = this.providers.get(parsed.host);\n\n    if (!provider) {\n      throw new Error(\n        `There is no GitHub integration that matches ${opts.url}. Please add a configuration for an integration.`,\n      );\n    }\n\n    return provider.getCredentials(opts);\n  }\n}\n","/*\n * Copyright 2020 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { basicIntegrations, defaultScmResolveUrl } from '../helpers';\nimport { ScmIntegration, ScmIntegrationsFactory } from '../types';\nimport {\n  GitHubIntegrationConfig,\n  readGitHubIntegrationConfigs,\n} from './config';\n\n/**\n * A GitHub based integration.\n *\n * @public\n */\nexport class GitHubIntegration implements ScmIntegration {\n  static factory: ScmIntegrationsFactory<GitHubIntegration> = ({ config }) => {\n    const configs = readGitHubIntegrationConfigs(\n      config.getOptionalConfigArray('integrations.github') ?? [],\n    );\n    return basicIntegrations(\n      configs.map(c => new GitHubIntegration(c)),\n      i => i.config.host,\n    );\n  };\n\n  constructor(private readonly integrationConfig: GitHubIntegrationConfig) {}\n\n  get type(): string {\n    return 'github';\n  }\n\n  get title(): string {\n    return this.integrationConfig.host;\n  }\n\n  get config(): GitHubIntegrationConfig {\n    return this.integrationConfig;\n  }\n\n  resolveUrl(options: {\n    url: string;\n    base: string;\n    lineNumber?: number;\n  }): string {\n    // GitHub uses blob URLs for files and tree urls for directory listings. But\n    // there is a redirect from tree to blob for files, so we can always return\n    // tree urls here.\n    return replaceGitHubUrlType(defaultScmResolveUrl(options), 'tree');\n  }\n\n  resolveEditUrl(url: string): string {\n    return replaceGitHubUrlType(url, 'edit');\n  }\n}\n\n/**\n * Takes a GitHub URL and replaces the type part (blob, tree etc).\n *\n * @param url - The original URL\n * @param type - The desired type, e.g. \"blob\"\n * @public\n */\nexport function replaceGitHubUrlType(\n  url: string,\n  type: 'blob' | 'tree' | 'edit',\n): string {\n  return url.replace(\n    /\\/\\/([^/]+)\\/([^/]+)\\/([^/]+)\\/(blob|tree|edit)\\//,\n    (_, host, owner, repo) => {\n      return `//${host}/${owner}/${repo}/${type}/`;\n    },\n  );\n}\n","/*\n * Copyright 2020 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Config } from '@backstage/config';\nimport { trimEnd } from 'lodash';\nimport { isValidHost, isValidUrl } from '../helpers';\n\nconst GITLAB_HOST = 'gitlab.com';\nconst GITLAB_API_BASE_URL = 'https://gitlab.com/api/v4';\n\n/**\n * The configuration parameters for a single GitLab integration.\n *\n * @public\n */\nexport type GitLabIntegrationConfig = {\n  /**\n   * The host of the target that this matches on, e.g. `gitlab.com`.\n   */\n  host: string;\n\n  /**\n   * The base URL of the API of this provider, e.g.\n   * `https://gitlab.com/api/v4`, with no trailing slash.\n   *\n   * May be omitted specifically for public GitLab; then it will be deduced.\n   */\n  apiBaseUrl: string;\n\n  /**\n   * The authorization token to use for requests to this provider.\n   *\n   * If no token is specified, anonymous access is used.\n   */\n  token?: string;\n\n  /**\n   * The baseUrl of this provider, e.g. `https://gitlab.com`, which is passed\n   * into the GitLab client.\n   *\n   * If no baseUrl is provided, it will default to `https://${host}`\n   */\n  baseUrl: string;\n};\n\n/**\n * Reads a single GitLab integration config.\n *\n * @param config - The config object of a single integration\n * @public\n */\nexport function readGitLabIntegrationConfig(\n  config: Config,\n): GitLabIntegrationConfig {\n  const host = config.getString('host');\n  let apiBaseUrl = config.getOptionalString('apiBaseUrl');\n  const token = config.getOptionalString('token');\n  let baseUrl = config.getOptionalString('baseUrl');\n\n  if (apiBaseUrl) {\n    apiBaseUrl = trimEnd(apiBaseUrl, '/');\n  } else if (host === GITLAB_HOST) {\n    apiBaseUrl = GITLAB_API_BASE_URL;\n  }\n\n  if (baseUrl) {\n    baseUrl = trimEnd(baseUrl, '/');\n  } else {\n    baseUrl = `https://${host}`;\n  }\n\n  if (!isValidHost(host)) {\n    throw new Error(\n      `Invalid GitLab integration config, '${host}' is not a valid host`,\n    );\n  } else if (!apiBaseUrl || !isValidUrl(apiBaseUrl)) {\n    throw new Error(\n      `Invalid GitLab integration config, '${apiBaseUrl}' is not a valid apiBaseUrl`,\n    );\n  } else if (!isValidUrl(baseUrl)) {\n    throw new Error(\n      `Invalid GitLab integration config, '${baseUrl}' is not a valid baseUrl`,\n    );\n  }\n\n  return { host, token, apiBaseUrl, baseUrl };\n}\n\n/**\n * Reads a set of GitLab integration configs, and inserts some defaults for\n * public GitLab if not specified.\n *\n * @param configs - All of the integration config objects\n * @public\n */\nexport function readGitLabIntegrationConfigs(\n  configs: Config[],\n): GitLabIntegrationConfig[] {\n  // First read all the explicit integrations\n  const result = configs.map(readGitLabIntegrationConfig);\n\n  // As a convenience we always make sure there's at least an unauthenticated\n  // reader for public gitlab repos.\n  if (!result.some(c => c.host === GITLAB_HOST)) {\n    result.push({\n      host: GITLAB_HOST,\n      apiBaseUrl: GITLAB_API_BASE_URL,\n      baseUrl: `https://${GITLAB_HOST}`,\n    });\n  }\n\n  return result;\n}\n","/*\n * Copyright 2020 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { GitLabIntegrationConfig } from './config';\nimport fetch from 'cross-fetch';\nimport { InputError } from '@backstage/errors';\n\n/**\n * Given a URL pointing to a file on a provider, returns a URL that is suitable\n * for fetching the contents of the data.\n *\n * @remarks\n *\n * Converts\n * from: https://gitlab.example.com/a/b/blob/master/c.yaml\n * to:   https://gitlab.example.com/a/b/raw/master/c.yaml\n * -or-\n * from: https://gitlab.com/groupA/teams/teamA/subgroupA/repoA/-/blob/branch/filepath\n * to:   https://gitlab.com/api/v4/projects/projectId/repository/files/filepath?ref=branch\n *\n * @param url - A URL pointing to a file\n * @param config - The relevant provider config\n * @public\n */\nexport async function getGitLabFileFetchUrl(\n  url: string,\n  config: GitLabIntegrationConfig,\n): Promise<string> {\n  // TODO(Rugvip): From the old GitlabReaderProcessor; used\n  // the existence of /-/blob/ to switch the logic. Don't know if this\n  // makes sense and it might require some more work.\n  if (url.includes('/-/blob/')) {\n    const projectID = await getProjectId(url, config);\n    return buildProjectUrl(url, projectID).toString();\n  }\n  return buildRawUrl(url).toString();\n}\n\n/**\n * Gets the request options necessary to make requests to a given provider.\n *\n * @param config - The relevant provider config\n * @public\n */\nexport function getGitLabRequestOptions(config: GitLabIntegrationConfig): {\n  headers: Record<string, string>;\n} {\n  const { token = '' } = config;\n  return {\n    headers: {\n      'PRIVATE-TOKEN': token,\n    },\n  };\n}\n\n// Converts\n// from: https://gitlab.example.com/groupA/teams/repoA/blob/master/c.yaml\n// to:   https://gitlab.example.com/groupA/teams/repoA/raw/master/c.yaml\nexport function buildRawUrl(target: string): URL {\n  try {\n    const url = new URL(target);\n\n    const splitPath = url.pathname.split('/').filter(Boolean);\n\n    // Check blob existence\n    const blobIndex = splitPath.indexOf('blob', 2);\n    if (blobIndex < 2 || blobIndex === splitPath.length - 1) {\n      throw new InputError('Wrong GitLab URL');\n    }\n\n    // Take repo path\n    const repoPath = splitPath.slice(0, blobIndex);\n    const restOfPath = splitPath.slice(blobIndex + 1);\n\n    if (!restOfPath.join('/').match(/\\.(yaml|yml)$/)) {\n      throw new InputError('Wrong GitLab URL');\n    }\n\n    // Replace 'blob' with 'raw'\n    url.pathname = [...repoPath, 'raw', ...restOfPath].join('/');\n\n    return url;\n  } catch (e) {\n    throw new InputError(`Incorrect url: ${target}, ${e}`);\n  }\n}\n\n// Converts\n// from: https://gitlab.com/groupA/teams/teamA/subgroupA/repoA/-/blob/branch/filepath\n// to:   https://gitlab.com/api/v4/projects/projectId/repository/files/filepath?ref=branch\nexport function buildProjectUrl(target: string, projectID: Number): URL {\n  try {\n    const url = new URL(target);\n\n    const branchAndFilePath = url.pathname.split('/-/blob/')[1];\n    const [branch, ...filePath] = branchAndFilePath.split('/');\n\n    url.pathname = [\n      '/api/v4/projects',\n      projectID,\n      'repository/files',\n      encodeURIComponent(decodeURIComponent(filePath.join('/'))),\n      'raw',\n    ].join('/');\n    url.search = `?ref=${branch}`;\n\n    return url;\n  } catch (e) {\n    throw new Error(`Incorrect url: ${target}, ${e}`);\n  }\n}\n\n// Convert\n// from: https://gitlab.com/groupA/teams/teamA/subgroupA/repoA/-/blob/branch/filepath\n// to:   The project ID that corresponds to the URL\nexport async function getProjectId(\n  target: string,\n  config: GitLabIntegrationConfig,\n): Promise<number> {\n  const url = new URL(target);\n\n  if (!url.pathname.includes('/-/blob/')) {\n    throw new Error('Please provide full path to yaml file from GitLab');\n  }\n\n  try {\n    const repo = url.pathname.split('/-/blob/')[0];\n\n    // Convert\n    // to: https://gitlab.com/api/v4/projects/groupA%2Fteams%2FsubgroupA%2FteamA%2Frepo\n    const repoIDLookup = new URL(\n      `${url.origin}/api/v4/projects/${encodeURIComponent(\n        repo.replace(/^\\//, ''),\n      )}`,\n    );\n    const response = await fetch(\n      repoIDLookup.toString(),\n      getGitLabRequestOptions(config),\n    );\n    const data = await response.json();\n\n    if (!response.ok) {\n      throw new Error(\n        `GitLab Error '${data.error}', ${data.error_description}`,\n      );\n    }\n\n    return Number(data.id);\n  } catch (e) {\n    throw new Error(`Could not get GitLab project ID for: ${target}, ${e}`);\n  }\n}\n","/*\n * Copyright 2020 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { basicIntegrations, defaultScmResolveUrl } from '../helpers';\nimport { ScmIntegration, ScmIntegrationsFactory } from '../types';\nimport {\n  GitLabIntegrationConfig,\n  readGitLabIntegrationConfigs,\n} from './config';\n\n/**\n * A GitLab based integration.\n *\n * @public\n */\nexport class GitLabIntegration implements ScmIntegration {\n  static factory: ScmIntegrationsFactory<GitLabIntegration> = ({ config }) => {\n    const configs = readGitLabIntegrationConfigs(\n      config.getOptionalConfigArray('integrations.gitlab') ?? [],\n    );\n    return basicIntegrations(\n      configs.map(c => new GitLabIntegration(c)),\n      i => i.config.host,\n    );\n  };\n\n  constructor(private readonly integrationConfig: GitLabIntegrationConfig) {}\n\n  get type(): string {\n    return 'gitlab';\n  }\n\n  get title(): string {\n    return this.integrationConfig.host;\n  }\n\n  get config(): GitLabIntegrationConfig {\n    return this.integrationConfig;\n  }\n\n  resolveUrl(options: {\n    url: string;\n    base: string;\n    lineNumber?: number;\n  }): string {\n    return defaultScmResolveUrl(options);\n  }\n\n  resolveEditUrl(url: string): string {\n    return replaceGitLabUrlType(url, 'edit');\n  }\n}\n\n/**\n * Takes a GitLab URL and replaces the type part (blob, tree etc).\n *\n * @param url - The original URL\n * @param type - The desired type, e.g. 'blob', 'tree', 'edit'\n * @public\n */\nexport function replaceGitLabUrlType(\n  url: string,\n  type: 'blob' | 'tree' | 'edit',\n): string {\n  return url.replace(/\\/\\-\\/(blob|tree|edit)\\//, `/-/${type}/`);\n}\n","/*\n * Copyright 2020 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Config } from '@backstage/config';\n\n/**\n * The configuration parameters for a single Google Cloud Storage provider.\n *\n * @public\n */\nexport type GoogleGcsIntegrationConfig = {\n  /**\n   * Service account email used to authenticate requests.\n   */\n  clientEmail?: string;\n  /**\n   * Service account private key used to authenticate requests.\n   */\n  privateKey?: string;\n};\n\n/**\n * Reads a single Google GCS integration config.\n *\n * @param config - The config object of a single integration\n * @public\n */\nexport function readGoogleGcsIntegrationConfig(\n  config: Config,\n): GoogleGcsIntegrationConfig {\n  if (!config) {\n    return {};\n  }\n\n  if (!config.has('clientEmail') && !config.has('privateKey')) {\n    return {};\n  }\n\n  const privateKey = config.getString('privateKey').split('\\\\n').join('\\n');\n\n  const clientEmail = config.getString('clientEmail');\n  return { clientEmail: clientEmail, privateKey: privateKey };\n}\n","/*\n * Copyright 2020 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Config } from '@backstage/config';\nimport { AwsS3Integration } from './awsS3/AwsS3Integration';\nimport { AzureIntegration } from './azure/AzureIntegration';\nimport { BitbucketCloudIntegration } from './bitbucketCloud/BitbucketCloudIntegration';\nimport { BitbucketIntegration } from './bitbucket/BitbucketIntegration';\nimport { BitbucketServerIntegration } from './bitbucketServer/BitbucketServerIntegration';\nimport { GerritIntegration } from './gerrit/GerritIntegration';\nimport { GitHubIntegration } from './github/GitHubIntegration';\nimport { GitLabIntegration } from './gitlab/GitLabIntegration';\nimport { defaultScmResolveUrl } from './helpers';\nimport { ScmIntegration, ScmIntegrationsGroup } from './types';\nimport { ScmIntegrationRegistry } from './registry';\n\n/**\n * The set of supported integrations.\n *\n * @public\n */\nexport interface IntegrationsByType {\n  awsS3: ScmIntegrationsGroup<AwsS3Integration>;\n  azure: ScmIntegrationsGroup<AzureIntegration>;\n  /**\n   * @deprecated in favor of `bitbucketCloud` and `bitbucketServer`\n   */\n  bitbucket: ScmIntegrationsGroup<BitbucketIntegration>;\n  bitbucketCloud: ScmIntegrationsGroup<BitbucketCloudIntegration>;\n  bitbucketServer: ScmIntegrationsGroup<BitbucketServerIntegration>;\n  gerrit: ScmIntegrationsGroup<GerritIntegration>;\n  github: ScmIntegrationsGroup<GitHubIntegration>;\n  gitlab: ScmIntegrationsGroup<GitLabIntegration>;\n}\n\n/**\n * Exposes the set of supported integrations.\n *\n * @public\n */\nexport class ScmIntegrations implements ScmIntegrationRegistry {\n  private readonly byType: IntegrationsByType;\n\n  static fromConfig(config: Config): ScmIntegrations {\n    return new ScmIntegrations({\n      awsS3: AwsS3Integration.factory({ config }),\n      azure: AzureIntegration.factory({ config }),\n      bitbucket: BitbucketIntegration.factory({ config }),\n      bitbucketCloud: BitbucketCloudIntegration.factory({ config }),\n      bitbucketServer: BitbucketServerIntegration.factory({ config }),\n      gerrit: GerritIntegration.factory({ config }),\n      github: GitHubIntegration.factory({ config }),\n      gitlab: GitLabIntegration.factory({ config }),\n    });\n  }\n\n  constructor(integrationsByType: IntegrationsByType) {\n    this.byType = integrationsByType;\n  }\n\n  get awsS3(): ScmIntegrationsGroup<AwsS3Integration> {\n    return this.byType.awsS3;\n  }\n\n  get azure(): ScmIntegrationsGroup<AzureIntegration> {\n    return this.byType.azure;\n  }\n\n  /**\n   * @deprecated in favor of `bitbucketCloud()` and `bitbucketServer()`\n   */\n  get bitbucket(): ScmIntegrationsGroup<BitbucketIntegration> {\n    return this.byType.bitbucket;\n  }\n\n  get bitbucketCloud(): ScmIntegrationsGroup<BitbucketCloudIntegration> {\n    return this.byType.bitbucketCloud;\n  }\n\n  get bitbucketServer(): ScmIntegrationsGroup<BitbucketServerIntegration> {\n    return this.byType.bitbucketServer;\n  }\n\n  get gerrit(): ScmIntegrationsGroup<GerritIntegration> {\n    return this.byType.gerrit;\n  }\n\n  get github(): ScmIntegrationsGroup<GitHubIntegration> {\n    return this.byType.github;\n  }\n\n  get gitlab(): ScmIntegrationsGroup<GitLabIntegration> {\n    return this.byType.gitlab;\n  }\n\n  list(): ScmIntegration[] {\n    return Object.values(this.byType).flatMap(\n      i => i.list() as ScmIntegration[],\n    );\n  }\n\n  byUrl(url: string | URL): ScmIntegration | undefined {\n    return Object.values(this.byType)\n      .map(i => i.byUrl(url))\n      .find(Boolean);\n  }\n\n  byHost(host: string): ScmIntegration | undefined {\n    return Object.values(this.byType)\n      .map(i => i.byHost(host))\n      .find(Boolean);\n  }\n\n  resolveUrl(options: {\n    url: string;\n    base: string;\n    lineNumber?: number;\n  }): string {\n    const integration = this.byUrl(options.base);\n    if (!integration) {\n      return defaultScmResolveUrl(options);\n    }\n\n    return integration.resolveUrl(options);\n  }\n\n  resolveEditUrl(url: string): string {\n    const integration = this.byUrl(url);\n    if (!integration) {\n      return url;\n    }\n\n    return integration.resolveEditUrl(url);\n  }\n}\n"],"names":[],"mappings":"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"}