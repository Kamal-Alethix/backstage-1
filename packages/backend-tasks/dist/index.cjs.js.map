{"version":3,"file":"index.cjs.js","sources":["../src/database/tables.ts","../src/database/migrateBackendTasks.ts","../src/tasks/util.ts","../src/tasks/LocalTaskWorker.ts","../src/tasks/types.ts","../src/tasks/TaskWorker.ts","../src/tasks/PluginTaskSchedulerImpl.ts","../src/tasks/PluginTaskSchedulerJanitor.ts","../src/tasks/TaskScheduler.ts"],"sourcesContent":["/*\n * Copyright 2021 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport const DB_MIGRATIONS_TABLE = 'backstage_backend_tasks__knex_migrations';\nexport const DB_TASKS_TABLE = 'backstage_backend_tasks__tasks';\n\nexport type DbTasksRow = {\n  id: string;\n  settings_json: string;\n  next_run_start_at: Date;\n  current_run_ticket?: string;\n  current_run_started_at?: Date | string;\n  current_run_expires_at?: Date | string;\n};\n","/*\n * Copyright 2021 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { resolvePackagePath } from '@backstage/backend-common';\nimport { Knex } from 'knex';\nimport { DB_MIGRATIONS_TABLE } from './tables';\n\nconst migrationsDir = resolvePackagePath(\n  '@backstage/backend-tasks',\n  'migrations',\n);\n\nexport async function migrateBackendTasks(knex: Knex): Promise<void> {\n  await knex.migrate.latest({\n    directory: migrationsDir,\n    tableName: DB_MIGRATIONS_TABLE,\n  });\n}\n","/*\n * Copyright 2021 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { InputError } from '@backstage/errors';\nimport { Knex } from 'knex';\nimport { DateTime, Duration } from 'luxon';\nimport { AbortController, AbortSignal } from 'node-abort-controller';\n\n// Keep the IDs compatible with e.g. Prometheus labels\nexport function validateId(id: string) {\n  if (typeof id !== 'string' || !id.trim()) {\n    throw new InputError(`${id} is not a valid ID, expected non-empty string`);\n  }\n}\n\nexport function dbTime(t: Date | string): DateTime {\n  if (typeof t === 'string') {\n    return DateTime.fromSQL(t);\n  }\n  return DateTime.fromJSDate(t);\n}\n\nexport function nowPlus(duration: Duration | undefined, knex: Knex) {\n  const seconds = duration?.as('seconds') ?? 0;\n  if (!seconds) {\n    return knex.fn.now();\n  }\n  return knex.client.config.client.includes('sqlite3')\n    ? knex.raw(`datetime('now', ?)`, [`${seconds} seconds`])\n    : knex.raw(`now() + interval '${seconds} seconds'`);\n}\n\n/**\n * Sleep for the given duration, but return sooner if the abort signal\n * triggers.\n *\n * @param duration - The amount of time to sleep, at most\n * @param abortSignal - An optional abort signal that short circuits the wait\n */\nexport async function sleep(\n  duration: Duration,\n  abortSignal?: AbortSignal,\n): Promise<void> {\n  if (abortSignal?.aborted) {\n    return;\n  }\n\n  await new Promise<void>(resolve => {\n    let timeoutHandle: NodeJS.Timeout | undefined = undefined;\n\n    const done = () => {\n      if (timeoutHandle) {\n        clearTimeout(timeoutHandle);\n      }\n      abortSignal?.removeEventListener('abort', done);\n      resolve();\n    };\n\n    timeoutHandle = setTimeout(done, duration.as('milliseconds'));\n    abortSignal?.addEventListener('abort', done);\n  });\n}\n\n/**\n * Creates a new AbortController that, in addition to working as a regular\n * standalone controller, also gets aborted if the given parent signal\n * reaches aborted state.\n *\n * @param parent - The \"parent\" signal that can trigger the delegate\n */\nexport function delegateAbortController(parent?: AbortSignal): AbortController {\n  const delegate = new AbortController();\n\n  if (parent) {\n    if (parent.aborted) {\n      delegate.abort();\n    } else {\n      const onParentAborted = () => {\n        delegate.abort();\n      };\n\n      const onChildAborted = () => {\n        parent.removeEventListener('abort', onParentAborted);\n      };\n\n      parent.addEventListener('abort', onParentAborted, { once: true });\n      delegate.signal.addEventListener('abort', onChildAborted, { once: true });\n    }\n  }\n\n  return delegate;\n}\n","/*\n * Copyright 2022 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { ConflictError } from '@backstage/errors';\nimport { CronTime } from 'cron';\nimport { DateTime, Duration } from 'luxon';\nimport { AbortController, AbortSignal } from 'node-abort-controller';\nimport { Logger } from 'winston';\nimport { TaskFunction, TaskSettingsV2 } from './types';\nimport { delegateAbortController, sleep } from './util';\n\n/**\n * Implements tasks that run locally without cross-host collaboration.\n *\n * @private\n */\nexport class LocalTaskWorker {\n  private abortWait: AbortController | undefined;\n\n  constructor(\n    private readonly taskId: string,\n    private readonly fn: TaskFunction,\n    private readonly logger: Logger,\n  ) {}\n\n  start(settings: TaskSettingsV2, options?: { signal?: AbortSignal }) {\n    this.logger.info(\n      `Task worker starting: ${this.taskId}, ${JSON.stringify(settings)}`,\n    );\n    let attemptNum = 1;\n    (async () => {\n      for (;;) {\n        try {\n          if (settings.initialDelayDuration) {\n            await this.sleep(\n              Duration.fromISO(settings.initialDelayDuration),\n              options?.signal,\n            );\n          }\n\n          while (!options?.signal?.aborted) {\n            const startTime = process.hrtime();\n            await this.runOnce(settings, options?.signal);\n            const timeTaken = process.hrtime(startTime);\n            await this.waitUntilNext(\n              settings,\n              (timeTaken[0] + timeTaken[1] / 1e9) * 1000,\n              options?.signal,\n            );\n          }\n          this.logger.info(`Task worker finished: ${this.taskId}`);\n          attemptNum = 0;\n          break;\n        } catch (e) {\n          attemptNum += 1;\n          this.logger.warn(\n            `Task worker failed unexpectedly, attempt number ${attemptNum}, ${e}`,\n          );\n          await sleep(Duration.fromObject({ seconds: 1 }));\n        }\n      }\n    })();\n  }\n\n  trigger(): void {\n    if (!this.abortWait) {\n      throw new ConflictError(`Task ${this.taskId} is currently running`);\n    }\n    this.abortWait.abort();\n  }\n\n  /**\n   * Makes a single attempt at running the task to completion.\n   */\n  private async runOnce(\n    settings: TaskSettingsV2,\n    signal?: AbortSignal,\n  ): Promise<void> {\n    // Abort the task execution either if the worker is stopped, or if the\n    // task timeout is hit\n    const taskAbortController = delegateAbortController(signal);\n    const timeoutHandle = setTimeout(() => {\n      taskAbortController.abort();\n    }, Duration.fromISO(settings.timeoutAfterDuration).as('milliseconds'));\n\n    try {\n      await this.fn(taskAbortController.signal);\n    } catch (e) {\n      // ignore intentionally\n    }\n\n    // release resources\n    clearTimeout(timeoutHandle);\n    taskAbortController.abort();\n  }\n\n  /**\n   * Sleeps until it's time to run the task again.\n   */\n  private async waitUntilNext(\n    settings: TaskSettingsV2,\n    lastRunMillis: number,\n    signal?: AbortSignal,\n  ) {\n    if (signal?.aborted) {\n      return;\n    }\n\n    const isCron = !settings.cadence.startsWith('P');\n    let dt: number;\n\n    if (isCron) {\n      const nextRun = +new CronTime(settings.cadence).sendAt().toJSDate();\n      dt = nextRun - Date.now();\n    } else {\n      dt =\n        Duration.fromISO(settings.cadence).as('milliseconds') - lastRunMillis;\n    }\n\n    dt = Math.max(dt, 0);\n\n    this.logger.debug(\n      `task: ${this.taskId} will next occur around ${DateTime.now().plus(\n        Duration.fromMillis(dt),\n      )}`,\n    );\n\n    await this.sleep(Duration.fromMillis(dt), signal);\n  }\n\n  private async sleep(\n    duration: Duration,\n    abortSignal?: AbortSignal,\n  ): Promise<void> {\n    this.abortWait = delegateAbortController(abortSignal);\n    await sleep(duration, this.abortWait.signal);\n    this.abortWait.abort(); // cleans up resources\n    this.abortWait = undefined;\n  }\n}\n","/*\n * Copyright 2021 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { CronTime } from 'cron';\nimport { Duration } from 'luxon';\nimport { AbortSignal } from 'node-abort-controller';\nimport { z } from 'zod';\n\n/**\n * Human friendly durations object\n * @public\n */\nexport type HumanDuration = {\n  years?: number;\n  months?: number;\n  weeks?: number;\n  days?: number;\n  hours?: number;\n  minutes?: number;\n  seconds?: number;\n  milliseconds?: number;\n};\n\n/**\n * A function that can be called as a scheduled task.\n *\n * It may optionally accept an abort signal argument. When the signal triggers,\n * processing should abort and return as quickly as possible.\n *\n * @public\n */\nexport type TaskFunction =\n  | ((abortSignal: AbortSignal) => void | Promise<void>)\n  | (() => void | Promise<void>);\n\n/**\n * Options that control the scheduling of a task.\n *\n * @public\n */\nexport interface TaskScheduleDefinition {\n  /**\n   * How often you want the task to run. The system does its best to avoid\n   * overlapping invocations.\n   *\n   * @remarks\n   *\n   * This is a best effort value; under some circumstances there can be\n   * deviations. For example, if the task runtime is longer than the frequency\n   * and the timeout has not been given or not been exceeded yet, the next\n   * invocation of this task will be delayed until after the previous one\n   * finishes.\n   *\n   * This is a required field.\n   */\n  frequency:\n    | {\n        /**\n         * A crontab style string.\n         *\n         * @remarks\n         *\n         * Overview:\n         *\n         * ```\n         *   ┌────────────── second (optional)\n         *   │ ┌──────────── minute\n         *   │ │ ┌────────── hour\n         *   │ │ │ ┌──────── day of month\n         *   │ │ │ │ ┌────── month\n         *   │ │ │ │ │ ┌──── day of week\n         *   │ │ │ │ │ │\n         *   │ │ │ │ │ │\n         *   * * * * * *\n         * ```\n         */\n        cron: string;\n      }\n    | Duration\n    | HumanDuration;\n\n  /**\n   * The maximum amount of time that a single task invocation can take, before\n   * it's considered timed out and gets \"released\" such that a new invocation\n   * is permitted to take place (possibly, then, on a different worker).\n   */\n  timeout: Duration | HumanDuration;\n\n  /**\n   * The amount of time that should pass before the first invocation happens.\n   *\n   * @remarks\n   *\n   * This can be useful in cold start scenarios to stagger or delay some heavy\n   * compute jobs. If no value is given for this field then the first invocation\n   * will happen as soon as possible according to the cadence.\n   *\n   * NOTE: This is a per-worker delay. If you have a cluster of workers all\n   * collaborating on a task that has its `scope` field set to `'global'`, then\n   * you may still see the task being processed by other long-lived workers,\n   * while any given single worker is in its initial sleep delay time e.g. after\n   * a deployment. Therefore this parameter is not useful for \"globally\" pausing\n   * work; its main intended use is for individual machines to get a chance to\n   * reach some equilibrium at startup before triggering heavy batch workloads.\n   */\n  initialDelay?: Duration | HumanDuration;\n\n  /**\n   * Sets the scope of concurrency control / locking to apply for invocations of\n   * this task.\n   *\n   * @remarks\n   *\n   * When the scope is set to the default value `'global'`, the scheduler will\n   * attempt to ensure that only one worker machine runs the task at a time,\n   * according to the given cadence. This means that as the number of worker\n   * hosts increases, the invocation frequency of this task will not go up.\n   * Instead the load is spread randomly across hosts. This setting is useful\n   * for tasks that access shared resources, for example catalog ingestion tasks\n   * where you do not want many machines to repeatedly import the same data and\n   * trample over each other.\n   *\n   * When the scope is set to `'local'`, there is no concurrency control across\n   * hosts. Each host runs the task according to the given cadence similarly to\n   * `setInterval`, but the runtime ensures that there are no overlapping runs.\n   *\n   * @defaultValue 'global'\n   */\n  scope?: 'global' | 'local';\n}\n\n/**\n * Options that apply to the invocation of a given task.\n *\n * @public\n */\nexport interface TaskInvocationDefinition {\n  /**\n   * A unique ID (within the scope of the plugin) for the task.\n   */\n  id: string;\n\n  /**\n   * The actual task function to be invoked regularly.\n   */\n  fn: TaskFunction;\n\n  /**\n   * An abort signal that, when triggered, will stop the recurring execution of\n   * the task.\n   */\n  signal?: AbortSignal;\n}\n\n/**\n * A previously prepared task schedule, ready to be invoked.\n *\n * @public\n */\nexport interface TaskRunner {\n  /**\n   * Takes the schedule and executes an actual task using it.\n   *\n   * @param task - The actual runtime properties of the task\n   */\n  run(task: TaskInvocationDefinition): Promise<void>;\n}\n\n/**\n * Deals with the scheduling of distributed tasks, for a given plugin.\n *\n * @public\n */\nexport interface PluginTaskScheduler {\n  /**\n   * Manually triggers a task by ID.\n   *\n   * If the task doesn't exist, a NotFoundError is thrown. If the task is\n   * currently running, a ConflictError is thrown.\n   *\n   * @param id - The task ID\n   */\n  triggerTask(id: string): Promise<void>;\n\n  /**\n   * Schedules a task function for recurring runs.\n   *\n   * @remarks\n   *\n   * The `scope` task field controls whether to use coordinated exclusive\n   * invocation across workers, or to just coordinate within the current worker.\n   *\n   * This convenience method performs both the scheduling and invocation in one\n   * go.\n   *\n   * @param task - The task definition\n   */\n  scheduleTask(\n    task: TaskScheduleDefinition & TaskInvocationDefinition,\n  ): Promise<void>;\n\n  /**\n   * Creates a scheduled but dormant recurring task, ready to be launched at a\n   * later time.\n   *\n   * @remarks\n   *\n   * This method is useful for pre-creating a schedule in outer code to be\n   * passed into an inner implementation, such that the outer code controls\n   * scheduling while inner code controls implementation.\n   *\n   * @param schedule - The task schedule\n   */\n  createScheduledTaskRunner(schedule: TaskScheduleDefinition): TaskRunner;\n}\n\nfunction isValidOptionalDurationString(d: string | undefined): boolean {\n  try {\n    return !d || Duration.fromISO(d).isValid;\n  } catch {\n    return false;\n  }\n}\n\nfunction isValidCronFormat(c: string | undefined): boolean {\n  try {\n    if (!c) {\n      return false;\n    }\n    // parse cron format to ensure it's a valid format.\n    // eslint-disable-next-line no-new\n    new CronTime(c);\n    return true;\n  } catch {\n    return false;\n  }\n}\n\nexport const taskSettingsV1Schema = z.object({\n  version: z.literal(1),\n  initialDelayDuration: z\n    .string()\n    .optional()\n    .refine(isValidOptionalDurationString, {\n      message: 'Invalid duration, expecting ISO Period',\n    }),\n  recurringAtMostEveryDuration: z\n    .string()\n    .refine(isValidOptionalDurationString, {\n      message: 'Invalid duration, expecting ISO Period',\n    }),\n  timeoutAfterDuration: z.string().refine(isValidOptionalDurationString, {\n    message: 'Invalid duration, expecting ISO Period',\n  }),\n});\n\n/**\n * The properties that control a scheduled task (version 1).\n */\nexport type TaskSettingsV1 = z.infer<typeof taskSettingsV1Schema>;\n\nexport const taskSettingsV2Schema = z.object({\n  version: z.literal(2),\n  cadence: z\n    .string()\n    .refine(isValidCronFormat, { message: 'Invalid cron' })\n    .or(\n      z.string().refine(isValidOptionalDurationString, {\n        message: 'Invalid duration, expecting ISO Period',\n      }),\n    ),\n  timeoutAfterDuration: z.string().refine(isValidOptionalDurationString, {\n    message: 'Invalid duration, expecting ISO Period',\n  }),\n  initialDelayDuration: z\n    .string()\n    .optional()\n    .refine(isValidOptionalDurationString, {\n      message: 'Invalid duration, expecting ISO Period',\n    }),\n});\n\n/**\n * The properties that control a scheduled task (version 2).\n */\nexport type TaskSettingsV2 = z.infer<typeof taskSettingsV2Schema>;\n","/*\n * Copyright 2021 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { ConflictError, NotFoundError } from '@backstage/errors';\nimport { CronTime } from 'cron';\nimport { Knex } from 'knex';\nimport { DateTime, Duration } from 'luxon';\nimport { AbortSignal } from 'node-abort-controller';\nimport { v4 as uuid } from 'uuid';\nimport { Logger } from 'winston';\nimport { DbTasksRow, DB_TASKS_TABLE } from '../database/tables';\nimport { TaskFunction, TaskSettingsV2, taskSettingsV2Schema } from './types';\nimport { delegateAbortController, nowPlus, sleep } from './util';\n\nconst DEFAULT_WORK_CHECK_FREQUENCY = Duration.fromObject({ seconds: 5 });\n\n/**\n * Implements tasks that run across worker hosts, with collaborative locking.\n *\n * @private\n */\nexport class TaskWorker {\n  constructor(\n    private readonly taskId: string,\n    private readonly fn: TaskFunction,\n    private readonly knex: Knex,\n    private readonly logger: Logger,\n    private readonly workCheckFrequency: Duration = DEFAULT_WORK_CHECK_FREQUENCY,\n  ) {}\n\n  async start(settings: TaskSettingsV2, options?: { signal?: AbortSignal }) {\n    try {\n      await this.persistTask(settings);\n    } catch (e) {\n      throw new Error(`Failed to persist task, ${e}`);\n    }\n\n    this.logger.info(\n      `Task worker starting: ${this.taskId}, ${JSON.stringify(settings)}`,\n    );\n    let attemptNum = 1;\n    (async () => {\n      for (;;) {\n        try {\n          if (settings.initialDelayDuration) {\n            await sleep(\n              Duration.fromISO(settings.initialDelayDuration),\n              options?.signal,\n            );\n          }\n\n          while (!options?.signal?.aborted) {\n            const runResult = await this.runOnce(options?.signal);\n            if (runResult.result === 'abort') {\n              break;\n            }\n\n            await sleep(this.workCheckFrequency, options?.signal);\n          }\n\n          this.logger.info(`Task worker finished: ${this.taskId}`);\n          attemptNum = 0;\n          break;\n        } catch (e) {\n          attemptNum += 1;\n          this.logger.warn(\n            `Task worker failed unexpectedly, attempt number ${attemptNum}, ${e}`,\n          );\n          await sleep(Duration.fromObject({ seconds: 1 }));\n        }\n      }\n    })();\n  }\n\n  static async trigger(knex: Knex, taskId: string): Promise<void> {\n    // check if task exists\n    const rows = await knex<DbTasksRow>(DB_TASKS_TABLE)\n      .select(knex.raw(1))\n      .where('id', '=', taskId);\n    if (rows.length !== 1) {\n      throw new NotFoundError(`Task ${taskId} does not exist`);\n    }\n\n    const updatedRows = await knex<DbTasksRow>(DB_TASKS_TABLE)\n      .where('id', '=', taskId)\n      .whereNull('current_run_ticket')\n      .update({\n        next_run_start_at: knex.fn.now(),\n      });\n    if (updatedRows < 1) {\n      throw new ConflictError(`Task ${taskId} is currently running`);\n    }\n  }\n\n  /**\n   * Makes a single attempt at running the task to completion, if ready.\n   *\n   * @returns The outcome of the attempt\n   */\n  private async runOnce(\n    signal?: AbortSignal,\n  ): Promise<\n    | { result: 'not-ready-yet' }\n    | { result: 'abort' }\n    | { result: 'failed' }\n    | { result: 'completed' }\n  > {\n    const findResult = await this.findReadyTask();\n    if (\n      findResult.result === 'not-ready-yet' ||\n      findResult.result === 'abort'\n    ) {\n      return findResult;\n    }\n\n    const taskSettings = findResult.settings;\n    const ticket = uuid();\n\n    const claimed = await this.tryClaimTask(ticket, taskSettings);\n    if (!claimed) {\n      return { result: 'not-ready-yet' };\n    }\n\n    // Abort the task execution either if the worker is stopped, or if the\n    // task timeout is hit\n    const taskAbortController = delegateAbortController(signal);\n    const timeoutHandle = setTimeout(() => {\n      taskAbortController.abort();\n    }, Duration.fromISO(taskSettings.timeoutAfterDuration).as('milliseconds'));\n\n    try {\n      await this.fn(taskAbortController.signal);\n      taskAbortController.abort(); // releases resources\n    } catch (e) {\n      this.logger.error(e);\n      await this.tryReleaseTask(ticket, taskSettings);\n      return { result: 'failed' };\n    } finally {\n      clearTimeout(timeoutHandle);\n    }\n\n    await this.tryReleaseTask(ticket, taskSettings);\n    return { result: 'completed' };\n  }\n\n  /**\n   * Perform the initial store of the task info\n   */\n  async persistTask(settings: TaskSettingsV2) {\n    // Perform an initial parse to ensure that we will definitely be able to\n    // read it back again.\n    taskSettingsV2Schema.parse(settings);\n\n    const isCron = !settings?.cadence.startsWith('P');\n\n    let startAt: Knex.Raw;\n    if (settings.initialDelayDuration) {\n      startAt = nowPlus(\n        Duration.fromISO(settings.initialDelayDuration),\n        this.knex,\n      );\n    } else if (isCron) {\n      const time = new CronTime(settings.cadence)\n        .sendAt()\n        .minus({ seconds: 1 }) // immediately, if \"* * * * * *\"\n        .toUTC()\n        .toISO();\n      startAt = this.knex.client.config.client.includes('sqlite3')\n        ? this.knex.raw('datetime(?)', [time])\n        : this.knex.raw(`?`, [time]);\n    } else {\n      startAt = this.knex.fn.now();\n    }\n\n    this.logger.debug(`task: ${this.taskId} configured to run at: ${startAt}`);\n\n    // It's OK if the task already exists; if it does, just replace its\n    // settings with the new value and start the loop as usual.\n    await this.knex<DbTasksRow>(DB_TASKS_TABLE)\n      .insert({\n        id: this.taskId,\n        settings_json: JSON.stringify(settings),\n        next_run_start_at: startAt,\n      })\n      .onConflict('id')\n      .merge(['settings_json']);\n  }\n\n  /**\n   * Check if the task is ready to run\n   */\n  async findReadyTask(): Promise<\n    | { result: 'not-ready-yet' }\n    | { result: 'abort' }\n    | { result: 'ready'; settings: TaskSettingsV2 }\n  > {\n    const [row] = await this.knex<DbTasksRow>(DB_TASKS_TABLE)\n      .where('id', '=', this.taskId)\n      .select({\n        settingsJson: 'settings_json',\n        ready: this.knex.raw(\n          `CASE\n            WHEN next_run_start_at <= ? AND current_run_ticket IS NULL THEN TRUE\n            ELSE FALSE\n          END`,\n          [this.knex.fn.now()],\n        ),\n      });\n\n    if (!row) {\n      this.logger.info(\n        'No longer able to find task; aborting and assuming that it has been unregistered or expired',\n      );\n      return { result: 'abort' };\n    } else if (!row.ready) {\n      return { result: 'not-ready-yet' };\n    }\n\n    try {\n      const obj = JSON.parse(row.settingsJson);\n      const settings = taskSettingsV2Schema.parse(obj);\n      return { result: 'ready', settings };\n    } catch (e) {\n      this.logger.info(\n        `Task \"${this.taskId}\" is no longer able to parse task settings; aborting and assuming that a ` +\n          `newer version of the task has been issued and being handled by other workers, ${e}`,\n      );\n      return { result: 'abort' };\n    }\n  }\n\n  /**\n   * Attempts to claim a task that's ready for execution, on this worker's\n   * behalf. We should not attempt to perform the work unless the claim really\n   * goes through.\n   *\n   * @param ticket - A globally unique string that changes for each invocation\n   * @param settings - The settings of the task to claim\n   * @returns True if it was successfully claimed\n   */\n  async tryClaimTask(\n    ticket: string,\n    settings: TaskSettingsV2,\n  ): Promise<boolean> {\n    const startedAt = this.knex.fn.now();\n    const expiresAt = settings.timeoutAfterDuration\n      ? nowPlus(Duration.fromISO(settings.timeoutAfterDuration), this.knex)\n      : this.knex.raw('null');\n\n    const rows = await this.knex<DbTasksRow>(DB_TASKS_TABLE)\n      .where('id', '=', this.taskId)\n      .whereNull('current_run_ticket')\n      .update({\n        current_run_ticket: ticket,\n        current_run_started_at: startedAt,\n        current_run_expires_at: expiresAt,\n      });\n\n    return rows === 1;\n  }\n\n  async tryReleaseTask(\n    ticket: string,\n    settings: TaskSettingsV2,\n  ): Promise<boolean> {\n    const isCron = !settings?.cadence.startsWith('P');\n\n    let nextRun: Knex.Raw;\n    if (isCron) {\n      const time = new CronTime(settings.cadence).sendAt().toUTC().toISO();\n      this.logger.debug(`task: ${this.taskId} will next occur around ${time}`);\n      nextRun = this.knex.client.config.client.includes('sqlite3')\n        ? this.knex.raw('datetime(?)', [time])\n        : this.knex.raw(`?`, [time]);\n    } else {\n      const dt = Duration.fromISO(settings.cadence).as('seconds');\n      this.logger.debug(\n        `task: ${this.taskId} will next occur around ${DateTime.now().plus({\n          seconds: dt,\n        })}`,\n      );\n      nextRun = this.knex.client.config.client.includes('sqlite3')\n        ? this.knex.raw(\n            `max(datetime(next_run_start_at, ?), datetime('now'))`,\n            [`+${dt} seconds`],\n          )\n        : this.knex.raw(\n            `greatest(next_run_start_at + interval '${dt} seconds', now())`,\n          );\n    }\n\n    const rows = await this.knex<DbTasksRow>(DB_TASKS_TABLE)\n      .where('id', '=', this.taskId)\n      .where('current_run_ticket', '=', ticket)\n      .update({\n        next_run_start_at: nextRun,\n        current_run_ticket: this.knex.raw('null'),\n        current_run_started_at: this.knex.raw('null'),\n        current_run_expires_at: this.knex.raw('null'),\n      });\n\n    return rows === 1;\n  }\n}\n","/*\n * Copyright 2021 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Knex } from 'knex';\nimport { Duration } from 'luxon';\nimport { Logger } from 'winston';\nimport { LocalTaskWorker } from './LocalTaskWorker';\nimport { TaskWorker } from './TaskWorker';\nimport {\n  PluginTaskScheduler,\n  TaskInvocationDefinition,\n  TaskRunner,\n  TaskScheduleDefinition,\n} from './types';\nimport { validateId } from './util';\n\n/**\n * Implements the actual task management.\n */\nexport class PluginTaskSchedulerImpl implements PluginTaskScheduler {\n  private readonly localTasksById = new Map<string, LocalTaskWorker>();\n\n  constructor(\n    private readonly databaseFactory: () => Promise<Knex>,\n    private readonly logger: Logger,\n  ) {}\n\n  async triggerTask(id: string): Promise<void> {\n    const localTask = this.localTasksById.get(id);\n    if (localTask) {\n      localTask.trigger();\n      return;\n    }\n\n    const knex = await this.databaseFactory();\n    await TaskWorker.trigger(knex, id);\n  }\n\n  async scheduleTask(\n    task: TaskScheduleDefinition & TaskInvocationDefinition,\n  ): Promise<void> {\n    validateId(task.id);\n    const scope = task.scope ?? 'global';\n\n    if (scope === 'global') {\n      const knex = await this.databaseFactory();\n      const worker = new TaskWorker(\n        task.id,\n        task.fn,\n        knex,\n        this.logger.child({ task: task.id }),\n      );\n\n      await worker.start(\n        {\n          version: 2,\n          cadence: parseDuration(task.frequency),\n          initialDelayDuration:\n            task.initialDelay && parseDuration(task.initialDelay),\n          timeoutAfterDuration: parseDuration(task.timeout),\n        },\n        {\n          signal: task.signal,\n        },\n      );\n    } else {\n      const worker = new LocalTaskWorker(task.id, task.fn, this.logger);\n\n      worker.start(\n        {\n          version: 2,\n          cadence: parseDuration(task.frequency),\n          initialDelayDuration:\n            task.initialDelay && parseDuration(task.initialDelay),\n          timeoutAfterDuration: parseDuration(task.timeout),\n        },\n        {\n          signal: task.signal,\n        },\n      );\n\n      this.localTasksById.set(task.id, worker);\n    }\n  }\n\n  createScheduledTaskRunner(schedule: TaskScheduleDefinition): TaskRunner {\n    return {\n      run: async task => {\n        await this.scheduleTask({ ...task, ...schedule });\n      },\n    };\n  }\n}\n\nexport function parseDuration(\n  frequency: TaskScheduleDefinition['frequency'],\n): string {\n  if ('cron' in frequency) {\n    return frequency.cron;\n  }\n\n  if (Duration.isDuration(frequency)) {\n    return frequency.toISO();\n  }\n\n  return Duration.fromObject(frequency).toISO();\n}\n","/*\n * Copyright 2021 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Knex } from 'knex';\nimport { Duration } from 'luxon';\nimport { AbortSignal } from 'node-abort-controller';\nimport { Logger } from 'winston';\nimport { DbTasksRow, DB_TASKS_TABLE } from '../database/tables';\nimport { sleep } from './util';\n\n/**\n * Makes sure to auto-expire and clean up things that time out or for other\n * reasons should not be left lingering.\n */\nexport class PluginTaskSchedulerJanitor {\n  private readonly knex: Knex;\n  private readonly waitBetweenRuns: Duration;\n  private readonly logger: Logger;\n\n  constructor(options: {\n    knex: Knex;\n    waitBetweenRuns: Duration;\n    logger: Logger;\n  }) {\n    this.knex = options.knex;\n    this.waitBetweenRuns = options.waitBetweenRuns;\n    this.logger = options.logger;\n  }\n\n  async start(abortSignal?: AbortSignal) {\n    while (!abortSignal?.aborted) {\n      try {\n        await this.runOnce();\n      } catch (e) {\n        this.logger.warn(`Error while performing janitorial tasks, ${e}`);\n      }\n\n      await sleep(this.waitBetweenRuns, abortSignal);\n    }\n  }\n\n  private async runOnce() {\n    // SQLite currently (Oct 1 2021) returns a number for returning()\n    // statements, effectively ignoring them and instead returning the outcome\n    // of the delete() - and knex also emits a warning about that fact, which\n    // is why we avoid that entirely for the sqlite3 family of drivers.\n    // https://github.com/knex/knex/issues/4370\n    // https://github.com/mapbox/node-sqlite3/issues/1453\n\n    const dbNull = this.knex.raw('null');\n\n    const tasks = await this.knex<DbTasksRow>(DB_TASKS_TABLE)\n      .where('current_run_expires_at', '<', this.knex.fn.now())\n      .update({\n        current_run_ticket: dbNull,\n        current_run_started_at: dbNull,\n        current_run_expires_at: dbNull,\n      })\n      .returning(['id']);\n\n    // sqlite ignores \"returning\", returns number of rows changed instead\n    if (typeof tasks === 'number') {\n      if (tasks > 0) {\n        this.logger.warn(`${tasks} tasks timed out and were lost`);\n      }\n    } else {\n      for (const { id } of tasks) {\n        this.logger.warn(`Task timed out and was lost: ${id}`);\n      }\n    }\n  }\n}\n","/*\n * Copyright 2021 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { DatabaseManager, getRootLogger } from '@backstage/backend-common';\nimport { Config } from '@backstage/config';\nimport { once } from 'lodash';\nimport { Duration } from 'luxon';\nimport { Logger } from 'winston';\nimport { migrateBackendTasks } from '../database/migrateBackendTasks';\nimport { PluginTaskSchedulerImpl } from './PluginTaskSchedulerImpl';\nimport { PluginTaskSchedulerJanitor } from './PluginTaskSchedulerJanitor';\nimport { PluginTaskScheduler } from './types';\n\n/**\n * Deals with the scheduling of distributed tasks.\n *\n * @public\n */\nexport class TaskScheduler {\n  static fromConfig(\n    config: Config,\n    options?: {\n      databaseManager?: DatabaseManager;\n      logger?: Logger;\n    },\n  ): TaskScheduler {\n    const databaseManager =\n      options?.databaseManager ?? DatabaseManager.fromConfig(config);\n    const logger = (options?.logger || getRootLogger()).child({\n      type: 'taskManager',\n    });\n    return new TaskScheduler(databaseManager, logger);\n  }\n\n  constructor(\n    private readonly databaseManager: DatabaseManager,\n    private readonly logger: Logger,\n  ) {}\n\n  /**\n   * Instantiates a task manager instance for the given plugin.\n   *\n   * @param pluginId - The unique ID of the plugin, for example \"catalog\"\n   * @returns A {@link PluginTaskScheduler} instance\n   */\n  forPlugin(pluginId: string): PluginTaskScheduler {\n    const databaseFactory = once(async () => {\n      const knex = await this.databaseManager.forPlugin(pluginId).getClient();\n\n      await migrateBackendTasks(knex);\n\n      const janitor = new PluginTaskSchedulerJanitor({\n        knex,\n        waitBetweenRuns: Duration.fromObject({ minutes: 1 }),\n        logger: this.logger,\n      });\n      janitor.start();\n\n      return knex;\n    });\n\n    return new PluginTaskSchedulerImpl(\n      databaseFactory,\n      this.logger.child({ plugin: pluginId }),\n    );\n  }\n}\n"],"names":["resolvePackagePath","InputError","AbortController","Duration","ConflictError","CronTime","DateTime","z","NotFoundError","uuid","DatabaseManager","getRootLogger","once"],"mappings":"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"}