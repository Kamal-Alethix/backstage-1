{"version":3,"file":"index.esm.js","sources":["../src/api/ScmAuthApi.ts","../src/api/ScmAuth.ts","../src/api/ScmIntegrationsApi.ts","../src/components/ScmIntegrationIcon/ScmIntegrationIcon.tsx"],"sourcesContent":["/*\n * Copyright 2020 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  ApiRef,\n  createApiRef,\n  AuthRequestOptions,\n} from '@backstage/core-plugin-api';\n\n/**\n * The options that control a {@link ScmAuthApi.getCredentials} call.\n *\n * @public\n */\nexport interface ScmAuthTokenOptions extends AuthRequestOptions {\n  /**\n   * The URL of the SCM resource to be accessed.\n   *\n   * @example https://github.com/backstage/backstage\n   */\n  url: string;\n\n  /**\n   * Whether to request additional access scope.\n   *\n   * Read access to user, organization, and repositories is always included.\n   */\n  additionalScope?: {\n    /**\n     * Requests access to be able to write repository content, including\n     * the ability to create things like issues and pull requests.\n     */\n    repoWrite?: boolean;\n    /**\n     * Allow an arbitrary list of scopes provided from the user\n     * to request from the provider.\n     */\n    customScopes?: {\n      github?: string[];\n      azure?: string[];\n      bitbucket?: string[];\n      gitlab?: string[];\n    };\n  };\n}\n\n/**\n * The response from a {@link ScmAuthApi.getCredentials} call.\n *\n * @public\n */\nexport interface ScmAuthTokenResponse {\n  /**\n   * An authorization token that can be used to authenticate requests.\n   */\n  token: string;\n\n  /**\n   * The set of HTTP headers that are needed to authenticate requests.\n   */\n  headers: { [name: string]: string };\n}\n\n/**\n * ScmAuthApi provides methods for authenticating towards source code management services.\n *\n * As opposed to using the GitHub, GitLab and other auth APIs\n * directly, this API allows for more generic access to SCM services.\n *\n * @public\n */\nexport interface ScmAuthApi {\n  /**\n   * Requests credentials for accessing an SCM resource.\n   */\n  getCredentials(options: ScmAuthTokenOptions): Promise<ScmAuthTokenResponse>;\n}\n\n/**\n * The ApiRef for the ScmAuthApi.\n *\n * @public\n */\nexport const scmAuthApiRef: ApiRef<ScmAuthApi> = createApiRef({\n  id: 'core.scmauth',\n});\n","/*\n * Copyright 2021 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  bitbucketAuthApiRef,\n  createApiFactory,\n  githubAuthApiRef,\n  gitlabAuthApiRef,\n  microsoftAuthApiRef,\n  OAuthApi,\n} from '@backstage/core-plugin-api';\nimport {\n  ScmAuthApi,\n  scmAuthApiRef,\n  ScmAuthTokenOptions,\n  ScmAuthTokenResponse,\n} from './ScmAuthApi';\n\ntype ScopeMapping = {\n  /** The base scopes used for all requests */\n  default: string[];\n  /** Additional scopes added if `repoWrite` is requested */\n  repoWrite: string[];\n};\n\n// An enum of all supported providers\ntype ProviderName = 'generic' | 'github' | 'azure' | 'bitbucket' | 'gitlab';\n\nclass ScmAuthMux implements ScmAuthApi {\n  #providers: Array<ScmAuth>;\n\n  constructor(providers: ScmAuth[]) {\n    this.#providers = providers;\n  }\n\n  async getCredentials(\n    options: ScmAuthTokenOptions,\n  ): Promise<ScmAuthTokenResponse> {\n    const url = new URL(options.url);\n    const provider = this.#providers.find(p => p.isUrlSupported(url));\n    if (!provider) {\n      throw new Error(\n        `No auth provider available for '${options.url}', see https://backstage.io/link?scm-auth`,\n      );\n    }\n\n    return provider.getCredentials(options);\n  }\n}\n\n/**\n * An implementation of the ScmAuthApi that merges together OAuthApi instances\n * to form a single instance that can handles authentication for multiple providers.\n *\n * @public\n *\n * @example\n * ```\n * // Supports authentication towards both public GitHub and GHE:\n * createApiFactory({\n *   api: scmAuthApiRef,\n *   deps: {\n *     gheAuthApi: gheAuthApiRef,\n *     githubAuthApi: githubAuthApiRef,\n *   },\n *   factory: ({ githubAuthApi, gheAuthApi }) =>\n *     ScmAuth.merge(\n *       ScmAuth.forGithub(githubAuthApi),\n *       ScmAuth.forGithub(gheAuthApi, {\n *         host: 'ghe.example.com',\n *       }),\n *     )\n * })\n * ```\n */\nexport class ScmAuth implements ScmAuthApi {\n  /**\n   * Creates an API factory that enables auth for each of the default SCM providers.\n   */\n  static createDefaultApiFactory() {\n    return createApiFactory({\n      api: scmAuthApiRef,\n      deps: {\n        github: githubAuthApiRef,\n        gitlab: gitlabAuthApiRef,\n        azure: microsoftAuthApiRef,\n        bitbucket: bitbucketAuthApiRef,\n      },\n      factory: ({ github, gitlab, azure, bitbucket }) =>\n        ScmAuth.merge(\n          ScmAuth.forGithub(github),\n          ScmAuth.forGitlab(gitlab),\n          ScmAuth.forAzure(azure),\n          ScmAuth.forBitbucket(bitbucket),\n        ),\n    });\n  }\n\n  /**\n   * Creates a general purpose ScmAuth instance with a custom scope mapping.\n   */\n  static forAuthApi(\n    authApi: OAuthApi,\n    options: {\n      host: string;\n      scopeMapping: {\n        default: string[];\n        repoWrite: string[];\n      };\n    },\n  ): ScmAuth {\n    return new ScmAuth('generic', authApi, options.host, options.scopeMapping);\n  }\n\n  /**\n   * Creates a new ScmAuth instance that handles authentication towards GitHub.\n   *\n   * The host option determines which URLs that are handled by this instance and defaults to `github.com`.\n   *\n   * The default scopes are:\n   *\n   * `repo read:org read:user`\n   *\n   * If the additional `repoWrite` permission is requested, these scopes are added:\n   *\n   * `gist`\n   */\n  static forGithub(\n    githubAuthApi: OAuthApi,\n    options?: {\n      host?: string;\n    },\n  ): ScmAuth {\n    const host = options?.host ?? 'github.com';\n    return new ScmAuth('github', githubAuthApi, host, {\n      default: ['repo', 'read:org', 'read:user'],\n      repoWrite: ['gist'],\n    });\n  }\n\n  /**\n   * Creates a new ScmAuth instance that handles authentication towards GitLab.\n   *\n   * The host option determines which URLs that are handled by this instance and defaults to `gitlab.com`.\n   *\n   * The default scopes are:\n   *\n   * `read_user read_api read_repository`\n   *\n   * If the additional `repoWrite` permission is requested, these scopes are added:\n   *\n   * `write_repository api`\n   */\n  static forGitlab(\n    gitlabAuthApi: OAuthApi,\n    options?: {\n      host?: string;\n    },\n  ): ScmAuth {\n    const host = options?.host ?? 'gitlab.com';\n    return new ScmAuth('gitlab', gitlabAuthApi, host, {\n      default: ['read_user', 'read_api', 'read_repository'],\n      repoWrite: ['write_repository', 'api'],\n    });\n  }\n\n  /**\n   * Creates a new ScmAuth instance that handles authentication towards Azure.\n   *\n   * The host option determines which URLs that are handled by this instance and defaults to `dev.azure.com`.\n   *\n   * The default scopes are:\n   *\n   * `vso.build vso.code vso.graph vso.project vso.profile`\n   *\n   * If the additional `repoWrite` permission is requested, these scopes are added:\n   *\n   * `vso.code_manage`\n   */\n  static forAzure(\n    microsoftAuthApi: OAuthApi,\n    options?: {\n      host?: string;\n    },\n  ): ScmAuth {\n    const host = options?.host ?? 'dev.azure.com';\n    return new ScmAuth('azure', microsoftAuthApi, host, {\n      default: [\n        'vso.build',\n        'vso.code',\n        'vso.graph',\n        'vso.project',\n        'vso.profile',\n      ],\n      repoWrite: ['vso.code_manage'],\n    });\n  }\n\n  /**\n   * Creates a new ScmAuth instance that handles authentication towards Bitbucket.\n   *\n   * The host option determines which URLs that are handled by this instance and defaults to `bitbucket.org`.\n   *\n   * The default scopes are:\n   *\n   * `account team pullrequest snippet issue`\n   *\n   * If the additional `repoWrite` permission is requested, these scopes are added:\n   *\n   * `pullrequest:write snippet:write issue:write`\n   */\n  static forBitbucket(\n    bitbucketAuthApi: OAuthApi,\n    options?: {\n      host?: string;\n    },\n  ): ScmAuth {\n    const host = options?.host ?? 'bitbucket.org';\n    return new ScmAuth('bitbucket', bitbucketAuthApi, host, {\n      default: ['account', 'team', 'pullrequest', 'snippet', 'issue'],\n      repoWrite: ['pullrequest:write', 'snippet:write', 'issue:write'],\n    });\n  }\n\n  /**\n   * Merges together multiple ScmAuth instances into one that\n   * routes requests to the correct instance based on the URL.\n   */\n  static merge(...providers: ScmAuth[]): ScmAuthApi {\n    return new ScmAuthMux(providers);\n  }\n\n  #api: OAuthApi;\n  #host: string;\n  #scopeMapping: ScopeMapping;\n  #providerName: ProviderName;\n\n  private constructor(\n    providerName: ProviderName,\n    api: OAuthApi,\n    host: string,\n    scopeMapping: ScopeMapping,\n  ) {\n    this.#api = api;\n    this.#host = host;\n    this.#scopeMapping = scopeMapping;\n    this.#providerName = providerName;\n  }\n\n  /**\n   * Checks whether the implementation is able to provide authentication for the given URL.\n   */\n  isUrlSupported(url: URL): boolean {\n    return url.host === this.#host;\n  }\n\n  private getAdditionalScopesForProvider(\n    additionalScopes: ScmAuthTokenOptions['additionalScope'],\n  ): string[] {\n    if (!additionalScopes?.customScopes || this.#providerName === 'generic') {\n      return [];\n    }\n\n    return additionalScopes.customScopes?.[this.#providerName] ?? [];\n  }\n\n  /**\n   * Fetches credentials for the given resource.\n   */\n  async getCredentials(\n    options: ScmAuthTokenOptions,\n  ): Promise<ScmAuthTokenResponse> {\n    const { url, additionalScope, ...restOptions } = options;\n\n    const scopes = this.#scopeMapping.default.slice();\n    if (additionalScope?.repoWrite) {\n      scopes.push(...this.#scopeMapping.repoWrite);\n    }\n\n    const additionalScopes =\n      this.getAdditionalScopesForProvider(additionalScope);\n\n    if (additionalScopes.length) {\n      scopes.push(...additionalScopes);\n    }\n\n    const uniqueScopes = [...new Set(scopes)];\n\n    const token = await this.#api.getAccessToken(uniqueScopes, restOptions);\n\n    return {\n      token,\n      headers: {\n        Authorization: `Bearer ${token}`,\n      },\n    };\n  }\n}\n","/*\n * Copyright 2021 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Config } from '@backstage/config';\nimport {\n  ScmIntegrationRegistry,\n  ScmIntegrations,\n} from '@backstage/integration';\nimport { ApiRef, createApiRef } from '@backstage/core-plugin-api';\n\n/**\n * Factory class for creating {@link @backstage/integration#ScmIntegrationRegistry} instances.\n *\n * @public\n */\nexport class ScmIntegrationsApi {\n  /**\n   * Instantiates an {@link @backstage/integration#ScmIntegrationRegistry}.\n   *\n   * @param config - The root of the config hierarchy.\n   */\n  static fromConfig(config: Config): ScmIntegrationRegistry {\n    return ScmIntegrations.fromConfig(config);\n  }\n}\n\n/**\n * The API that holds all configured SCM integrations.\n *\n * @public\n */\nexport const scmIntegrationsApiRef: ApiRef<ScmIntegrationRegistry> =\n  createApiRef({\n    id: 'integration.scmintegrations',\n  });\n","/*\n * Copyright 2020 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport CodeIcon from '@material-ui/icons/Code';\nimport React from 'react';\nimport { useApp } from '@backstage/core-plugin-api';\n\n/**\n * Props for {@link ScmIntegrationIcon}.\n *\n * @public\n */\nexport type ScmIntegrationIconProps = {\n  /**\n   * The integration type, e.g. \"github\".\n   */\n  type?: string;\n};\n\n/**\n * An icon that represents a certain SCM integration.\n *\n * @public\n */\nexport const ScmIntegrationIcon = (props: ScmIntegrationIconProps) => {\n  const { type } = props;\n  const app = useApp();\n  const DefaultIcon = CodeIcon;\n  const Icon = type ? app.getSystemIcon(type) ?? DefaultIcon : DefaultIcon;\n  return <Icon />;\n};\n"],"names":[],"mappings":"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"}