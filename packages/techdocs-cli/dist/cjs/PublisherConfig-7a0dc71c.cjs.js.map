{"version":3,"file":"PublisherConfig-7a0dc71c.cjs.js","sources":["../../src/lib/PublisherConfig.ts"],"sourcesContent":["/*\n * Copyright 2021 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { ConfigReader } from '@backstage/config';\nimport { OptionValues } from 'commander';\n\ntype Publisher = keyof typeof PublisherConfig['configFactories'];\ntype PublisherConfiguration = {\n  [p in Publisher]?: any;\n} & {\n  type: Publisher;\n};\n\n/**\n * Helper when working with publisher-related configurations.\n */\nexport class PublisherConfig {\n  /**\n   * Maps publisher-specific config keys to config getters.\n   */\n  private static configFactories = {\n    awsS3: PublisherConfig.getValidAwsS3Config,\n    azureBlobStorage: PublisherConfig.getValidAzureConfig,\n    googleGcs: PublisherConfig.getValidGoogleGcsConfig,\n    openStackSwift: PublisherConfig.getValidOpenStackSwiftConfig,\n  };\n\n  /**\n   * Returns Backstage config suitable for use when instantiating a Publisher. If\n   * there are any missing or invalid options provided, an error is thrown.\n   *\n   * Note: This assumes that proper credentials are set in Environment\n   * variables for the respective GCS/AWS clients to work.\n   */\n  static getValidConfig(opts: OptionValues): ConfigReader {\n    const publisherType = opts.publisherType;\n\n    if (!PublisherConfig.isKnownPublisher(publisherType)) {\n      throw new Error(`Unknown publisher type ${opts.publisherType}`);\n    }\n\n    return new ConfigReader({\n      // This backend config is not used at all. Just something needed a create a mock discovery instance.\n      backend: {\n        baseUrl: 'http://localhost:7007',\n        listen: {\n          port: 7007,\n        },\n      },\n      techdocs: {\n        publisher: PublisherConfig.configFactories[publisherType](opts),\n        legacyUseCaseSensitiveTripletPaths:\n          opts.legacyUseCaseSensitiveTripletPaths,\n      },\n    });\n  }\n\n  /**\n   * Typeguard to ensure the publisher has a known config getter.\n   */\n  private static isKnownPublisher(\n    type: string,\n  ): type is keyof typeof PublisherConfig['configFactories'] {\n    return PublisherConfig.configFactories.hasOwnProperty(type);\n  }\n\n  /**\n   * Retrieve valid AWS S3 configuration based on the command.\n   */\n  private static getValidAwsS3Config(\n    opts: OptionValues,\n  ): PublisherConfiguration {\n    return {\n      type: 'awsS3',\n      awsS3: {\n        bucketName: opts.storageName,\n        ...(opts.awsBucketRootPath && {\n          bucketRootPath: opts.awsBucketRootPath,\n        }),\n        ...(opts.awsRoleArn && { credentials: { roleArn: opts.awsRoleArn } }),\n        ...(opts.awsEndpoint && { endpoint: opts.awsEndpoint }),\n        ...(opts.awsS3ForcePathStyle && { s3ForcePathStyle: true }),\n        ...(opts.awsS3sse && { sse: opts.awsS3sse }),\n      },\n    };\n  }\n\n  /**\n   * Retrieve valid Azure Blob Storage configuration based on the command.\n   */\n  private static getValidAzureConfig(\n    opts: OptionValues,\n  ): PublisherConfiguration {\n    if (!opts.azureAccountName) {\n      throw new Error(\n        `azureBlobStorage requires --azureAccountName to be specified`,\n      );\n    }\n\n    return {\n      type: 'azureBlobStorage',\n      azureBlobStorage: {\n        containerName: opts.storageName,\n        credentials: {\n          accountName: opts.azureAccountName,\n          accountKey: opts.azureAccountKey,\n        },\n      },\n    };\n  }\n\n  /**\n   * Retrieve valid GCS configuration based on the command.\n   */\n  private static getValidGoogleGcsConfig(\n    opts: OptionValues,\n  ): PublisherConfiguration {\n    return {\n      type: 'googleGcs',\n      googleGcs: {\n        bucketName: opts.storageName,\n        ...(opts.gcsBucketRootPath && {\n          bucketRootPath: opts.gcsBucketRootPath,\n        }),\n      },\n    };\n  }\n\n  /**\n   * Retrieves valid OpenStack Swift configuration based on the command.\n   */\n  private static getValidOpenStackSwiftConfig(\n    opts: OptionValues,\n  ): PublisherConfiguration {\n    const missingParams = [\n      'osCredentialId',\n      'osSecret',\n      'osAuthUrl',\n      'osSwiftUrl',\n    ].filter((param: string) => !opts[param]);\n\n    if (missingParams.length) {\n      throw new Error(\n        `openStackSwift requires the following params to be specified: ${missingParams.join(\n          ', ',\n        )}`,\n      );\n    }\n\n    return {\n      type: 'openStackSwift',\n      openStackSwift: {\n        containerName: opts.storageName,\n        credentials: {\n          id: opts.osCredentialId,\n          secret: opts.osSecret,\n        },\n        authUrl: opts.osAuthUrl,\n        swiftUrl: opts.osSwiftUrl,\n      },\n    };\n  }\n}\n"],"names":["ConfigReader"],"mappings":"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"}