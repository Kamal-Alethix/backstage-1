{"version":3,"file":"migrate-122ec4bf.cjs.js","sources":["../../src/commands/migrate/migrate.ts"],"sourcesContent":["/*\n * Copyright 2021 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { SingleHostDiscovery } from '@backstage/backend-common';\nimport { Publisher } from '@backstage/plugin-techdocs-node';\nimport { OptionValues } from 'commander';\nimport { createLogger } from '../../lib/utility';\nimport { PublisherConfig } from '../../lib/PublisherConfig';\n\nexport default async function migrate(opts: OptionValues) {\n  const logger = createLogger({ verbose: opts.verbose });\n\n  const config = PublisherConfig.getValidConfig(opts);\n  const discovery = SingleHostDiscovery.fromConfig(config);\n  const publisher = await Publisher.fromConfig(config, { logger, discovery });\n\n  if (!publisher.migrateDocsCase) {\n    throw new Error(`Migration not implemented for ${opts.publisherType}`);\n  }\n\n  // Check that the publisher's underlying storage is ready and available.\n  const { isAvailable } = await publisher.getReadiness();\n  if (!isAvailable) {\n    // Error messages printed in getReadiness() call. This ensures exit code 1.\n    throw new Error('');\n  }\n\n  // Validate and parse migration arguments.\n  const removeOriginal = opts.removeOriginal;\n  const numericConcurrency = parseInt(opts.concurrency, 10);\n\n  if (!Number.isInteger(numericConcurrency) || numericConcurrency <= 0) {\n    throw new Error(\n      `Concurrency must be a number greater than 1. ${opts.concurrency} provided.`,\n    );\n  }\n\n  await publisher.migrateDocsCase({\n    concurrency: numericConcurrency,\n    removeOriginal,\n  });\n}\n"],"names":["createLogger","PublisherConfig","SingleHostDiscovery","Publisher"],"mappings":";;;;;;;;;AAIe,eAAe,OAAO,CAAC,IAAI,EAAE;AAC5C,EAAE,MAAM,MAAM,GAAGA,oBAAY,CAAC,EAAE,OAAO,EAAE,IAAI,CAAC,OAAO,EAAE,CAAC,CAAC;AACzD,EAAE,MAAM,MAAM,GAAGC,+BAAe,CAAC,cAAc,CAAC,IAAI,CAAC,CAAC;AACtD,EAAE,MAAM,SAAS,GAAGC,iCAAmB,CAAC,UAAU,CAAC,MAAM,CAAC,CAAC;AAC3D,EAAE,MAAM,SAAS,GAAG,MAAMC,4BAAS,CAAC,UAAU,CAAC,MAAM,EAAE,EAAE,MAAM,EAAE,SAAS,EAAE,CAAC,CAAC;AAC9E,EAAE,IAAI,CAAC,SAAS,CAAC,eAAe,EAAE;AAClC,IAAI,MAAM,IAAI,KAAK,CAAC,CAAC,8BAA8B,EAAE,IAAI,CAAC,aAAa,CAAC,CAAC,CAAC,CAAC;AAC3E,GAAG;AACH,EAAE,MAAM,EAAE,WAAW,EAAE,GAAG,MAAM,SAAS,CAAC,YAAY,EAAE,CAAC;AACzD,EAAE,IAAI,CAAC,WAAW,EAAE;AACpB,IAAI,MAAM,IAAI,KAAK,CAAC,EAAE,CAAC,CAAC;AACxB,GAAG;AACH,EAAE,MAAM,cAAc,GAAG,IAAI,CAAC,cAAc,CAAC;AAC7C,EAAE,MAAM,kBAAkB,GAAG,QAAQ,CAAC,IAAI,CAAC,WAAW,EAAE,EAAE,CAAC,CAAC;AAC5D,EAAE,IAAI,CAAC,MAAM,CAAC,SAAS,CAAC,kBAAkB,CAAC,IAAI,kBAAkB,IAAI,CAAC,EAAE;AACxE,IAAI,MAAM,IAAI,KAAK,CAAC,CAAC,6CAA6C,EAAE,IAAI,CAAC,WAAW,CAAC,UAAU,CAAC,CAAC,CAAC;AAClG,GAAG;AACH,EAAE,MAAM,SAAS,CAAC,eAAe,CAAC;AAClC,IAAI,WAAW,EAAE,kBAAkB;AACnC,IAAI,cAAc;AAClB,GAAG,CAAC,CAAC;AACL;;;;"}