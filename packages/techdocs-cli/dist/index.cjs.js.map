{"version":3,"file":"index.cjs.js","sources":["../src/commands/index.ts","../src/index.ts"],"sourcesContent":["/*\n * Copyright 2020 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Command } from 'commander';\nimport { TechdocsGenerator } from '@backstage/plugin-techdocs-node';\n\nconst defaultDockerImage = TechdocsGenerator.defaultDockerImage;\n\nexport function registerCommands(program: Command) {\n  program\n    .command('generate')\n    .description('Generate TechDocs documentation site using MkDocs.')\n    .option(\n      '--source-dir <PATH>',\n      'Source directory containing mkdocs.yml and docs/ directory.',\n      '.',\n    )\n    .option(\n      '--output-dir <PATH>',\n      'Output directory containing generated TechDocs site.',\n      './site/',\n    )\n    .option(\n      '--docker-image <DOCKER_IMAGE>',\n      'The mkdocs docker container to use',\n      defaultDockerImage,\n    )\n    .option('--no-pull', 'Do not pull the latest docker image', false)\n    .option(\n      '--no-docker',\n      'Do not use Docker, use MkDocs executable and plugins in current user environment.',\n    )\n    .option(\n      '--techdocs-ref <HOST_TYPE:URL>',\n      'The repository hosting documentation source files e.g. url:https://ghe.mycompany.net.com/org/repo.' +\n        '\\nThis value is same as the backstage.io/techdocs-ref annotation of the corresponding Backstage entity.' +\n        '\\nIt is completely fine to skip this as it is only being used to set repo_url in mkdocs.yml if not found.\\n',\n    )\n    .option(\n      '--etag <ETAG>',\n      'A unique identifier for the prepared tree e.g. commit SHA. If provided it will be stored in techdocs_metadata.json.',\n    )\n    .option('-v --verbose', 'Enable verbose output.', false)\n    .option(\n      '--omitTechdocsCoreMkdocsPlugin',\n      \"Don't patch MkDocs file automatically with techdocs-core plugin.\",\n      false,\n    )\n    .option(\n      '--legacyCopyReadmeMdToIndexMd',\n      'Attempt to ensure an index.md exists falling back to using <docs-dir>/README.md or README.md in case a default <docs-dir>/index.md is not provided.',\n      false,\n    )\n    .alias('build')\n    .action(lazy(() => import('./generate/generate').then(m => m.default)));\n\n  program\n    .command('migrate')\n    .description(\n      'Migrate objects with case-sensitive entity triplets to lower-case versions.',\n    )\n    .requiredOption(\n      '--publisher-type <TYPE>',\n      '(Required always) awsS3 | googleGcs | azureBlobStorage | openStackSwift - same as techdocs.publisher.type in Backstage app-config.yaml',\n    )\n    .requiredOption(\n      '--storage-name <BUCKET/CONTAINER NAME>',\n      '(Required always) In case of AWS/GCS, use the bucket name. In case of Azure, use container name. Same as techdocs.publisher.[TYPE].bucketName',\n    )\n    .option(\n      '--azureAccountName <AZURE ACCOUNT NAME>',\n      '(Required for Azure) specify when --publisher-type azureBlobStorage',\n    )\n    .option(\n      '--azureAccountKey <AZURE ACCOUNT KEY>',\n      'Azure Storage Account key to use for authentication. If not specified, you must set AZURE_TENANT_ID, AZURE_CLIENT_ID & AZURE_CLIENT_SECRET as environment variables.',\n    )\n    .option(\n      '--awsRoleArn <AWS ROLE ARN>',\n      'Optional AWS ARN of role to be assumed.',\n    )\n    .option(\n      '--awsEndpoint <AWS ENDPOINT>',\n      'Optional AWS endpoint to send requests to.',\n    )\n    .option(\n      '--awsS3ForcePathStyle',\n      'Optional AWS S3 option to force path style.',\n    )\n    .option(\n      '--awsBucketRootPath',\n      'Optional sub-directory to store files in Amazon S3',\n    )\n    .option(\n      '--osCredentialId <OPENSTACK SWIFT APPLICATION CREDENTIAL ID>',\n      '(Required for OpenStack) specify when --publisher-type openStackSwift',\n    )\n    .option(\n      '--osSecret <OPENSTACK SWIFT APPLICATION CREDENTIAL SECRET>',\n      '(Required for OpenStack) specify when --publisher-type openStackSwift',\n    )\n    .option(\n      '--osAuthUrl <OPENSTACK SWIFT AUTHURL>',\n      '(Required for OpenStack) specify when --publisher-type openStackSwift',\n    )\n    .option(\n      '--osSwiftUrl <OPENSTACK SWIFT SWIFTURL>',\n      '(Required for OpenStack) specify when --publisher-type openStackSwift',\n    )\n    .option(\n      '--removeOriginal',\n      'Optional Files are copied by default. If flag is set, files are renamed/moved instead.',\n      false,\n    )\n    .option(\n      '--concurrency <MAX CONCURRENT REQS>',\n      'Optional Controls the number of API requests allowed to be performed simultaneously.',\n      '25',\n    )\n    .option('-v --verbose', 'Enable verbose output.', false)\n    .action(lazy(() => import('./migrate/migrate').then(m => m.default)));\n\n  program\n    .command('publish')\n    .description(\n      'Publish generated TechDocs site to an external storage AWS S3, Google GCS, etc.',\n    )\n    .requiredOption(\n      '--publisher-type <TYPE>',\n      '(Required always) awsS3 | googleGcs | azureBlobStorage | openStackSwift - same as techdocs.publisher.type in Backstage app-config.yaml',\n    )\n    .requiredOption(\n      '--storage-name <BUCKET/CONTAINER NAME>',\n      '(Required always) In case of AWS/GCS, use the bucket name. In case of Azure, use container name. Same as techdocs.publisher.[TYPE].bucketName',\n    )\n    .requiredOption(\n      '--entity <NAMESPACE/KIND/NAME>',\n      '(Required always) Entity uid separated by / in namespace/kind/name order (case-sensitive). Example: default/Component/myEntity ',\n    )\n    .option(\n      '--legacyUseCaseSensitiveTripletPaths',\n      'Publishes objects with cased entity triplet prefix when set (e.g. namespace/Kind/name). Only use if your TechDocs backend is configured the same way.',\n      false,\n    )\n    .option(\n      '--azureAccountName <AZURE ACCOUNT NAME>',\n      '(Required for Azure) specify when --publisher-type azureBlobStorage',\n    )\n    .option(\n      '--azureAccountKey <AZURE ACCOUNT KEY>',\n      'Azure Storage Account key to use for authentication. If not specified, you must set AZURE_TENANT_ID, AZURE_CLIENT_ID & AZURE_CLIENT_SECRET as environment variables.',\n    )\n    .option(\n      '--awsRoleArn <AWS ROLE ARN>',\n      'Optional AWS ARN of role to be assumed.',\n    )\n    .option(\n      '--awsEndpoint <AWS ENDPOINT>',\n      'Optional AWS endpoint to send requests to.',\n    )\n    .option('--awsS3sse <AWS SSE>', 'Optional AWS S3 Server Side Encryption.')\n    .option(\n      '--awsS3ForcePathStyle',\n      'Optional AWS S3 option to force path style.',\n    )\n    .option(\n      '--osCredentialId <OPENSTACK SWIFT APPLICATION CREDENTIAL ID>',\n      '(Required for OpenStack) specify when --publisher-type openStackSwift',\n    )\n    .option(\n      '--osSecret <OPENSTACK SWIFT APPLICATION CREDENTIAL SECRET>',\n      '(Required for OpenStack) specify when --publisher-type openStackSwift',\n    )\n    .option(\n      '--osAuthUrl <OPENSTACK SWIFT AUTHURL>',\n      '(Required for OpenStack) specify when --publisher-type openStackSwift',\n    )\n    .option(\n      '--osSwiftUrl <OPENSTACK SWIFT SWIFTURL>',\n      '(Required for OpenStack) specify when --publisher-type openStackSwift',\n    )\n    .option(\n      '--gcsBucketRootPath',\n      'Optional sub-directory to store files in Google cloud storage',\n    )\n    .option(\n      '--directory <PATH>',\n      'Path of the directory containing generated files to publish',\n      './site/',\n    )\n    .action(lazy(() => import('./publish/publish').then(m => m.default)));\n\n  program\n    .command('serve:mkdocs')\n    .description('Serve a documentation project locally using MkDocs serve.')\n    .option(\n      '-i, --docker-image <DOCKER_IMAGE>',\n      'The mkdocs docker container to use',\n      defaultDockerImage,\n    )\n    .option(\n      '--docker-entrypoint <DOCKER_ENTRYPOINT>',\n      'Override the image entrypoint',\n    )\n    .option(\n      '--no-docker',\n      'Do not use Docker, run `mkdocs serve` in current user environment.',\n    )\n    .option('-p, --port <PORT>', 'Port to serve documentation locally', '8000')\n    .option('-v --verbose', 'Enable verbose output.', false)\n    .action(lazy(() => import('./serve/mkdocs').then(m => m.default)));\n\n  program\n    .command('serve')\n    .description(\n      'Serve a documentation project locally in a Backstage app-like environment',\n    )\n    .option(\n      '-i, --docker-image <DOCKER_IMAGE>',\n      'The mkdocs docker container to use',\n      defaultDockerImage,\n    )\n    .option(\n      '--docker-entrypoint <DOCKER_ENTRYPOINT>',\n      'Override the image entrypoint',\n    )\n    .option(\n      '--no-docker',\n      'Do not use Docker, use MkDocs executable in current user environment.',\n    )\n    .option('--mkdocs-port <PORT>', 'Port for MkDocs server to use', '8000')\n    .option('-v --verbose', 'Enable verbose output.', false)\n    .action(lazy(() => import('./serve/serve').then(m => m.default)));\n}\n\n// Wraps an action function so that it always exits and handles errors\n// Humbly taken from backstage-cli's registerCommands\nfunction lazy(\n  getActionFunc: () => Promise<(...args: any[]) => Promise<void>>,\n): (...args: any[]) => Promise<never> {\n  return async (...args: any[]) => {\n    try {\n      const actionFunc = await getActionFunc();\n      await actionFunc(...args);\n      process.exit(0);\n    } catch (error) {\n      // eslint-disable-next-line no-console\n      console.error(error.message);\n      process.exit(1);\n    }\n  };\n}\n","/*\n * Copyright 2020 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { program } from 'commander';\nimport { registerCommands } from './commands';\nimport { version } from '../package.json';\n\nconst main = (argv: string[]) => {\n  program.name('techdocs-cli').version(version);\n\n  registerCommands(program);\n\n  program.parse(argv);\n};\n\nmain(process.argv);\n"],"names":["TechdocsGenerator","program"],"mappings":"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"}