{"version":3,"sources":["webpack://example-app/../node_modules/@graphiql/react/dist/brace-fold.es.js"],"names":[],"mappings":"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","file":"static/1638.0fa7c451.chunk.js","sourcesContent":["var __defProp = Object.defineProperty;\nvar __name = (target, value) => __defProp(target, \"name\", { value, configurable: true });\nimport { a as codemirror } from \"./codemirror.es.js\";\nfunction _mergeNamespaces(n, m) {\n  m.forEach(function(e) {\n    e && typeof e !== \"string\" && !Array.isArray(e) && Object.keys(e).forEach(function(k) {\n      if (k !== \"default\" && !(k in n)) {\n        var d = Object.getOwnPropertyDescriptor(e, k);\n        Object.defineProperty(n, k, d.get ? d : {\n          enumerable: true,\n          get: function() {\n            return e[k];\n          }\n        });\n      }\n    });\n  });\n  return Object.freeze(n);\n}\n__name(_mergeNamespaces, \"_mergeNamespaces\");\nvar braceFold$2 = { exports: {} };\n(function(module, exports) {\n  (function(mod) {\n    mod(codemirror.exports);\n  })(function(CodeMirror) {\n    function bracketFolding(pairs) {\n      return function(cm, start) {\n        var line = start.line, lineText = cm.getLine(line);\n        function findOpening(pair) {\n          var tokenType;\n          for (var at = start.ch, pass = 0; ; ) {\n            var found2 = at <= 0 ? -1 : lineText.lastIndexOf(pair[0], at - 1);\n            if (found2 == -1) {\n              if (pass == 1)\n                break;\n              pass = 1;\n              at = lineText.length;\n              continue;\n            }\n            if (pass == 1 && found2 < start.ch)\n              break;\n            tokenType = cm.getTokenTypeAt(CodeMirror.Pos(line, found2 + 1));\n            if (!/^(comment|string)/.test(tokenType))\n              return { ch: found2 + 1, tokenType, pair };\n            at = found2 - 1;\n          }\n        }\n        __name(findOpening, \"findOpening\");\n        function findRange(found2) {\n          var count = 1, lastLine = cm.lastLine(), end, startCh = found2.ch, endCh;\n          outer:\n            for (var i2 = line; i2 <= lastLine; ++i2) {\n              var text = cm.getLine(i2), pos = i2 == line ? startCh : 0;\n              for (; ; ) {\n                var nextOpen = text.indexOf(found2.pair[0], pos), nextClose = text.indexOf(found2.pair[1], pos);\n                if (nextOpen < 0)\n                  nextOpen = text.length;\n                if (nextClose < 0)\n                  nextClose = text.length;\n                pos = Math.min(nextOpen, nextClose);\n                if (pos == text.length)\n                  break;\n                if (cm.getTokenTypeAt(CodeMirror.Pos(i2, pos + 1)) == found2.tokenType) {\n                  if (pos == nextOpen)\n                    ++count;\n                  else if (!--count) {\n                    end = i2;\n                    endCh = pos;\n                    break outer;\n                  }\n                }\n                ++pos;\n              }\n            }\n          if (end == null || line == end)\n            return null;\n          return {\n            from: CodeMirror.Pos(line, startCh),\n            to: CodeMirror.Pos(end, endCh)\n          };\n        }\n        __name(findRange, \"findRange\");\n        var found = [];\n        for (var i = 0; i < pairs.length; i++) {\n          var open = findOpening(pairs[i]);\n          if (open)\n            found.push(open);\n        }\n        found.sort(function(a, b) {\n          return a.ch - b.ch;\n        });\n        for (var i = 0; i < found.length; i++) {\n          var range = findRange(found[i]);\n          if (range)\n            return range;\n        }\n        return null;\n      };\n    }\n    __name(bracketFolding, \"bracketFolding\");\n    CodeMirror.registerHelper(\"fold\", \"brace\", bracketFolding([[\"{\", \"}\"], [\"[\", \"]\"]]));\n    CodeMirror.registerHelper(\"fold\", \"brace-paren\", bracketFolding([[\"{\", \"}\"], [\"[\", \"]\"], [\"(\", \")\"]]));\n    CodeMirror.registerHelper(\"fold\", \"import\", function(cm, start) {\n      function hasImport(line) {\n        if (line < cm.firstLine() || line > cm.lastLine())\n          return null;\n        var start2 = cm.getTokenAt(CodeMirror.Pos(line, 1));\n        if (!/\\S/.test(start2.string))\n          start2 = cm.getTokenAt(CodeMirror.Pos(line, start2.end + 1));\n        if (start2.type != \"keyword\" || start2.string != \"import\")\n          return null;\n        for (var i = line, e = Math.min(cm.lastLine(), line + 10); i <= e; ++i) {\n          var text = cm.getLine(i), semi = text.indexOf(\";\");\n          if (semi != -1)\n            return { startCh: start2.end, end: CodeMirror.Pos(i, semi) };\n        }\n      }\n      __name(hasImport, \"hasImport\");\n      var startLine = start.line, has = hasImport(startLine), prev;\n      if (!has || hasImport(startLine - 1) || (prev = hasImport(startLine - 2)) && prev.end.line == startLine - 1)\n        return null;\n      for (var end = has.end; ; ) {\n        var next = hasImport(end.line + 1);\n        if (next == null)\n          break;\n        end = next.end;\n      }\n      return { from: cm.clipPos(CodeMirror.Pos(startLine, has.startCh + 1)), to: end };\n    });\n    CodeMirror.registerHelper(\"fold\", \"include\", function(cm, start) {\n      function hasInclude(line) {\n        if (line < cm.firstLine() || line > cm.lastLine())\n          return null;\n        var start2 = cm.getTokenAt(CodeMirror.Pos(line, 1));\n        if (!/\\S/.test(start2.string))\n          start2 = cm.getTokenAt(CodeMirror.Pos(line, start2.end + 1));\n        if (start2.type == \"meta\" && start2.string.slice(0, 8) == \"#include\")\n          return start2.start + 8;\n      }\n      __name(hasInclude, \"hasInclude\");\n      var startLine = start.line, has = hasInclude(startLine);\n      if (has == null || hasInclude(startLine - 1) != null)\n        return null;\n      for (var end = startLine; ; ) {\n        var next = hasInclude(end + 1);\n        if (next == null)\n          break;\n        ++end;\n      }\n      return {\n        from: CodeMirror.Pos(startLine, has + 1),\n        to: cm.clipPos(CodeMirror.Pos(end))\n      };\n    });\n  });\n})();\nvar braceFold = braceFold$2.exports;\nvar braceFold$1 = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ _mergeNamespaces({\n  __proto__: null,\n  [Symbol.toStringTag]: \"Module\",\n  \"default\": braceFold\n}, [braceFold$2.exports]));\nexport { braceFold$1 as b };\n"],"sourceRoot":""}