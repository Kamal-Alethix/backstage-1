{"version":3,"sources":["webpack://example-app/../node_modules/@graphiql/react/dist/comment.es.js"],"names":[],"mappings":"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","file":"static/8518.7e15b937.chunk.js","sourcesContent":["var __defProp = Object.defineProperty;\nvar __name = (target, value) => __defProp(target, \"name\", { value, configurable: true });\nimport { a as codemirror } from \"./codemirror.es.js\";\nfunction _mergeNamespaces(n, m) {\n  m.forEach(function(e) {\n    e && typeof e !== \"string\" && !Array.isArray(e) && Object.keys(e).forEach(function(k) {\n      if (k !== \"default\" && !(k in n)) {\n        var d = Object.getOwnPropertyDescriptor(e, k);\n        Object.defineProperty(n, k, d.get ? d : {\n          enumerable: true,\n          get: function() {\n            return e[k];\n          }\n        });\n      }\n    });\n  });\n  return Object.freeze(n);\n}\n__name(_mergeNamespaces, \"_mergeNamespaces\");\nvar comment$2 = { exports: {} };\n(function(module, exports) {\n  (function(mod) {\n    mod(codemirror.exports);\n  })(function(CodeMirror) {\n    var noOptions = {};\n    var nonWS = /[^\\s\\u00a0]/;\n    var Pos = CodeMirror.Pos, cmp = CodeMirror.cmpPos;\n    function firstNonWS(str) {\n      var found = str.search(nonWS);\n      return found == -1 ? 0 : found;\n    }\n    __name(firstNonWS, \"firstNonWS\");\n    CodeMirror.commands.toggleComment = function(cm) {\n      cm.toggleComment();\n    };\n    CodeMirror.defineExtension(\"toggleComment\", function(options) {\n      if (!options)\n        options = noOptions;\n      var cm = this;\n      var minLine = Infinity, ranges = this.listSelections(), mode = null;\n      for (var i = ranges.length - 1; i >= 0; i--) {\n        var from = ranges[i].from(), to = ranges[i].to();\n        if (from.line >= minLine)\n          continue;\n        if (to.line >= minLine)\n          to = Pos(minLine, 0);\n        minLine = from.line;\n        if (mode == null) {\n          if (cm.uncomment(from, to, options))\n            mode = \"un\";\n          else {\n            cm.lineComment(from, to, options);\n            mode = \"line\";\n          }\n        } else if (mode == \"un\") {\n          cm.uncomment(from, to, options);\n        } else {\n          cm.lineComment(from, to, options);\n        }\n      }\n    });\n    function probablyInsideString(cm, pos, line) {\n      return /\\bstring\\b/.test(cm.getTokenTypeAt(Pos(pos.line, 0))) && !/^[\\'\\\"\\`]/.test(line);\n    }\n    __name(probablyInsideString, \"probablyInsideString\");\n    function getMode(cm, pos) {\n      var mode = cm.getMode();\n      return mode.useInnerComments === false || !mode.innerMode ? mode : cm.getModeAt(pos);\n    }\n    __name(getMode, \"getMode\");\n    CodeMirror.defineExtension(\"lineComment\", function(from, to, options) {\n      if (!options)\n        options = noOptions;\n      var self = this, mode = getMode(self, from);\n      var firstLine = self.getLine(from.line);\n      if (firstLine == null || probablyInsideString(self, from, firstLine))\n        return;\n      var commentString = options.lineComment || mode.lineComment;\n      if (!commentString) {\n        if (options.blockCommentStart || mode.blockCommentStart) {\n          options.fullLines = true;\n          self.blockComment(from, to, options);\n        }\n        return;\n      }\n      var end = Math.min(to.ch != 0 || to.line == from.line ? to.line + 1 : to.line, self.lastLine() + 1);\n      var pad = options.padding == null ? \" \" : options.padding;\n      var blankLines = options.commentBlankLines || from.line == to.line;\n      self.operation(function() {\n        if (options.indent) {\n          var baseString = null;\n          for (var i = from.line; i < end; ++i) {\n            var line = self.getLine(i);\n            var whitespace = line.slice(0, firstNonWS(line));\n            if (baseString == null || baseString.length > whitespace.length) {\n              baseString = whitespace;\n            }\n          }\n          for (var i = from.line; i < end; ++i) {\n            var line = self.getLine(i), cut = baseString.length;\n            if (!blankLines && !nonWS.test(line))\n              continue;\n            if (line.slice(0, cut) != baseString)\n              cut = firstNonWS(line);\n            self.replaceRange(baseString + commentString + pad, Pos(i, 0), Pos(i, cut));\n          }\n        } else {\n          for (var i = from.line; i < end; ++i) {\n            if (blankLines || nonWS.test(self.getLine(i)))\n              self.replaceRange(commentString + pad, Pos(i, 0));\n          }\n        }\n      });\n    });\n    CodeMirror.defineExtension(\"blockComment\", function(from, to, options) {\n      if (!options)\n        options = noOptions;\n      var self = this, mode = getMode(self, from);\n      var startString = options.blockCommentStart || mode.blockCommentStart;\n      var endString = options.blockCommentEnd || mode.blockCommentEnd;\n      if (!startString || !endString) {\n        if ((options.lineComment || mode.lineComment) && options.fullLines != false)\n          self.lineComment(from, to, options);\n        return;\n      }\n      if (/\\bcomment\\b/.test(self.getTokenTypeAt(Pos(from.line, 0))))\n        return;\n      var end = Math.min(to.line, self.lastLine());\n      if (end != from.line && to.ch == 0 && nonWS.test(self.getLine(end)))\n        --end;\n      var pad = options.padding == null ? \" \" : options.padding;\n      if (from.line > end)\n        return;\n      self.operation(function() {\n        if (options.fullLines != false) {\n          var lastLineHasText = nonWS.test(self.getLine(end));\n          self.replaceRange(pad + endString, Pos(end));\n          self.replaceRange(startString + pad, Pos(from.line, 0));\n          var lead = options.blockCommentLead || mode.blockCommentLead;\n          if (lead != null) {\n            for (var i = from.line + 1; i <= end; ++i)\n              if (i != end || lastLineHasText)\n                self.replaceRange(lead + pad, Pos(i, 0));\n          }\n        } else {\n          var atCursor = cmp(self.getCursor(\"to\"), to) == 0, empty = !self.somethingSelected();\n          self.replaceRange(endString, to);\n          if (atCursor)\n            self.setSelection(empty ? to : self.getCursor(\"from\"), to);\n          self.replaceRange(startString, from);\n        }\n      });\n    });\n    CodeMirror.defineExtension(\"uncomment\", function(from, to, options) {\n      if (!options)\n        options = noOptions;\n      var self = this, mode = getMode(self, from);\n      var end = Math.min(to.ch != 0 || to.line == from.line ? to.line : to.line - 1, self.lastLine()), start = Math.min(from.line, end);\n      var lineString = options.lineComment || mode.lineComment, lines = [];\n      var pad = options.padding == null ? \" \" : options.padding, didSomething;\n      lineComment: {\n        if (!lineString)\n          break lineComment;\n        for (var i = start; i <= end; ++i) {\n          var line = self.getLine(i);\n          var found = line.indexOf(lineString);\n          if (found > -1 && !/comment/.test(self.getTokenTypeAt(Pos(i, found + 1))))\n            found = -1;\n          if (found == -1 && nonWS.test(line))\n            break lineComment;\n          if (found > -1 && nonWS.test(line.slice(0, found)))\n            break lineComment;\n          lines.push(line);\n        }\n        self.operation(function() {\n          for (var i2 = start; i2 <= end; ++i2) {\n            var line2 = lines[i2 - start];\n            var pos = line2.indexOf(lineString), endPos = pos + lineString.length;\n            if (pos < 0)\n              continue;\n            if (line2.slice(endPos, endPos + pad.length) == pad)\n              endPos += pad.length;\n            didSomething = true;\n            self.replaceRange(\"\", Pos(i2, pos), Pos(i2, endPos));\n          }\n        });\n        if (didSomething)\n          return true;\n      }\n      var startString = options.blockCommentStart || mode.blockCommentStart;\n      var endString = options.blockCommentEnd || mode.blockCommentEnd;\n      if (!startString || !endString)\n        return false;\n      var lead = options.blockCommentLead || mode.blockCommentLead;\n      var startLine = self.getLine(start), open = startLine.indexOf(startString);\n      if (open == -1)\n        return false;\n      var endLine = end == start ? startLine : self.getLine(end);\n      var close = endLine.indexOf(endString, end == start ? open + startString.length : 0);\n      var insideStart = Pos(start, open + 1), insideEnd = Pos(end, close + 1);\n      if (close == -1 || !/comment/.test(self.getTokenTypeAt(insideStart)) || !/comment/.test(self.getTokenTypeAt(insideEnd)) || self.getRange(insideStart, insideEnd, \"\\n\").indexOf(endString) > -1)\n        return false;\n      var lastStart = startLine.lastIndexOf(startString, from.ch);\n      var firstEnd = lastStart == -1 ? -1 : startLine.slice(0, from.ch).indexOf(endString, lastStart + startString.length);\n      if (lastStart != -1 && firstEnd != -1 && firstEnd + endString.length != from.ch)\n        return false;\n      firstEnd = endLine.indexOf(endString, to.ch);\n      var almostLastStart = endLine.slice(to.ch).lastIndexOf(startString, firstEnd - to.ch);\n      lastStart = firstEnd == -1 || almostLastStart == -1 ? -1 : to.ch + almostLastStart;\n      if (firstEnd != -1 && lastStart != -1 && lastStart != to.ch)\n        return false;\n      self.operation(function() {\n        self.replaceRange(\"\", Pos(end, close - (pad && endLine.slice(close - pad.length, close) == pad ? pad.length : 0)), Pos(end, close + endString.length));\n        var openEnd = open + startString.length;\n        if (pad && startLine.slice(openEnd, openEnd + pad.length) == pad)\n          openEnd += pad.length;\n        self.replaceRange(\"\", Pos(start, open), Pos(start, openEnd));\n        if (lead)\n          for (var i2 = start + 1; i2 <= end; ++i2) {\n            var line2 = self.getLine(i2), found2 = line2.indexOf(lead);\n            if (found2 == -1 || nonWS.test(line2.slice(0, found2)))\n              continue;\n            var foundEnd = found2 + lead.length;\n            if (pad && line2.slice(foundEnd, foundEnd + pad.length) == pad)\n              foundEnd += pad.length;\n            self.replaceRange(\"\", Pos(i2, found2), Pos(i2, foundEnd));\n          }\n      });\n      return true;\n    });\n  });\n})();\nvar comment = comment$2.exports;\nvar comment$1 = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ _mergeNamespaces({\n  __proto__: null,\n  [Symbol.toStringTag]: \"Module\",\n  \"default\": comment\n}, [comment$2.exports]));\nexport { comment$1 as c };\n"],"sourceRoot":""}