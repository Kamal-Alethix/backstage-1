{"version":3,"sources":["webpack://example-app/../node_modules/@sucrase/webpack-loader/dist/plugins/techdocs/src/home/components/TechDocsCustomHome.tsx"],"names":[],"mappings":"oRA0CA,KAAM,GAAS,CACb,UAAW,YACX,aAAc,GAChB,EAuCM,EAAc,CAAC,CACnB,SACA,WACA,WAKG,CAOH,KAAM,GAAU,GANE,KAAW,CAC3B,eAAgB,CACd,aAAc,OACd,GAAI,EAAO,SAAW,EAAO,SAAW,CAAC,CAC3C,CACF,CAAC,EACyB,EACpB,CAAE,QAAS,EAAkB,iBAAkB,yBAAmB,EAElE,EAAQ,EAAO,EAAO,WAEtB,EAAgB,EAAS,OAAO,GAChC,EAAO,kBAAoB,cACzB,EACK,GAEF,EAAc,CAAM,EAI3B,MAAO,GAAO,iBAAoB,YAClC,EAAO,gBAAgB,CAAM,CAEhC,EAED,MACE,iBAAoB,WAAgB,KAChC,gBAAoB,gBAAe,CAAE,MAAO,EAAO,MAAO,YAAa,EAAO,WAAY,EACxF,IAAU,EACV,gBAAoB,gBAAe,KAAM,2CAEzC,EACE,IACN,EACE,gBAAoB,MAAO,CAAE,UAAW,EAAQ,cAAe,EAC7D,gBAAoB,EAAO,CAAE,cAAe,wBAAyB,SAAU,CAAc,CAAE,CACnG,CACF,CAEJ,EAWa,EAAsB,GAAU,CAC3C,KAAM,CAAE,cAAe,EACjB,CAAC,EAAa,GAAkB,eAAS,CAAC,EAC1C,EAAa,aAAO,eAAa,EAEjC,CACJ,MAAO,EACP,UACA,SACE,cAAS,SAcJ,MAbgB,GAAW,YAAY,CAC5C,OAAQ,CACN,iDAAkD,uBACpD,EACA,OAAQ,CACN,aACA,OACA,WACA,YACA,aACA,WACF,CACF,CAAC,GACe,MAAM,OAAQ,GAAW,C,MACvC,MAAO,CAAC,CAAC,MAAO,SAAS,cAAhB,QAA8B,6BACzC,CAAC,CACF,EAEK,EAAmB,EAAW,GAEpC,MAAI,GAEA,gBAAoB,IAAqB,KACrC,gBAAoB,UAAS,KAC3B,gBAAoB,WAAU,IAAK,CACvC,CACF,EAIA,EAEA,gBAAoB,IAAqB,KACrC,gBAAoB,UAAS,KAC3B,gBAAoB,eAAc,CAClC,SAAU,QACV,MAAO,yCAA8C,EAEnD,gBAAoB,cAAa,CAAE,SAAU,OAAQ,KAAM,EAAM,SAAS,CAAE,CAAE,CAClF,CACF,CACF,EAKF,gBAAoB,IAAqB,KACrC,gBAAoB,aAAY,CAChC,cAAe,EACf,SAAU,GAAS,EAAe,CAAK,EACvC,KAAM,EAAW,IAAI,CAAC,CAAE,SAAS,IAAW,EAC1C,GAAI,EAAM,SAAS,EACnB,OACF,EAAE,CAAE,CACN,EACE,gBAAoB,UAAS,CAAE,cAAe,kBAAmB,EAC/D,EAAiB,OAAO,IAAI,CAAC,EAAQ,IACrC,gBAAoB,EAAa,CAC/B,IAAK,EACL,OAAQ,EACR,SAAY,GAAsB,CAAC,EACnC,MAAO,CAAM,CACf,CACD,CACH,CACF,CAEJ,C","file":"static/7110.51e8a011.chunk.js","sourcesContent":["/*\n * Copyright 2021 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport React, { useState } from 'react';\nimport useAsync from 'react-use/lib/useAsync';\nimport { makeStyles } from '@material-ui/core';\n\nimport {\n  CATALOG_FILTER_EXISTS,\n  catalogApiRef,\n\n  useEntityOwnership,\n} from '@backstage/plugin-catalog-react';\n\nimport { DocsTable } from './Tables';\nimport { DocsCardGrid } from './Grids';\nimport { TechDocsPageWrapper } from './TechDocsPageWrapper';\n\nimport {\n  CodeSnippet,\n  Content,\n  HeaderTabs,\n  Progress,\n  WarningPanel,\n  SupportButton,\n  ContentHeader,\n} from '@backstage/core-components';\nimport { useApi } from '@backstage/core-plugin-api';\n\nconst panels = {\n  DocsTable: DocsTable,\n  DocsCardGrid: DocsCardGrid,\n};\n\n/**\n * Available panel types\n *\n * @public\n */\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nconst CustomPanel = ({\n  config,\n  entities,\n  index,\n}\n\n\n\n) => {\n  const useStyles = makeStyles({\n    panelContainer: {\n      marginBottom: '2rem',\n      ...(config.panelCSS ? config.panelCSS : {}),\n    },\n  });\n  const classes = useStyles();\n  const { loading: loadingOwnership, isOwnedEntity } = useEntityOwnership();\n\n  const Panel = panels[config.panelType];\n\n  const shownEntities = entities.filter(entity => {\n    if (config.filterPredicate === 'ownedByUser') {\n      if (loadingOwnership) {\n        return false;\n      }\n      return isOwnedEntity(entity);\n    }\n\n    return (\n      typeof config.filterPredicate === 'function' &&\n      config.filterPredicate(entity)\n    );\n  });\n\n  return (\n    React.createElement(React.Fragment, null\n      , React.createElement(ContentHeader, { title: config.title, description: config.description,}\n        , index === 0 ? (\n          React.createElement(SupportButton, null, \"Discover documentation in your ecosystem.\"\n\n          )\n        ) : null\n      )\n      , React.createElement('div', { className: classes.panelContainer,}\n        , React.createElement(Panel, { 'data-testid': \"techdocs-custom-panel\", entities: shownEntities,} )\n      )\n    )\n  );\n};\n\n/**\n * Props for {@link TechDocsCustomHome}\n *\n * @public\n */\n\n\n\n\nexport const TechDocsCustomHome = (props) => {\n  const { tabsConfig } = props;\n  const [selectedTab, setSelectedTab] = useState(0);\n  const catalogApi = useApi(catalogApiRef);\n\n  const {\n    value: entities,\n    loading,\n    error,\n  } = useAsync(async () => {\n    const response = await catalogApi.getEntities({\n      filter: {\n        'metadata.annotations.backstage.io/techdocs-ref': CATALOG_FILTER_EXISTS,\n      },\n      fields: [\n        'apiVersion',\n        'kind',\n        'metadata',\n        'relations',\n        'spec.owner',\n        'spec.type',\n      ],\n    });\n    return response.items.filter((entity) => {\n      return !!entity.metadata.annotations?.['backstage.io/techdocs-ref'];\n    });\n  });\n\n  const currentTabConfig = tabsConfig[selectedTab];\n\n  if (loading) {\n    return (\n      React.createElement(TechDocsPageWrapper, null\n        , React.createElement(Content, null\n          , React.createElement(Progress, null )\n        )\n      )\n    );\n  }\n\n  if (error) {\n    return (\n      React.createElement(TechDocsPageWrapper, null\n        , React.createElement(Content, null\n          , React.createElement(WarningPanel, {\n            severity: \"error\",\n            title: \"Could not load available documentation.\"    ,}\n          \n            , React.createElement(CodeSnippet, { language: \"text\", text: error.toString(),} )\n          )\n        )\n      )\n    );\n  }\n\n  return (\n    React.createElement(TechDocsPageWrapper, null\n      , React.createElement(HeaderTabs, {\n        selectedIndex: selectedTab,\n        onChange: index => setSelectedTab(index),\n        tabs: tabsConfig.map(({ label }, index) => ({\n          id: index.toString(),\n          label,\n        })),}\n      )\n      , React.createElement(Content, { 'data-testid': \"techdocs-content\",}\n        , currentTabConfig.panels.map((config, index) => (\n          React.createElement(CustomPanel, {\n            key: index,\n            config: config,\n            entities: !!entities ? entities : [],\n            index: index,}\n          )\n        ))\n      )\n    )\n  );\n};\n"],"sourceRoot":""}